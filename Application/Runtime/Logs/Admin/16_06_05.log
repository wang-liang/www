[ 2016-06-05T15:29:43+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000041s ]
INFO: [ app_init ] --END-- [ RunTime:0.050569s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.030934s ]
INFO: [ app_begin ] --END-- [ RunTime:0.031115s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000160s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000338s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.100868s ]
INFO: [ view_parse ] --END-- [ RunTime:0.101102s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.035189s ]
INFO: [ view_filter ] --END-- [ RunTime:0.035337s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.010544s ]
INFO: [ app_end ] --END-- [ RunTime:0.010678s ]

[ 2016-06-05T16:23:30+08:00 ] 127.0.0.1 /index.php/ADMIN
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000622s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000641s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000719s ]
ERR: 无法加载控制器:Index

[ 2016-06-05T16:23:36+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000469s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000534s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000599s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000080s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000152s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006046s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006127s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000328s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000395s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000563s ]
INFO: [ app_end ] --END-- [ RunTime:0.000623s ]

[ 2016-06-05T16:24:08+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000464s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000621s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000686s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006839s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006920s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000334s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000400s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000563s ]
INFO: [ app_end ] --END-- [ RunTime:0.000626s ]

[ 2016-06-05T16:25:13+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000825s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000780s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000862s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 7  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000127s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000297s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.186613s ]
INFO: [ view_parse ] --END-- [ RunTime:0.186770s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000867s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001006s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001538s ]
INFO: [ app_end ] --END-- [ RunTime:0.001679s ]

[ 2016-06-05T16:25:41+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000659s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000848s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000919s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: UPDATE `sc_message` SET `title`='递归和递推思想',`content`='有关函数的编程思想：<br />
<span style=\"color:#E53333;\">递归思想：——递归函数</span><br />
就是在一个函数内部调用它自己的函数。<br />
递归思想总结：<br />
当面对一个“大问题”，该大问题可以经由该问题的同类问题的“小一级问题”而经过简单计算获得，<br />
而且，可以获知（已知）这类问题的“最小一级问题”的答案。则此时就可以使用递归方法来解决该问题。<br />
此时该函数的基本模式是：<br />
function &nbsp;digui( $n ){<br />
&nbsp;&nbsp;&nbsp;&nbsp;if(是最小一级){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 已知的答案；<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;$jieguo = 对 digui($n-1) 进行简单运算；<br />
&nbsp;&nbsp;&nbsp;&nbsp;return $jieguo;<br />
}<br />
<br />
<span style=\"color:#E53333;\">递推（迭代）思想</span><br />
如果要求一个“大问题”，且该问题有如下2个特点：<br />
1，已知该问题的同类问题的最小问题的答案。<br />
2，如果知道这种问题的小一级问题的答案，就可以轻松求得其“大一级”问题的答案，并且此问题的级次有一定的规律；<br />
则此时就可以使用递推思想来解决该问题，代码模式为：<br />
$qian = 已知的最小一级问题的答案；<br />
for( $i = 最小一级的下一级； &nbsp;$i &lt;= 最大一级的级次； ++$i）{<br />
&nbsp;&nbsp;&nbsp;&nbsp;$jieguo = 对 $qian 进行一定的计算，通常需要使用到$i;<br />
&nbsp;&nbsp;&nbsp;&nbsp;$qian = $jieguo;<br />
}<br />
echo &nbsp;“结果为：” &nbsp;. &nbsp;$jieguo;<br />
通常，如果一个问题，既能使用递归算计解决，又能使用递推算法解决，则应该使用递推算法。<br />
<br />
<br />
<br />
<br />
<br />
<br />' WHERE `id` = 7 [ RunTime:0.0869s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000272s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.039934s ]
INFO: [ view_parse ] --END-- [ RunTime:0.040132s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001017s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001153s ]

[ 2016-06-05T16:29:25+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000573s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000899s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000995s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('文件权限的表示及含义','用system(\"ls -lt 文件名 &gt;oldmod.txt\");将文件原来的权限保存<br />
读写完以后<br />
用system(\"chmod qqq 文件名\");将文件原来的权限恢复<br />
有关权限代号qqq的部分，列表于下：&nbsp;<br />
<span style=\"color:#E53333;\">　r：读取权限，数字代号为\"4\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　w：写入权限，数字代号为\"2\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　x：执行或切换权限，数字代号为\"1\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　-：不具任何权限，数字代号为\"0\"。&nbsp;</span><br />
你可以使用chmod 命令来修改属于你的文件的访问权限。举个例子，以下命令将把文件junk 给所<br />
有用户增加“只读”权限。<br />
Chmod a+r junk<br />
在以上的命令，除了用“a”表示所有用户(all)，我还可以用“u”表示用户(user)，“g”表示用<br />
户组(group)，“o”表示其他用户(other users)。除了加号“+”增加权限，我还可以使用减号<br />
“－”删除权限，等于号“=”设置权限。除了“r”表示只读权限(read)，我还可以用“w”表示<br />
写权限(write)，“x”表示执行权限(execute)。<br />
第二个例子，以下命令将删除其他用户对junk 文件的执行权限：<br />
chmod o-x junk<br />
除了字符，也可以使用数字来设置权限。想知道是然后工作的，看以下例子：<br />
execute=1<br />
write=2<br />
read=4<br />
<span style=\"color:#E53333;\">对于指定的三种不同用户级别总结如下:</span><br />
<span style=\"color:#E53333;\">0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</span><br />
<span style=\"color:#E53333;\">1 ＝ 只能执行 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">2 ＝ 只能写 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">3 ＝ 只能写和执行 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">4 ＝ 只读 （常见）</span><br />
<span style=\"color:#E53333;\">5 ＝ 只读和执行 （常见）</span><br />
<span style=\"color:#E53333;\">6 ＝ 读和写 （常见）</span><br />
<span style=\"color:#E53333;\">7 ＝ 读，写和执行 （常见）</span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里很经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
权限设置例子 rwx rw- r--<br />
缺省权限 --- --x - wx<br />
<span style=\"color:#E53333;\">权限的二进制表示法 111 110 100</span><br />
<span style=\"color:#E53333;\">权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</span><br />') [ RunTime:0.0552s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000110s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000270s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016506s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016674s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001229s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001364s ]

[ 2016-06-05T16:29:27+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000599s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000798s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000899s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000067s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007663s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007804s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000552s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000620s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000911s ]
INFO: [ app_end ] --END-- [ RunTime:0.000977s ]

[ 2016-06-05T16:30:09+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000674s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000801s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000911s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000090s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000166s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007025s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007098s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000509s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000568s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000739s ]
INFO: [ app_end ] --END-- [ RunTime:0.000804s ]

[ 2016-06-05T16:30:15+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000736s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000630s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000709s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='用system(\"ls -lt 文件名 &gt;oldmod.txt\");将文件原来的权限保存<br />
读写完以后<br />
用system(\"chmod qqq 文件名\");将文件原来的权限恢复<br />
有关权限代号qqq的部分，列表于下：&nbsp;<br />
<span style=\"color:#E53333;\">　r：读取权限，数字代号为\"4\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　w：写入权限，数字代号为\"2\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　x：执行或切换权限，数字代号为\"1\"。&nbsp;</span><br />
<span style=\"color:#E53333;\">　-：不具任何权限，数字代号为\"0\"。&nbsp;</span><br />
你可以使用chmod 命令来修改属于你的文件的访问权限。举个例子，以下命令将把文件junk 给所<br />
有用户增加“只读”权限。<br />
Chmod a+r junk<br />
在以上的命令，除了用“a”表示所有用户(all)，我还可以用“u”表示用户(user)，“g”表示用<br />
户组(group)，“o”表示其他用户(other users)。除了加号“+”增加权限，我还可以使用减号<br />
“－”删除权限，等于号“=”设置权限。除了“r”表示只读权限(read)，我还可以用“w”表示<br />
写权限(write)，“x”表示执行权限(execute)。<br />
第二个例子，以下命令将删除其他用户对junk 文件的执行权限：<br />
chmod o-x junk<br />
除了字符，也可以使用数字来设置权限。想知道是然后工作的，看以下例子：<br />
execute=1<br />
write=2<br />
read=4<br />
<span style=\"color:#E53333;\">对于指定的三种不同用户级别总结如下:</span><br />
<span style=\"color:#E53333;\">0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</span><br />
<span style=\"color:#E53333;\">1 ＝ 只能执行 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">2 ＝ 只能写 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">3 ＝ 只能写和执行 （看起来不太正常）</span><br />
<span style=\"color:#E53333;\">4 ＝ 只读 （常见）</span><br />
<span style=\"color:#E53333;\">5 ＝ 只读和执行 （常见）</span><br />
<span style=\"color:#E53333;\">6 ＝ 读和写 （常见）</span><br />
<span style=\"color:#E53333;\">7 ＝ 读，写和执行 （常见）</span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里很经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
权限设置例子 rwx rw- r--<br />
缺省权限 --- --x - wx<br />
<span style=\"color:#E53333;\">权限的二进制表示法 111 110 100</span><br />
<span style=\"color:#E53333;\">权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</span><br />' WHERE `id` = 10 [ RunTime:0.0040s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007392s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007465s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000414s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000469s ]

[ 2016-06-05T16:33:40+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000639s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000806s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000875s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('和域名相关的一些问题','<span style=\"color:#E53333;\">如何查看本机IP地址的方法：</span><br />
ipconfig &nbsp; 或者网络/本地连接/详细信息查看<br />
<span style=\"color:#E53333;\">查看本机网卡MAC物理地址的方法：</span><br />
ipconfig/all<br />
<span style=\"color:#E53333;\">查看域名对应的IP地址方法</span>：<br />
ping www.baidu.com<br />
<span style=\"color:#E53333;\">什么是DNS，主要作用是什么？</span><br />
域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别<br />
（计算机只能识别二进制）<br />
<span style=\"color:#E53333;\">本机的域名是什么？对应的IP是多少？</span><br />
localhost	对应的IP是 127.0.0.1<br />
<span style=\"color:#E53333;\">php是基于b/s模式还是c/s模式？</span><br />
php属于b/s模式 &nbsp;因为php是服务器端脚本<br />
b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站<br />
c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ<br />') [ RunTime:0.0019s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000155s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007686s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007773s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000549s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000614s ]

[ 2016-06-05T16:33:41+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000548s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000824s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000903s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000078s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000186s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007090s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007165s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000455s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000515s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000756s ]
INFO: [ app_end ] --END-- [ RunTime:0.000819s ]

[ 2016-06-05T16:34:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000502s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000667s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000733s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000160s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007747s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007826s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000506s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000568s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000758s ]
INFO: [ app_end ] --END-- [ RunTime:0.000819s ]

[ 2016-06-05T16:34:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000027s ]
INFO: [ app_init ] --END-- [ RunTime:0.001299s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000934s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001052s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"color:#E53333;\">如何查看本机IP地址的方法：</span><br />
<p>
	ipconfig &nbsp; 或者网络/本地连接/详细信息查看
</p>
<p>
	<br />
</p>
<span style=\"color:#E53333;\">查看本机网卡MAC物理地址的方法：</span><br />
<p>
	ipconfig/all
</p>
<p>
	<br />
</p>
<span style=\"color:#E53333;\">查看域名对应的IP地址方法</span>：<br />
<p>
	ping www.baidu.com
</p>
<p>
	<br />
</p>
<span style=\"color:#E53333;\">什么是DNS，主要作用是什么？</span><br />
域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别<br />
<p>
	（计算机只能识别二进制）
</p>
<p>
	<br />
</p>
<span style=\"color:#E53333;\">本机的域名是什么？对应的IP是多少？</span><br />
<p>
	localhost	对应的IP是 127.0.0.1
</p>
<p>
	<br />
</p>
<span style=\"color:#E53333;\">php是基于b/s模式还是c/s模式？</span><br />
php属于b/s模式 &nbsp;因为php是服务器端脚本<br />
b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站<br />
c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ<br />' WHERE `id` = 11 [ RunTime:0.0502s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000110s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000281s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015416s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015565s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000792s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000923s ]

[ 2016-06-05T16:34:48+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000923s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000756s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000823s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0045s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006967s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007044s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000470s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000531s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000748s ]
INFO: [ app_end ] --END-- [ RunTime:0.000809s ]

[ 2016-06-05T16:36:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000566s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000818s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000924s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"color:#E53333;line-height:1.5;\">如何查看本机IP地址的方法：</span><br />
<p>
	<span style=\"line-height:1.5;\">ipconfig &nbsp; 或者网络/本地连接/详细信息查看</span>
</p>
<span style=\"color:#E53333;line-height:1.5;\">查看本机网卡MAC物理地址的方法：</span><br />
<p>
	<span style=\"line-height:1.5;\">ipconfig/all</span>
</p>
<span style=\"color:#E53333;line-height:1.5;\">查看域名对应的IP地址方法</span><span style=\"line-height:1.5;\">：</span><br />
<p>
	<span style=\"line-height:1.5;\">ping www.baidu.com</span>
</p>
<span style=\"color:#E53333;line-height:1.5;\">什么是DNS，主要作用是什么？</span><br />
<span style=\"line-height:1.5;\"> 域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别</span><span style=\"line-height:1.5;\">（计算机只能识别二进制）</span><span style=\"line-height:2;\"><br />
</span><span style=\"color:#E53333;line-height:1.5;\">本机的域名是什么？对应的IP是多少？</span><br />
<p>
	<span style=\"line-height:1.5;\">localhost	对应的IP是 127.0.0.1</span>
</p>
<span style=\"color:#E53333;line-height:1.5;\">php是基于b/s模式还是c/s模式？</span><br />
<span style=\"line-height:1.5;\"> php属于b/s模式 &nbsp;因为php是服务器端脚本</span><br />
<span style=\"line-height:1.5;\"> b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站</span><br />
<span style=\"line-height:1.5;\"> c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ</span><br />' WHERE `id` = 11 [ RunTime:0.0557s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000100s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000241s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014910s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015067s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001241s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001367s ]

[ 2016-06-05T16:37:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000683s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000841s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000912s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0050s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000070s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000153s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007827s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007915s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000506s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000577s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000829s ]
INFO: [ app_end ] --END-- [ RunTime:0.000901s ]

[ 2016-06-05T16:37:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000548s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000642s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000708s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='如何查看本机IP地址的方法：<br />
ipconfig &nbsp; 或者网络/本地连接/详细信息查看<br />
查看本机网卡MAC物理地址的方法：<br />
ipconfig/all<br />
查看域名对应的IP地址方法：<br />
ping www.baidu.com<br />
什么是DNS，主要作用是什么？<br />
域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别<br />
（计算机只能识别二进制）<br />
本机的域名是什么？对应的IP是多少？<br />
localhost	对应的IP是 127.0.0.1<br />
php是基于b/s模式还是c/s模式？<br />
php属于b/s模式 &nbsp;因为php是服务器端脚本<br />
b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站<br />
c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />' WHERE `id` = 11 [ RunTime:0.0532s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000233s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013794s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013932s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000808s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000929s ]

[ 2016-06-05T16:37:42+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.000905s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001205s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001369s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000149s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007087s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007166s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000496s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000554s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000670s ]
INFO: [ app_end ] --END-- [ RunTime:0.000730s ]

[ 2016-06-05T16:37:49+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000033s ]
INFO: [ app_init ] --END-- [ RunTime:0.000759s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000895s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000989s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"line-height:1.5;\">如何查看本机IP地址的方法：</span><br />
<span style=\"line-height:1.5;\"> ipconfig &nbsp; 或者网络/本地连接/详细信息查看</span><br />
<span style=\"line-height:1.5;\"> 查看本机网卡MAC物理地址的方法：</span><br />
<span style=\"line-height:1.5;\"> ipconfig/all</span><br />
<span style=\"line-height:1.5;\"> 查看域名对应的IP地址方法：</span><br />
<span style=\"line-height:1.5;\"> ping www.baidu.com</span><br />
<span style=\"line-height:1.5;\"> 什么是DNS，主要作用是什么？</span><br />
<span style=\"line-height:1.5;\"> 域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别</span><br />
<span style=\"line-height:1.5;\"> （计算机只能识别二进制）</span><br />
<span style=\"line-height:1.5;\"> 本机的域名是什么？对应的IP是多少？</span><br />
<span style=\"line-height:1.5;\"> localhost	对应的IP是 127.0.0.1</span><br />
<span style=\"line-height:1.5;\"> php是基于b/s模式还是c/s模式？</span><br />
<span style=\"line-height:1.5;\"> php属于b/s模式 &nbsp;因为php是服务器端脚本</span><br />
<span style=\"line-height:1.5;\"> b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站</span><br />
<span style=\"line-height:1.5;\"> c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ</span><br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />' WHERE `id` = 11 [ RunTime:0.0761s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000168s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000332s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015550s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015698s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000766s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000887s ]

[ 2016-06-05T16:38:02+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000549s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000659s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000723s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006771s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006848s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000440s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000500s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000706s ]
INFO: [ app_end ] --END-- [ RunTime:0.000766s ]

[ 2016-06-05T16:40:02+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000657s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000765s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000833s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0044s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span></span><span style=\"line-height:1.5;color:#E53333;\">如何查看本机IP地址的方法：</span><span></span><br />
<span style=\"line-height:1.5;\"> ipconfig 或者网络/本地连接/详细信息查看</span><br />
<span style=\"line-height:1.5;\"><span></span><span></span><span style=\"color:#E53333;\">查看本机网卡MAC</span><span style=\"color:#E53333;\">物理地址的方法</span><span style=\"color:#E53333;\">：</span><span></span><span></span></span><br />
<span style=\"line-height:1.5;\"> ipconfig/all</span><br />
<span style=\"line-height:1.5;\"> 查看域名对应的IP地址方法：</span><br />
<span style=\"line-height:1.5;\"> ping www.baidu.com</span><br />
<span style=\"line-height:1.5;\"> <span></span>什么是DNS，主要作用是什么？<span></span></span><br />
<span style=\"line-height:1.5;\">域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别</span><span style=\"line-height:1.5;\">（计算机只能识别二进制）</span><br />
<span style=\"line-height:1.5;\"> 本机的域名是什么？对应的IP是多少？</span><br />
<span style=\"line-height:1.5;\"> localhost	对应的IP是 127.0.0.1</span><br />
<span style=\"line-height:1.5;\"> php是基于b/s模式还是c/s模式？</span><br />
<span style=\"line-height:1.5;\"> php属于b/s模式 &nbsp;因为php是服务器端脚本</span><br />
<span style=\"line-height:1.5;\"> b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站</span><br />
<span style=\"line-height:1.5;\"> c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ</span><br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />' WHERE `id` = 11 [ RunTime:0.0481s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000246s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000465s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016076s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016241s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001132s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001255s ]

[ 2016-06-05T16:40:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000528s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000858s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000930s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000165s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007227s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007316s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000494s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000558s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000819s ]
INFO: [ app_end ] --END-- [ RunTime:0.000882s ]

[ 2016-06-05T16:44:11+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000739s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000947s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001038s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"color:#E53333;\">查看本机IP地址的方法：</span><br />
ipconfig &nbsp; 或者网络/本地连接/详细信息查看<br />
<span style=\"color:#E53333;\">查看本机网卡MAC物理地址的方法：</span><br />
ipconfig/all<br />
<span style=\"color:#E53333;\">查看域名对应的IP地址方法：</span><br />
ping www.baidu.com<br />
<span style=\"color:#E53333;\">什么是DNS，主要作用是什么？</span><br />
域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别<br />
（计算机只能识别二进制）<br />
<span style=\"color:#E53333;\">本机的域名是什么？对应的IP是多少？</span><br />
localhost	对应的IP是 127.0.0.1<br />
<span style=\"color:#E53333;\">php是基于b/s模式还是c/s模式？</span><br />
php属于b/s模式 &nbsp;因为php是服务器端脚本<br />
b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站<br />
c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ<br />' WHERE `id` = 11 [ RunTime:0.0549s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000097s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000250s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015411s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015642s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000978s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001098s ]

[ 2016-06-05T16:44:28+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.000906s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001189s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001324s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006944s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007029s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000405s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000466s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000735s ]
INFO: [ app_end ] --END-- [ RunTime:0.000796s ]

[ 2016-06-05T16:44:42+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000841s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000782s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000868s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"color:#E53333;line-height:1.5;\">查看本机IP地址的方法：</span><br />
<span style=\"line-height:1.5;\"> ipconfig &nbsp; 或者网络/本地连接/详细信息查看</span><br />
<span style=\"color:#E53333;line-height:1.5;\">查看本机网卡MAC物理地址的方法：</span><br />
<span style=\"line-height:1.5;\"> ipconfig/all</span><br />
<span style=\"color:#E53333;line-height:1.5;\">查看域名对应的IP地址方法：</span><br />
<span style=\"line-height:1.5;\"> ping www.baidu.com</span><br />
<span style=\"color:#E53333;line-height:1.5;\">什么是DNS，主要作用是什么？</span><br />
<span style=\"line-height:1.5;\"> 域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别</span><span style=\"line-height:1.5;\">（计算机只能识别二进制）</span><br />
<span style=\"color:#E53333;line-height:1.5;\">本机的域名是什么？对应的IP是多少？</span><br />
<span style=\"line-height:1.5;\"> localhost	对应的IP是 127.0.0.1</span><br />
<span style=\"color:#E53333;line-height:1.5;\">php是基于b/s模式还是c/s模式？</span><br />
<span style=\"line-height:1.5;\"> php属于b/s模式 &nbsp;因为php是服务器端脚本</span><br />
<span style=\"line-height:1.5;\"> b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站</span><br />
<span style=\"line-height:1.5;\"> c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ</span><br />' WHERE `id` = 11 [ RunTime:0.0093s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006921s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006993s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000377s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000434s ]

[ 2016-06-05T16:44:52+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000651s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000812s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000883s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000070s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007530s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007612s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000457s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000526s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000751s ]
INFO: [ app_end ] --END-- [ RunTime:0.000830s ]

[ 2016-06-05T16:45:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000606s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000650s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000716s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='和域名相关的一些问题',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>查看本机IP地址的方法：</strong></span><br />
<span style=\"line-height:1.5;\"> ipconfig &nbsp; 或者网络/本地连接/详细信息查看</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>查看本机网卡MAC物理地址的方法：</strong></span><br />
<span style=\"line-height:1.5;\"> ipconfig/all</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>查看域名对应的IP地址方法：</strong></span><br />
<span style=\"line-height:1.5;\"> ping www.baidu.com</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么是DNS，主要作用是什么？</strong></span><br />
<span style=\"line-height:1.5;\"> 域名解析服务，主要用来解析域名，将域名解析为对应的IP地址，然后使得计算机识别</span><span style=\"line-height:1.5;\">（计算机只能识别二进制）</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>本机的域名是什么？对应的IP是多少？</strong></span><br />
<span style=\"line-height:1.5;\"> localhost	对应的IP是 127.0.0.1</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php是基于b/s模式还是c/s模式？</strong></span><br />
<span style=\"line-height:1.5;\"> php属于b/s模式 &nbsp;因为php是服务器端脚本</span><br />
<span style=\"line-height:1.5;\"> b/s &nbsp; b指的是broswer (浏览器) &nbsp;/s指的服务器 server &nbsp;如所有的网站</span><br />
<span style=\"line-height:1.5;\"> c/s &nbsp;c指client 客户端 /s 指服务器 &nbsp; &nbsp; &nbsp;如QQ</span><br />' WHERE `id` = 11 [ RunTime:0.0513s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000112s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000281s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014968s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015093s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000883s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001015s ]

[ 2016-06-05T16:46:32+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000571s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000722s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000796s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000072s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000186s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007927s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000556s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000616s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000782s ]
INFO: [ app_end ] --END-- [ RunTime:0.000843s ]

[ 2016-06-05T16:51:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000808s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000977s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001055s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span style=\"color:#E53333;\"><strong>　r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span style=\"color:#E53333;\"><strong>execute=1</strong></span><br />
<span style=\"color:#E53333;\"><strong> write=2</strong></span><br />
<span style=\"color:#E53333;\"><strong> read=4</strong></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.2637s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000106s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000265s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015823s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016082s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000947s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001108s ]

[ 2016-06-05T16:51:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/11
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000596s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000806s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000899s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 11  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007232s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007313s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000470s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000538s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000696s ]
INFO: [ app_end ] --END-- [ RunTime:0.000766s ]

[ 2016-06-05T16:53:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000035s ]
INFO: [ app_init ] --END-- [ RunTime:0.001072s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001263s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001397s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0044s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007266s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007341s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000462s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000524s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000752s ]
INFO: [ app_end ] --END-- [ RunTime:0.000813s ]

[ 2016-06-05T16:56:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000849s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001080s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001169s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span style=\"color:#E53333;\"><strong>　r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.0493s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000274s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016469s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016607s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000783s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000900s ]

[ 2016-06-05T16:56:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000034s ]
INFO: [ app_init ] --END-- [ RunTime:0.000973s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001153s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001285s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007244s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007322s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000338s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000399s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000731s ]
INFO: [ app_end ] --END-- [ RunTime:0.000799s ]

[ 2016-06-05T16:59:41+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000036s ]
INFO: [ app_init ] --END-- [ RunTime:0.000955s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001155s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001261s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示方法：</span></span><span style=\"color:#E53333;\"><strong><br />
&nbsp; &nbsp;r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.0027s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007497s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007587s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000572s ]

[ 2016-06-05T17:00:01+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000630s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000604s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000680s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007215s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007298s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000476s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000537s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000762s ]
INFO: [ app_end ] --END-- [ RunTime:0.000826s ]

[ 2016-06-05T17:00:09+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000592s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000642s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000709s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示方法：</span></span><span style=\"color:#E53333;\"><strong><br />
r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.0503s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000136s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000288s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014063s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014209s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000701s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000833s ]

[ 2016-06-05T17:00:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.000972s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001308s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001469s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007409s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007482s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000509s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000578s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000729s ]
INFO: [ app_end ] --END-- [ RunTime:0.000790s ]

[ 2016-06-05T17:00:26+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000558s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000651s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000720s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示方法：</span></span><span style=\"color:#E53333;\"><strong><br />
&nbsp;&nbsp;&nbsp;r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.0492s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000243s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014959s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015096s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000877s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001071s ]

[ 2016-06-05T17:00:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000044s ]
INFO: [ app_init ] --END-- [ RunTime:0.001103s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000713s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000782s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000093s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000230s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007418s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007500s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000438s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000498s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000713s ]
INFO: [ app_end ] --END-- [ RunTime:0.000777s ]

[ 2016-06-05T17:00:57+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000632s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000656s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000722s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示法：</span></span><span style=\"color:#E53333;\"><strong><br />
&nbsp; r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.0569s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000252s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013739s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013892s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000765s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000886s ]

[ 2016-06-05T17:01:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000590s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000688s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000772s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000136s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006931s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007008s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000484s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000582s ]
INFO: [ app_end ] --END-- [ RunTime:0.000643s ]

[ 2016-06-05T17:01:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000600s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000757s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示法：</span></span><span style=\"color:#E53333;\"><strong><br />
&nbsp;r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
用户级别： 文件拥有者 用户组 其他用户<br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.1592s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000106s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000266s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015739s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015982s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001083s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001430s ]

[ 2016-06-05T17:02:06+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000637s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001010s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001113s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 10  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000069s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000198s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007791s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007865s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000541s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000601s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000805s ]
INFO: [ app_end ] --END-- [ RunTime:0.000869s ]

[ 2016-06-05T17:02:22+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/10
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000657s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000693s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000759s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='文件权限的表示法及含义',`content`='<span><span>权限的英文字母表示法：</span></span><span style=\"color:#E53333;\"><strong><br />
&nbsp;r：读取权限，数字代号为\"4\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　w：写入权限，数字代号为\"2\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　x：执行或切换权限，数字代号为\"1\"。&nbsp;</strong></span><br />
<span style=\"color:#E53333;\"><strong>　-：不具任何权限，数字代号为\"0\"。&nbsp;</strong></span><br />
除了字符，也可以使用数字来设置权限。想知道是如何工作的，看以下例子：<br />
<span>execute=1</span><br />
<span>write=2</span><br />
<span>read=4</span><span style=\"color:#E53333;\">&nbsp;</span><span></span><br />
<span style=\"color:#E53333;\"><strong>对于指定的三种不同用户级别总结如下:</strong></span><br />
<span style=\"color:#E53333;\"><strong>0 ＝ 没有任何权限 （不能读，不能写，不能执行） （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>1 ＝ 只能执行 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>2 ＝ 只能写 （看起来不太常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>3 ＝ 只能写和执行 （看起来不太常见<span></span>）</strong></span><br />
<span style=\"color:#E53333;\"><strong>4 ＝ 只读 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>5 ＝ 只读和执行 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>6 ＝ 读和写 （常见）</strong></span><br />
<span style=\"color:#E53333;\"><strong>7 ＝ 读，写和执行 （常见）</strong></span><br />
要给三个不同的用户级别设置访问权限，只需要把三个数字粘在一起就可以了。举例:<br />
chmod 770 junk<br />
将给文件拥有者和所属用户组所有权限（读，写和执行），而对于其他用户没有任何权限。<br />
chmod 666 junk<br />
将给所有用户（文件拥有者，所属用户组，其他用户）读写权限，但是没有执行权限。请注意这个<br />
666 权限设置里会经常用到，有人认为这是整个Linux（或者其他Unix 里）的精髓所在。<br />
chmod 411 junk<br />
将给文件拥有者以只读权限，对于所属用户组和其他用户只有执行权限。这个看起来好像没什么实<br />
际用处，但是对于北美的Linux 用户可能会感到很有趣，因为411 电话号码是他们用来获得电话号<br />
码查号帮助的。<br />
文件访问权限的数字表示法叫做“八位组”因为是基于八进制的（我们的日常计数系统是基于十进<br />
制）。八进制有八个数值从0 到7，最大数字是7。对应的，十进制有十个数字从0 到9，最大数<br />
字是9。八进制表示法对于二进制的文件权限表示法的确非常方便，每一个标志都可以通过设置成<br />
0 或者1 来表示“允许”或者“不允许”，如以下的例子：<br />
<strong><span style=\"color:#E53333;\">用户级别： 文件拥有者 用户组 其他用户</span></strong><br />
<span style=\"color:#E53333;\"><strong>权限设置例子 rwx rw- r--</strong></span><br />
<span style=\"color:#E53333;\"><strong> 缺省权限 --- --x - wx</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的二进制表示法 111 110 100</strong></span><br />
<span style=\"color:#E53333;\"><strong>权限的八进制表示法 7 &nbsp; 6 &nbsp; 4</strong></span><br />' WHERE `id` = 10 [ RunTime:0.1513s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000091s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000230s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.012706s ]
INFO: [ view_parse ] --END-- [ RunTime:0.012858s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000931s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001153s ]

[ 2016-06-05T17:12:45+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000656s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001105s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001202s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('JS中的void运算符','Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
&lt;a href=\"javascript:void(0)\"&gt;单此处什么也不会发生&lt;/a&gt;<br />
a href=# 与 a href=javascript:void(0) 的区别：<br />
#包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳动到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000125s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007057s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007135s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000464s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000525s ]

[ 2016-06-05T17:12:46+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000648s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000795s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000862s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007073s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007154s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000454s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000513s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000764s ]
INFO: [ app_end ] --END-- [ RunTime:0.000826s ]

[ 2016-06-05T17:13:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000034s ]
INFO: [ app_init ] --END-- [ RunTime:0.001101s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000805s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000873s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 12  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006812s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006914s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000637s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000733s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000859s ]
INFO: [ app_end ] --END-- [ RunTime:0.000942s ]

[ 2016-06-05T17:13:48+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000615s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000693s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000758s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='javascript中的 void 运算符',`content`='Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
<a href=\"javascript:void(0)\">单此处什么也不会发生</a><br />
a href=# 与 a href=javascript:void(0) 的区别：<br />
#包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳动到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />' WHERE `id` = 12 [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000169s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000307s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007428s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007520s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000441s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000500s ]

[ 2016-06-05T17:15:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.001097s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000904s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000969s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 12  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000168s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007048s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007133s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000473s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000536s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000875s ]
INFO: [ app_end ] --END-- [ RunTime:0.000952s ]

[ 2016-06-05T17:17:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000029s ]
INFO: [ app_init ] --END-- [ RunTime:0.000785s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000899s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000989s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='javascript中的 void 运算符',`content`='Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯。<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
<span></span><a href=\"javascript:void(0)\"><u>&lt;a href=\"javascript:void(0)\"&gt;单此处什么也不会发生&lt;/ a&gt;</u></a><span></span><br />
<span style=\"color:#E53333;\">a href=# 与 a href=javascript:void(0) 的区别：</span><br />
#包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />' WHERE `id` = 12 [ RunTime:0.0523s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000166s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000537s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017157s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001003s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001139s ]

[ 2016-06-05T17:18:14+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000730s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000837s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000918s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0052s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 12  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006706s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006789s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000415s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000473s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000718s ]
INFO: [ app_end ] --END-- [ RunTime:0.000778s ]

[ 2016-06-05T17:18:37+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000560s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000624s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000693s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='javascript中的 void 运算符',`content`='Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯。<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
<span></span><a href=\"javascript:void(0)\"><u></u></a><u><a href=\"javascript:void(0)\">单此处什么也不会发生<!-- a--></a></u><span></span><br />
<span style=\"color:#E53333;\"><strong>a href=# 与 a href=javascript:void(0) 的区别：</strong></span><br />
<span style=\"color:#E53333;\">#</span>包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />' WHERE `id` = 12 [ RunTime:0.0497s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000243s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014111s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014246s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000782s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000902s ]

[ 2016-06-05T17:18:55+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000786s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000894s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000973s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 12  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007113s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007208s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000371s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000439s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000819s ]
INFO: [ app_end ] --END-- [ RunTime:0.000881s ]

[ 2016-06-05T17:19:14+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000520s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000727s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000813s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='javascript中的 void 运算符',`content`='Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯。<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
<span></span><a href=\"javascript:void(0)\">&lt;a href=\"javascript:void(0)\"&gt;单此处什么也不会发生&lt;/a&gt;<!-- a--></a><br />
<span style=\"color:#E53333;\"><strong>a href= # 与 a href=javascript:void(0) 的区别：</strong></span><br />
<span style=\"color:#E53333;\">#</span>包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />' WHERE `id` = 12 [ RunTime:0.0529s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000097s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000242s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013973s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014120s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000807s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000927s ]

[ 2016-06-05T17:29:32+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000669s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000908s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000978s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('MySQL默认的排序规则','在写查询语句的时候，有一条 Select 语句没有加 “Order By”，返回的数据是不确定的。<br />
那么如果Select 语句如果不加 “Order By”， MySQL会怎么排序呢？<br />
对于 MyISAM 表<br />
MySQL Select 默认排序是按照物理存储顺序显示的。（不进行额外排序）.<br />
也就是说 SELECT * FROM tbl – 会产生“表扫描”。如果表没有删除、替换、更新操作，记录会显示为插入的顺序。<br />
InnoDB 表<br />
同样的情况，会按主键的顺序排列。再次强调，这只是潜规则，不靠谱的。<br />
<br />
理解与推测：<br />
“Select” 不加 “Order by”时， MySQL 会尝试以尽可能快的方法（MySQL 实际的方法不见得快）返回数据。<br />
由于访问主键、索引大多数情况会快一些（在Cache里）所以返回的数据有可能以主键、索引的顺序输出，<br />
这里并不会真的进行排序，主要是由于主键、索引本身就是排序放到内存的，所以连续输出时可能是某种序列。<br />
在一些情况下消耗硬盘寻道时间最短的数据会先返回。<br />
如果只查询单个表，在特殊的情况下是有规律的。<br />
<br />
总结：<br />
不能依赖 MySQL 的默认排序<br />
如果你想排序，总是加上 Order By<br />
对于MYISAM表MySQL Select 默认排序是按照物理存储顺序显示的。<br />
对于InnoDB表，则会按主键的顺序排列。<br />
默认mysql会以索引进行排序，但并不意味着它一定会返回有规律的数据格式，在一些情况下消耗硬盘寻道时间最短<br />
的数据会先返回，因此如果想要排序的话，Order by 是必须要加的，如果想更深入地了解mysql内部的排序规则，只<br />
能看看Mysql的源代码了。<br />') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008088s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008163s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000545s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000601s ]

[ 2016-06-05T17:29:33+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000590s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000820s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000951s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000153s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007665s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007753s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000503s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000808s ]
INFO: [ app_end ] --END-- [ RunTime:0.000878s ]

[ 2016-06-05T17:43:29+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000684s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000861s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000931s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('','<p>
	什么是<span>Unicode</span><span>。</span><span>Unicode</span><span>的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span>Unicode</span><span>，那么，就能处理这些字符集。一般</span><span>Unicode</span><span>有两个字节。现在的</span><span>windows</span><span>操作系统都是支持</span><span>Unicode</span><span>的。&nbsp;</span><br />
什么是<span>UTF8</span><span>呢？</span><span>UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
是<span>Unicode</span><span>传送格式。即把</span><span>Unicode</span><span>文件转换成</span><span>BYTE</span><span>的传送流。</span><span>UTF8</span><span>是一种</span><span>Unicode</span><span>编码，即它的编码的字符集和</span><span>Unicode</span><span>是一致的。但编码的方式不一样。对于英文字符来讲，</span><span>UTF8</span><span>的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。</span>
</p>
<p>
	网页编码英文译为<span>web&nbsp;page&nbsp;encoding</span><span>，是在网页中指定其特定的字符编码格式的库。</span>&nbsp;<br />
GBK<span>是国家标准</span><span>GB2312</span><span>基础上扩容后兼容</span><span>GB2312</span><span>的标准。</span><span>GBK</span><span>的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span>1</span><span>。</span><span>GBK</span><span>包含全部中文字符，是国家编码，通用性比</span><span>UTF8</span><span>差，不过</span><span>UTF8</span><span>占用的数据库比</span><span>GBK</span><span>大。</span>&nbsp;<br />
UTF-8<span>：</span><span>Unicode&nbsp;TransformationFormat-8bit</span><span>，允许含</span><span>BOM</span><span>，但通常不含</span><span>BOM</span><span>。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span>8</span><span>位（即一个字节），中文使用</span><span>24</span><span>为（三个字节）来编码。</span><span>UTF-8</span><span>包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span>UTF-8</span><span>编码的文字可以在各国支持</span><span>UTF8</span><span>字符集的浏览器上显示。如果是</span><span>UTF8</span><span>编码，则在外国人的英文</span><span>IE</span><span>上也能显示中文，他们无需下载</span><span>IE</span><span>的中文语言支持包。</span>&nbsp;<br />
UTF-8<span>版本虽然具有良好的国际兼容性，但中文需要比</span><span>GBK/BIG5</span><span>版本多占用</span><span>50%</span><span>的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span>GBK</span><span>编码节省数据库空间。对于英文较多的网站，适宜用</span><span>UTF-8</span><span>节省数据库空间。</span>&nbsp;<br />
GBK<span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>如何转换？</span><span>GBK</span><span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>之间都必须通过</span><span>Unicode</span><span>编码才能相互转换：</span><span>GBK</span><span>、</span><span>GB2312——Unicode——UTF8</span><span>；</span><span>UTF8——Unicode——GBK</span><span>、</span><span>GB2312</span><span>。使用</span><span>Windows</span><span>记事本的</span><span>“</span><span>另存为</span><span>”</span><span>，可以在</span><span>GBK</span><span>、</span><span>Unicode</span><span>、</span><span>Unicode&nbsp;big&nbsp;endian</span><span>和</span><span>UTF-8</span><span>这几种编码方式间相互转换。</span>&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：<span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=gb2312\"&gt;</span><span>，指示此网页的字符集编码是</span><span>GB2312</span><span>。（或者</span><span>UTF-8</span><span>）</span>&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些<span>FTP</span><span>软件直接在线修改文件，比如</span><span>CuteFTP</span><span>，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span>window</span><span>的记事本打开，用</span><span>“</span><span>另存为</span><span>”</span><span>保存为对应的编码即可解决问题。</span>&nbsp;<br />
在<span>windows</span><span>操作系统上使用</span><span>IE</span><span>作为浏览器时，常常会发生这样的问题：在浏览使用</span><span>UTF-8</span><span>编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=UTF-8\"&nbsp;/&gt;</span><span>，由此造成某些含有中文</span><span>UTF-8</span><span>编码的页面产生空白输出。如果使用的是</span><span>Firefox</span><span>、</span><span>Sarafi</span><span>的浏览器这不会造成这个问题。这是由于</span><span>IE</span><span>解析网页编码时以</span><span>HTML</span><span>内的标签优先，而后才是</span><span>HTTP&nbsp;header</span><span>内的讯息，而</span><span>mozilla</span><span>系列的浏览器则刚刚相反。</span>&nbsp;<br />
由于<span>UTF-8</span><span>为</span><span>3</span><span>个字节表示一个汉子，而普通的</span><span>GB2312</span><span>或</span><span>BIG5</span><span>是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span>&lt;title&gt;&lt;/title&gt;</span><span>的内容时，如果在</span><span>&lt;/title&gt;</span><span>前有奇数个全角字符，</span><span>IE</span><span>把</span><span>UTF-8</span><span>当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span>&lt;/title&gt;</span><span>的</span><span>&lt;</span><span>结合成一个乱码字，导致</span><span>IE</span><span>无法读完</span><span>&lt;title&gt;</span><span>部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=UTF-8\"&nbsp;/&gt;&nbsp;</span><span>放在</span><span>&lt;title&gt;&lt;/title&gt;</span><span>之前。</span>
</p>
<p>
	<span></span>
</p>
<p>
	<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" /><span style=\"line-height:1.5;\"><span>注意的是</span><span>unicode</span><span>一个中文字符占</span><span>2</span><span>个字节，而</span><span>UTF-8</span><span>一个中&nbsp;文字符占</span><span>3</span><span>个字节）。从</span><span>unicode</span><span>到</span><span>uft-8</span><span>并不是直接的对应，而是要过一些算法和规则来转换。</span></span>
</p>
<p>
	1.&nbsp;ASCII<span>码&nbsp;</span><br />
我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（<span>bit</span><span>）有</span><span>0</span><span>和</span><span>1</span><span>两种状态，因此八个二进制位就可以组合出</span><span>256</span><span>种状态，这被称为一个字节（</span><span>byte</span><span>）。也就是说，一个字节一共可以用来表示</span><span>256</span><span>种不同的状态，每一个状态对应一个符号，就是</span><span>256</span><span>个符号，从</span><span>0000000</span><span>到</span><span>11111111</span><span>。&nbsp;</span><br />
上个世纪<span>60</span><span>年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为</span><span>ASCII</span><span>码，一直沿用至今。&nbsp;</span><br />
ASCII<span>码一共规定了</span><span>128</span><span>个字符的编码，比如空格</span><span>“SPACE”</span><span>是</span><span>32</span><span>（二进制</span><span>00100000</span><span>），大写的字母</span><span>A</span><span>是</span><span>65</span><span>（二进制</span><span>01000001</span><span>）。这</span><span>128</span><span>个符号（包括</span><span>32</span><span>个不能打印出来的控制符号），只占用了一个字节的后面</span><span>7</span><span>位，最前面的</span><span>1</span><span>位统一规定为</span><span>0</span><span>。&nbsp;</span><br />
2<span>、非</span><span>ASCII</span><span>编码</span><br />
英语用<span>128</span><span>个符号编码就够了，但是用来表示其他语言，</span><span>128</span><span>个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用</span><span>ASCII</span><span>码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的</span><span>é</span><span>的编码为</span><span>130</span><span>（二进制</span><span>10000010</span><span>）。这样一来，这些欧洲国家使用的编码体系，可以表示最多</span><span>256</span><span>个符号。</span><br />
至于亚洲国家的文字，使用的符号就更多了，汉字就多达<span>10</span><span>万左右。一个字节只能表示</span><span>256</span><span>种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是</span><span>GB2312</span><span>，使用两个字节表示一个汉字，所以理论上最多可以表示</span><span>256x256=65536</span><span>个符号。&nbsp;这里只指出，虽然都是用多个字节表示一个符号，但是</span><span>GB</span><span>类的汉字编码与后文的</span><span>Unicode</span><span>和</span><span>UTF-8</span><span>是毫无关系的。&nbsp;</span><br />
3.Unicode&nbsp;<br />
正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&nbsp;<br />
可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是<span>Unicode</span><span>，就像它的名字都表示的，这是一种所有符号的编码。&nbsp;</span><br />
Unicode<span>当然是一个很大的集合，现在的规模可以容纳</span><span>100</span><span>多万个符号。每个符号的编码都不一样，比如，</span><span>U+0639</span><span>表示阿拉伯字母</span><span>Ain</span><span>，</span><span>U+0041</span><span>表示英语的大写字母</span><span>A</span><span>，</span><span>U+4E25</span><span>表示汉字</span><span>“</span><span>严</span><span>”</span><span>。具体的符号对应表，可以查询</span><a href=\"http://link.zhihu.com/?target=http%3A/unicode.org\">http://unicode.org</a>，或者专门的汉字对应表。&nbsp;<br />
4.&nbsp;Unicode<span>的问题&nbsp;</span><br />
需要注意的是，<span>Unicode</span><span>只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。&nbsp;</span><br />
比如，汉字<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是十六进制数</span><span>4E25</span><span>，转换成二进制数足足有</span><span>15</span><span>位（</span><span>100111000100101</span><span>），也就是说这个符号的表示至少需要</span><span>2</span><span>个字节。表示其他更大的符号，可能需要</span><span>3</span><span>个字节或者</span><span>4</span><span>个字节，甚至更多。&nbsp;</span><br />
这里就有两个严重的问题，第一个问题是，如何才能区别<span>unicode</span><span>和</span><span>ascii</span><span>？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果</span><span>unicode</span><span>统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是</span><span>0</span><span>，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。&nbsp;</span><br />
它们造成的结果是：<span>1</span><span>）出现了</span><span>unicode</span><span>的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示</span><span>unicode</span><span>。</span><span>2</span><span>）</span><span>unicode</span><span>在很长一段时间内无法推广，直到互联网的出现。&nbsp;</span><br />
5.UTF-8&nbsp;<br />
互联网的普及，强烈要求出现一种统一的编码方式。<span>UTF-8</span><span>就是在互联网上使用最广的一种</span><span>unicode</span><span>的实现方式。其他实现方式还包括</span><span>UTF-16</span><span>和</span><span>UTF-32</span><span>，不过在互联网上基本不用。重复一遍，这里的关系是，</span><span>UTF-8</span><span>是</span><span>Unicode</span><span>的实现方式之一。&nbsp;</span><br />
UTF-8<span>最大的一个特点，就是它是一种变长的编码方式。它可以使用</span><span>1~4</span><span>个字节表示一个符号，根据不同的符号而变化字节长度。&nbsp;</span><br />
UTF-8<span>的编码规则很简单，只有二条：&nbsp;</span><br />
1<span>）对于单字节的符号，字节的第一位设为</span><span>0</span><span>，后面</span><span>7</span><span>位为这个符号的</span><span>unicode</span><span>码。因此对于英语字母，</span><span>UTF-8</span><span>编码和</span><span>ASCII</span><span>码是相同的。&nbsp;</span><br />
2<span>）对于</span><span>n</span><span>字节的符号（</span><span>n&gt;1</span><span>），第一个字节的前</span><span>n</span><span>位都设为</span><span>1</span><span>，第</span><span>n+1</span><span>位设为</span><span>0</span><span>，后面字节的前两位一律设为</span><span>10</span><span>。剩下的没有提及的二进制位，全部为这个符号的</span><span>unicode</span><span>码。&nbsp;</span><br />
下表总结了编码规则，字母<span>x</span><span>表示可用编码的位。&nbsp;</span><br />
Unicode<span>符号范围&nbsp;</span><span>|&nbsp;UTF-8</span><span>编码方式&nbsp;</span><br />
(<span>十六进制</span><span>)&nbsp;|&nbsp;</span><span>（二进制）&nbsp;</span><br />
--------------------+---------------------------------------------&nbsp;<br />
0000&nbsp;0000-0000&nbsp;007F&nbsp;|&nbsp;0xxxxxxx&nbsp;<br />
0000&nbsp;0080-0000&nbsp;07FF&nbsp;|&nbsp;110xxxxx&nbsp;10xxxxxx&nbsp;<br />
0000&nbsp;0800-0000&nbsp;FFFF&nbsp;|&nbsp;1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
0001&nbsp;0000-0010&nbsp;FFFF&nbsp;|&nbsp;11110xxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
下面以汉字<span>“</span><span>严</span><span>”</span><span>为例，演示如何实现</span><span>UTF-8</span><span>编码。&nbsp;</span><br />
已知<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是</span><span>4E25</span><span>（</span><span>100111000100101</span><span>），根据上表，可以发现</span><span>4E25</span><span>处在第三行的范围内（</span><span>0000&nbsp;0800-0000&nbsp;FFFF</span><span>），因此</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码需要三个字节，即格式是</span><span>“1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx”</span><span>。然后，从</span><span>“</span><span>严</span><span>”</span><span>的最后一个二进制位开始，依次从后向前填入格式中的</span><span>x</span><span>，多出的位补</span><span>0</span><span>。这样就得到了，</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码是</span><span>“11100100&nbsp;10111000&nbsp;10100101”</span><span>，转换成十六进制就是</span><span>E4B8A5</span><span>。&nbsp;</span><br />
6.&nbsp;Unicode<span>与</span><span>UTF-8</span><span>之间的转换&nbsp;</span><br />
通过上一节的例子，可以看到<span>“</span><span>严</span><span>”</span><span>的</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，</span><span>UTF-8</span><span>编码是</span><span>E4B8A5</span><span>，两者是不一样的。它们之间的转换可以通过程序实现。&nbsp;</span><br />
在<span>Windows</span><span>平台下，有一个最简单的转化方法，就是使用内置的记事本小程序</span><span>Notepad.exe</span><span>。打开文件后，点击</span><span>“</span><span>文件</span><span>”</span><span>菜单中的</span><span>“</span><span>另存为</span><span>”</span><span>命令，会跳出一个对话框，在最底部有一个</span><span>“</span><span>编码</span><span>”</span><span>的下拉条。&nbsp;</span><br />
里面有四个选项：<span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>是默认的编码方式。对于英文文件是</span><span>ASCII</span><span>编码，对于简体中文文件是</span><span>GB2312</span><span>编码（只针对</span><span>Windows</span><span>简体中文版，如果是繁体中文版会采用</span><span>Big5</span><span>码）。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>编码指的是</span><span>UCS-2</span><span>编码方式，即直接用两个字节存入字符的</span><span>Unicode</span><span>码。这个选项用的</span><span>little&nbsp;endian</span><span>格式。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>编码与上一个选项相对应。我在下一节会解释</span><span>little&nbsp;endian</span><span>和</span><span>big&nbsp;endian</span><span>的涵义。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>编码，也就是上一节谈到的编码方法。&nbsp;</span><br />
选择完<span>”</span><span>编码方式</span><span>“</span><span>后，点击</span><span>”</span><span>保存</span><span>“</span><span>按钮，文件的编码方式就立刻转换好了。&nbsp;</span><br />
7.&nbsp;Little&nbsp;endian<span>和</span><span>Big&nbsp;endian&nbsp;</span><br />
上一节已经提到，<span>Unicode</span><span>码可以采用</span><span>UCS-2</span><span>格式直接存储。以汉字</span><span>”</span><span>严</span><span>“</span><span>为例，</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，需要用两个字节存储，一个字节是</span><span>4E</span><span>，另一个字节是</span><span>25</span><span>。存储的时候，</span><span>4E</span><span>在前，</span><span>25</span><span>在后，就是</span><span>Big&nbsp;endian</span><span>方式；</span><span>25</span><span>在前，</span><span>4E</span><span>在后，就是</span><span>Little&nbsp;endian</span><span>方式。&nbsp;</span><br />
这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头<span>(Big-Endian)</span><span>敲开还是从小头</span><span>(Little-Endian)</span><span>敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。&nbsp;</span><br />
因此，第一个字节在前，就是<span>”</span><span>大头方式</span><span>“</span><span>（</span><span>Big&nbsp;endian</span><span>），第二个字节在前就是</span><span>”</span><span>小头方式</span><span>“</span><span>（</span><span>Little&nbsp;endian</span><span>）。&nbsp;</span><br />
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？&nbsp;<br />
Unicode<span>规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做</span><span>”</span><span>零宽度非换行空格</span><span>“</span><span>（</span><span>ZERO&nbsp;WIDTH&nbsp;NO-BREAK&nbsp;SPACE</span><span>），用</span><span>FEFF</span><span>表示。这正好是两个字节，而且</span><span>FF</span><span>比</span><span>FE</span><span>大</span><span>1</span><span>。&nbsp;</span><br />
如果一个文本文件的头两个字节是<span>FE&nbsp;FF</span><span>，就表示该文件采用大头方式；如果头两个字节是</span><span>FF&nbsp;FE</span><span>，就表示该文件采用小头方式。&nbsp;</span><br />
8.&nbsp;<span>实例&nbsp;</span><br />
下面，举一个实例。&nbsp;<br />
打开<span>”</span><span>记事本</span><span>“</span><span>程序</span><span>Notepad.exe</span><span>，新建一个文本文件，内容就是一个</span><span>”</span><span>严</span><span>“</span><span>字，依次采用</span><span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>编码方式保存。&nbsp;</span><br />
然后，用文本编辑软件<span>UltraEdit</span><span>中的</span><span>”</span><span>十六进制功能</span><span>“</span><span>，观察该文件的内部编码方式。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>：文件的编码就是两个字节</span><span>“D1&nbsp;CF”</span><span>，这正是</span><span>“</span><span>严</span><span>”</span><span>的</span><span>GB2312</span><span>编码，这也暗示</span><span>GB2312</span><span>是采用大头方式存储的。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>：编码是四个字节</span><span>“FF&nbsp;FE&nbsp;25&nbsp;4E”</span><span>，其中</span><span>“FF&nbsp;FE”</span><span>表明是小头方式存储，真正的编码是</span><span>4E25</span><span>。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>：编码是四个字节</span><span>“FE&nbsp;FF&nbsp;4E&nbsp;25”</span><span>，其中</span><span>“FE&nbsp;FF”</span><span>表明是大头方式存储。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>：编码是六个字节</span><span>“EF&nbsp;BB&nbsp;BF&nbsp;E4&nbsp;B8&nbsp;A5”</span><span>，前三个字节</span><span>“EF&nbsp;BB&nbsp;BF”</span><span>表示这是</span><span>UTF-8</span><span>编码，后三个</span><span>“E4B8A5”</span><span>就是</span><span>“</span><span>严</span><span>”</span><span>的具体编码，它的存储顺序与编码顺序是一致的。</span>
</p>') [ RunTime:0.0034s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000075s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000216s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008217s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008295s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000582s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000639s ]

[ 2016-06-05T17:43:30+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000036s ]
INFO: [ app_init ] --END-- [ RunTime:0.001417s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000928s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000995s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000133s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007374s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007447s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000682s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000749s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000873s ]
INFO: [ app_end ] --END-- [ RunTime:0.000988s ]

[ 2016-06-05T17:43:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000705s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000865s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000932s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008201s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008332s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000783s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000859s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001206s ]
INFO: [ app_end ] --END-- [ RunTime:0.001347s ]

[ 2016-06-05T17:43:59+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000595s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001042s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001132s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	什么是<span>Unicode</span><span>。</span><span>Unicode</span><span>的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span>Unicode</span><span>，那么，就能处理这些字符集。一般</span><span>Unicode</span><span>有两个字节。现在的</span><span>windows</span><span>操作系统都是支持</span><span>Unicode</span><span>的。&nbsp;</span><br />
什么是<span>UTF8</span><span>呢？</span><span>UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
是<span>Unicode</span><span>传送格式。即把</span><span>Unicode</span><span>文件转换成</span><span>BYTE</span><span>的传送流。</span><span>UTF8</span><span>是一种</span><span>Unicode</span><span>编码，即它的编码的字符集和</span><span>Unicode</span><span>是一致的。但编码的方式不一样。对于英文字符来讲，</span><span>UTF8</span><span>的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。</span> 
</p>
<p>
	网页编码英文译为<span>web&nbsp;page&nbsp;encoding</span><span>，是在网页中指定其特定的字符编码格式的库。</span>&nbsp;<br />
GBK<span>是国家标准</span><span>GB2312</span><span>基础上扩容后兼容</span><span>GB2312</span><span>的标准。</span><span>GBK</span><span>的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span>1</span><span>。</span><span>GBK</span><span>包含全部中文字符，是国家编码，通用性比</span><span>UTF8</span><span>差，不过</span><span>UTF8</span><span>占用的数据库比</span><span>GBK</span><span>大。</span>&nbsp;<br />
UTF-8<span>：</span><span>Unicode&nbsp;TransformationFormat-8bit</span><span>，允许含</span><span>BOM</span><span>，但通常不含</span><span>BOM</span><span>。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span>8</span><span>位（即一个字节），中文使用</span><span>24</span><span>为（三个字节）来编码。</span><span>UTF-8</span><span>包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span>UTF-8</span><span>编码的文字可以在各国支持</span><span>UTF8</span><span>字符集的浏览器上显示。如果是</span><span>UTF8</span><span>编码，则在外国人的英文</span><span>IE</span><span>上也能显示中文，他们无需下载</span><span>IE</span><span>的中文语言支持包。</span>&nbsp;<br />
UTF-8<span>版本虽然具有良好的国际兼容性，但中文需要比</span><span>GBK/BIG5</span><span>版本多占用</span><span>50%</span><span>的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span>GBK</span><span>编码节省数据库空间。对于英文较多的网站，适宜用</span><span>UTF-8</span><span>节省数据库空间。</span>&nbsp;<br />
GBK<span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>如何转换？</span><span>GBK</span><span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>之间都必须通过</span><span>Unicode</span><span>编码才能相互转换：</span><span>GBK</span><span>、</span><span>GB2312——Unicode——UTF8</span><span>；</span><span>UTF8——Unicode——GBK</span><span>、</span><span>GB2312</span><span>。使用</span><span>Windows</span><span>记事本的</span><span>“</span><span>另存为</span><span>”</span><span>，可以在</span><span>GBK</span><span>、</span><span>Unicode</span><span>、</span><span>Unicode&nbsp;big&nbsp;endian</span><span>和</span><span>UTF-8</span><span>这几种编码方式间相互转换。</span>&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：<span></span><span>，指示此网页的字符集编码是</span><span>GB2312</span><span>。（或者</span><span>UTF-8</span><span>）</span>&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些<span>FTP</span><span>软件直接在线修改文件，比如</span><span>CuteFTP</span><span>，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span>window</span><span>的记事本打开，用</span><span>“</span><span>另存为</span><span>”</span><span>保存为对应的编码即可解决问题。</span>&nbsp;<br />
在<span>windows</span><span>操作系统上使用</span><span>IE</span><span>作为浏览器时，常常会发生这样的问题：在浏览使用</span><span>UTF-8</span><span>编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span></span><span>，由此造成某些含有中文</span><span>UTF-8</span><span>编码的页面产生空白输出。如果使用的是</span><span>Firefox</span><span>、</span><span>Sarafi</span><span>的浏览器这不会造成这个问题。这是由于</span><span>IE</span><span>解析网页编码时以</span><span>HTML</span><span>内的标签优先，而后才是</span><span>HTTP&nbsp;header</span><span>内的讯息，而</span><span>mozilla</span><span>系列的浏览器则刚刚相反。</span>&nbsp;<br />
由于<span>UTF-8</span><span>为</span><span>3</span><span>个字节表示一个汉子，而普通的</span><span>GB2312</span><span>或</span><span>BIG5</span><span>是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span></span><span>的内容时，如果在</span><span></span><span>前有奇数个全角字符，</span><span>IE</span><span>把</span><span>UTF-8</span><span>当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span></span><span>的</span><span>&lt;</span><span>结合成一个乱码字，导致</span><span>IE</span><span>无法读完</span><span></span><span>部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span>&nbsp;</span><span>放在</span><span></span><span>之前。</span> 
</p>
<p>
	<span></span> 
</p>
<p>
	<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" /><span style=\"line-height:1.5;\"><span>注意的是</span><span>unicode</span><span>一个中文字符占</span><span>2</span><span>个字节，而</span><span>UTF-8</span><span>一个中&nbsp;文字符占</span><span>3</span><span>个字节）。从</span><span>unicode</span><span>到</span><span>uft-8</span><span>并不是直接的对应，而是要过一些算法和规则来转换。</span></span> 
</p>
<p>
	1.&nbsp;ASCII<span>码&nbsp;</span><br />
我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（<span>bit</span><span>）有</span><span>0</span><span>和</span><span>1</span><span>两种状态，因此八个二进制位就可以组合出</span><span>256</span><span>种状态，这被称为一个字节（</span><span>byte</span><span>）。也就是说，一个字节一共可以用来表示</span><span>256</span><span>种不同的状态，每一个状态对应一个符号，就是</span><span>256</span><span>个符号，从</span><span>0000000</span><span>到</span><span>11111111</span><span>。&nbsp;</span><br />
上个世纪<span>60</span><span>年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为</span><span>ASCII</span><span>码，一直沿用至今。&nbsp;</span><br />
ASCII<span>码一共规定了</span><span>128</span><span>个字符的编码，比如空格</span><span>“SPACE”</span><span>是</span><span>32</span><span>（二进制</span><span>00100000</span><span>），大写的字母</span><span>A</span><span>是</span><span>65</span><span>（二进制</span><span>01000001</span><span>）。这</span><span>128</span><span>个符号（包括</span><span>32</span><span>个不能打印出来的控制符号），只占用了一个字节的后面</span><span>7</span><span>位，最前面的</span><span>1</span><span>位统一规定为</span><span>0</span><span>。&nbsp;</span><br />
2<span>、非</span><span>ASCII</span><span>编码</span><br />
英语用<span>128</span><span>个符号编码就够了，但是用来表示其他语言，</span><span>128</span><span>个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用</span><span>ASCII</span><span>码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的</span><span>é</span><span>的编码为</span><span>130</span><span>（二进制</span><span>10000010</span><span>）。这样一来，这些欧洲国家使用的编码体系，可以表示最多</span><span>256</span><span>个符号。</span><br />
至于亚洲国家的文字，使用的符号就更多了，汉字就多达<span>10</span><span>万左右。一个字节只能表示</span><span>256</span><span>种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是</span><span>GB2312</span><span>，使用两个字节表示一个汉字，所以理论上最多可以表示</span><span>256x256=65536</span><span>个符号。&nbsp;这里只指出，虽然都是用多个字节表示一个符号，但是</span><span>GB</span><span>类的汉字编码与后文的</span><span>Unicode</span><span>和</span><span>UTF-8</span><span>是毫无关系的。&nbsp;</span><br />
3.Unicode&nbsp;<br />
正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&nbsp;<br />
可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是<span>Unicode</span><span>，就像它的名字都表示的，这是一种所有符号的编码。&nbsp;</span><br />
Unicode<span>当然是一个很大的集合，现在的规模可以容纳</span><span>100</span><span>多万个符号。每个符号的编码都不一样，比如，</span><span>U+0639</span><span>表示阿拉伯字母</span><span>Ain</span><span>，</span><span>U+0041</span><span>表示英语的大写字母</span><span>A</span><span>，</span><span>U+4E25</span><span>表示汉字</span><span>“</span><span>严</span><span>”</span><span>。具体的符号对应表，可以查询</span><a href=\"http://link.zhihu.com/?target=http%3A/unicode.org\">http://unicode.org</a>，或者专门的汉字对应表。&nbsp;<br />
4.&nbsp;Unicode<span>的问题&nbsp;</span><br />
需要注意的是，<span>Unicode</span><span>只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。&nbsp;</span><br />
比如，汉字<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是十六进制数</span><span>4E25</span><span>，转换成二进制数足足有</span><span>15</span><span>位（</span><span>100111000100101</span><span>），也就是说这个符号的表示至少需要</span><span>2</span><span>个字节。表示其他更大的符号，可能需要</span><span>3</span><span>个字节或者</span><span>4</span><span>个字节，甚至更多。&nbsp;</span><br />
这里就有两个严重的问题，第一个问题是，如何才能区别<span>unicode</span><span>和</span><span>ascii</span><span>？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果</span><span>unicode</span><span>统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是</span><span>0</span><span>，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。&nbsp;</span><br />
它们造成的结果是：<span>1</span><span>）出现了</span><span>unicode</span><span>的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示</span><span>unicode</span><span>。</span><span>2</span><span>）</span><span>unicode</span><span>在很长一段时间内无法推广，直到互联网的出现。&nbsp;</span><br />
5.UTF-8&nbsp;<br />
互联网的普及，强烈要求出现一种统一的编码方式。<span>UTF-8</span><span>就是在互联网上使用最广的一种</span><span>unicode</span><span>的实现方式。其他实现方式还包括</span><span>UTF-16</span><span>和</span><span>UTF-32</span><span>，不过在互联网上基本不用。重复一遍，这里的关系是，</span><span>UTF-8</span><span>是</span><span>Unicode</span><span>的实现方式之一。&nbsp;</span><br />
UTF-8<span>最大的一个特点，就是它是一种变长的编码方式。它可以使用</span><span>1~4</span><span>个字节表示一个符号，根据不同的符号而变化字节长度。&nbsp;</span><br />
UTF-8<span>的编码规则很简单，只有二条：&nbsp;</span><br />
1<span>）对于单字节的符号，字节的第一位设为</span><span>0</span><span>，后面</span><span>7</span><span>位为这个符号的</span><span>unicode</span><span>码。因此对于英语字母，</span><span>UTF-8</span><span>编码和</span><span>ASCII</span><span>码是相同的。&nbsp;</span><br />
2<span>）对于</span><span>n</span><span>字节的符号（</span><span>n&gt;1</span><span>），第一个字节的前</span><span>n</span><span>位都设为</span><span>1</span><span>，第</span><span>n+1</span><span>位设为</span><span>0</span><span>，后面字节的前两位一律设为</span><span>10</span><span>。剩下的没有提及的二进制位，全部为这个符号的</span><span>unicode</span><span>码。&nbsp;</span><br />
下表总结了编码规则，字母<span>x</span><span>表示可用编码的位。&nbsp;</span><br />
Unicode<span>符号范围&nbsp;</span><span>|&nbsp;UTF-8</span><span>编码方式&nbsp;</span><br />
(<span>十六进制</span><span>)&nbsp;|&nbsp;</span><span>（二进制）&nbsp;</span><br />
--------------------+---------------------------------------------&nbsp;<br />
0000&nbsp;0000-0000&nbsp;007F&nbsp;|&nbsp;0xxxxxxx&nbsp;<br />
0000&nbsp;0080-0000&nbsp;07FF&nbsp;|&nbsp;110xxxxx&nbsp;10xxxxxx&nbsp;<br />
0000&nbsp;0800-0000&nbsp;FFFF&nbsp;|&nbsp;1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
0001&nbsp;0000-0010&nbsp;FFFF&nbsp;|&nbsp;11110xxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
下面以汉字<span>“</span><span>严</span><span>”</span><span>为例，演示如何实现</span><span>UTF-8</span><span>编码。&nbsp;</span><br />
已知<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是</span><span>4E25</span><span>（</span><span>100111000100101</span><span>），根据上表，可以发现</span><span>4E25</span><span>处在第三行的范围内（</span><span>0000&nbsp;0800-0000&nbsp;FFFF</span><span>），因此</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码需要三个字节，即格式是</span><span>“1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx”</span><span>。然后，从</span><span>“</span><span>严</span><span>”</span><span>的最后一个二进制位开始，依次从后向前填入格式中的</span><span>x</span><span>，多出的位补</span><span>0</span><span>。这样就得到了，</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码是</span><span>“11100100&nbsp;10111000&nbsp;10100101”</span><span>，转换成十六进制就是</span><span>E4B8A5</span><span>。&nbsp;</span><br />
6.&nbsp;Unicode<span>与</span><span>UTF-8</span><span>之间的转换&nbsp;</span><br />
通过上一节的例子，可以看到<span>“</span><span>严</span><span>”</span><span>的</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，</span><span>UTF-8</span><span>编码是</span><span>E4B8A5</span><span>，两者是不一样的。它们之间的转换可以通过程序实现。&nbsp;</span><br />
在<span>Windows</span><span>平台下，有一个最简单的转化方法，就是使用内置的记事本小程序</span><span>Notepad.exe</span><span>。打开文件后，点击</span><span>“</span><span>文件</span><span>”</span><span>菜单中的</span><span>“</span><span>另存为</span><span>”</span><span>命令，会跳出一个对话框，在最底部有一个</span><span>“</span><span>编码</span><span>”</span><span>的下拉条。&nbsp;</span><br />
里面有四个选项：<span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>是默认的编码方式。对于英文文件是</span><span>ASCII</span><span>编码，对于简体中文文件是</span><span>GB2312</span><span>编码（只针对</span><span>Windows</span><span>简体中文版，如果是繁体中文版会采用</span><span>Big5</span><span>码）。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>编码指的是</span><span>UCS-2</span><span>编码方式，即直接用两个字节存入字符的</span><span>Unicode</span><span>码。这个选项用的</span><span>little&nbsp;endian</span><span>格式。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>编码与上一个选项相对应。我在下一节会解释</span><span>little&nbsp;endian</span><span>和</span><span>big&nbsp;endian</span><span>的涵义。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>编码，也就是上一节谈到的编码方法。&nbsp;</span><br />
选择完<span>”</span><span>编码方式</span><span>“</span><span>后，点击</span><span>”</span><span>保存</span><span>“</span><span>按钮，文件的编码方式就立刻转换好了。&nbsp;</span><br />
7.&nbsp;Little&nbsp;endian<span>和</span><span>Big&nbsp;endian&nbsp;</span><br />
上一节已经提到，<span>Unicode</span><span>码可以采用</span><span>UCS-2</span><span>格式直接存储。以汉字</span><span>”</span><span>严</span><span>“</span><span>为例，</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，需要用两个字节存储，一个字节是</span><span>4E</span><span>，另一个字节是</span><span>25</span><span>。存储的时候，</span><span>4E</span><span>在前，</span><span>25</span><span>在后，就是</span><span>Big&nbsp;endian</span><span>方式；</span><span>25</span><span>在前，</span><span>4E</span><span>在后，就是</span><span>Little&nbsp;endian</span><span>方式。&nbsp;</span><br />
这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头<span>(Big-Endian)</span><span>敲开还是从小头</span><span>(Little-Endian)</span><span>敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。&nbsp;</span><br />
因此，第一个字节在前，就是<span>”</span><span>大头方式</span><span>“</span><span>（</span><span>Big&nbsp;endian</span><span>），第二个字节在前就是</span><span>”</span><span>小头方式</span><span>“</span><span>（</span><span>Little&nbsp;endian</span><span>）。&nbsp;</span><br />
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？&nbsp;<br />
Unicode<span>规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做</span><span>”</span><span>零宽度非换行空格</span><span>“</span><span>（</span><span>ZERO&nbsp;WIDTH&nbsp;NO-BREAK&nbsp;SPACE</span><span>），用</span><span>FEFF</span><span>表示。这正好是两个字节，而且</span><span>FF</span><span>比</span><span>FE</span><span>大</span><span>1</span><span>。&nbsp;</span><br />
如果一个文本文件的头两个字节是<span>FE&nbsp;FF</span><span>，就表示该文件采用大头方式；如果头两个字节是</span><span>FF&nbsp;FE</span><span>，就表示该文件采用小头方式。&nbsp;</span><br />
8.&nbsp;<span>实例&nbsp;</span><br />
下面，举一个实例。&nbsp;<br />
打开<span>”</span><span>记事本</span><span>“</span><span>程序</span><span>Notepad.exe</span><span>，新建一个文本文件，内容就是一个</span><span>”</span><span>严</span><span>“</span><span>字，依次采用</span><span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>编码方式保存。&nbsp;</span><br />
然后，用文本编辑软件<span>UltraEdit</span><span>中的</span><span>”</span><span>十六进制功能</span><span>“</span><span>，观察该文件的内部编码方式。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>：文件的编码就是两个字节</span><span>“D1&nbsp;CF”</span><span>，这正是</span><span>“</span><span>严</span><span>”</span><span>的</span><span>GB2312</span><span>编码，这也暗示</span><span>GB2312</span><span>是采用大头方式存储的。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>：编码是四个字节</span><span>“FF&nbsp;FE&nbsp;25&nbsp;4E”</span><span>，其中</span><span>“FF&nbsp;FE”</span><span>表明是小头方式存储，真正的编码是</span><span>4E25</span><span>。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>：编码是四个字节</span><span>“FE&nbsp;FF&nbsp;4E&nbsp;25”</span><span>，其中</span><span>“FE&nbsp;FF”</span><span>表明是大头方式存储。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>：编码是六个字节</span><span>“EF&nbsp;BB&nbsp;BF&nbsp;E4&nbsp;B8&nbsp;A5”</span><span>，前三个字节</span><span>“EF&nbsp;BB&nbsp;BF”</span><span>表示这是</span><span>UTF-8</span><span>编码，后三个</span><span>“E4B8A5”</span><span>就是</span><span>“</span><span>严</span><span>”</span><span>的具体编码，它的存储顺序与编码顺序是一致的。</span> 
</p>' WHERE `id` = 14 [ RunTime:0.0042s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000120s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007427s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007503s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000635s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000701s ]

[ 2016-06-05T17:45:23+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000692s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000702s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000776s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000202s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008561s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008638s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000596s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000657s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000944s ]
INFO: [ app_end ] --END-- [ RunTime:0.001045s ]

[ 2016-06-05T17:47:17+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000709s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000866s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000944s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\">什么是</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">。</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">，那么，就能处理这些字符集。一般</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">有两个字节。现在的</span><span style=\"line-height:1.5;\">windows</span><span style=\"line-height:1.5;\">操作系统都是支持</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">的。&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 什么是</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">呢？</span><span style=\"line-height:1.5;\">UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 是</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">传送格式。即把</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">文件转换成</span><span style=\"line-height:1.5;\">BYTE</span><span style=\"line-height:1.5;\">的传送流。</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">是一种</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">编码，即它的编码的字符集和</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">是一致的。但编码的方式不一样。对于英文字符来讲，</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。</span><span style=\"line-height:1.5;\">网页编码英文译为</span><span style=\"line-height:1.5;\">web&nbsp;page&nbsp;encoding</span><span style=\"line-height:1.5;\">，是在网页中指定其特定的字符编码格式的库。</span><span style=\"line-height:1.5;\">&nbsp;</span>
</p>
<p>
	<span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">是国家标准</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">基础上扩容后兼容</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">的标准。</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span style=\"line-height:1.5;\">1</span><span style=\"line-height:1.5;\">。</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">包含全部中文字符，是国家编码，通用性比</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">差，不过</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">占用的数据库比</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">大。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> UTF-8</span><span style=\"line-height:1.5;\">：</span><span style=\"line-height:1.5;\">Unicode&nbsp;TransformationFormat-8bit</span><span style=\"line-height:1.5;\">，允许含</span><span style=\"line-height:1.5;\">BOM</span><span style=\"line-height:1.5;\">，但通常不含</span><span style=\"line-height:1.5;\">BOM</span><span style=\"line-height:1.5;\">。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span style=\"line-height:1.5;\">8</span><span style=\"line-height:1.5;\">位（即一个字节），中文使用</span><span style=\"line-height:1.5;\">24</span><span style=\"line-height:1.5;\">为（三个字节）来编码。</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">编码的文字可以在各国支持</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">字符集的浏览器上显示。如果是</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">编码，则在外国人的英文</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">上也能显示中文，他们无需下载</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">的中文语言支持包。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> UTF-8</span><span style=\"line-height:1.5;\">版本虽然具有良好的国际兼容性，但中文需要比</span><span style=\"line-height:1.5;\">GBK/BIG5</span><span style=\"line-height:1.5;\">版本多占用</span><span style=\"line-height:1.5;\">50%</span><span style=\"line-height:1.5;\">的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">编码节省数据库空间。对于英文较多的网站，适宜用</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">节省数据库空间。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> GBK</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">等与</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">如何转换？</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">等与</span><span style=\"line-height:1.5;\">UTF8</span><span style=\"line-height:1.5;\">之间都必须通过</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">编码才能相互转换：</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">GB2312——Unicode——UTF8</span><span style=\"line-height:1.5;\">；</span><span style=\"line-height:1.5;\">UTF8——Unicode——GBK</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">。使用</span><span style=\"line-height:1.5;\">Windows</span><span style=\"line-height:1.5;\">记事本的</span><span style=\"line-height:1.5;\">“</span><span style=\"line-height:1.5;\">另存为</span><span style=\"line-height:1.5;\">”</span><span style=\"line-height:1.5;\">，可以在</span><span style=\"line-height:1.5;\">GBK</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">Unicode</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">Unicode&nbsp;big&nbsp;endian</span><span style=\"line-height:1.5;\">和</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">这几种编码方式间相互转换。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：</span><span></span><span style=\"line-height:1.5;\">，指示此网页的字符集编码是</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">。（或者</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">）</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些</span><span style=\"line-height:1.5;\">FTP</span><span style=\"line-height:1.5;\">软件直接在线修改文件，比如</span><span style=\"line-height:1.5;\">CuteFTP</span><span style=\"line-height:1.5;\">，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span style=\"line-height:1.5;\">window</span><span style=\"line-height:1.5;\">的记事本打开，用</span><span style=\"line-height:1.5;\">“</span><span style=\"line-height:1.5;\">另存为</span><span style=\"line-height:1.5;\">”</span><span style=\"line-height:1.5;\">保存为对应的编码即可解决问题。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 在</span><span style=\"line-height:1.5;\">windows</span><span style=\"line-height:1.5;\">操作系统上使用</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">作为浏览器时，常常会发生这样的问题：在浏览使用</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span></span><span style=\"line-height:1.5;\">，由此造成某些含有中文</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">编码的页面产生空白输出。如果使用的是</span><span style=\"line-height:1.5;\">Firefox</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">Sarafi</span><span style=\"line-height:1.5;\">的浏览器这不会造成这个问题。这是由于</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">解析网页编码时以</span><span style=\"line-height:1.5;\">HTML</span><span style=\"line-height:1.5;\">内的标签优先，而后才是</span><span style=\"line-height:1.5;\">HTTP&nbsp;header</span><span style=\"line-height:1.5;\">内的讯息，而</span><span style=\"line-height:1.5;\">mozilla</span><span style=\"line-height:1.5;\">系列的浏览器则刚刚相反。</span><span style=\"line-height:1.5;\">&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 由于</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">为</span><span style=\"line-height:1.5;\">3</span><span style=\"line-height:1.5;\">个字节表示一个汉子，而普通的</span><span style=\"line-height:1.5;\">GB2312</span><span style=\"line-height:1.5;\">或</span><span style=\"line-height:1.5;\">BIG5</span><span style=\"line-height:1.5;\">是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span></span><span style=\"line-height:1.5;\">的内容时，如果在</span><span></span><span style=\"line-height:1.5;\">前有奇数个全角字符，</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">把</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span></span><span style=\"line-height:1.5;\">的</span><span style=\"line-height:1.5;\">&lt;</span><span style=\"line-height:1.5;\">结合成一个乱码字，导致</span><span style=\"line-height:1.5;\">IE</span><span style=\"line-height:1.5;\">无法读完</span><span></span><span style=\"line-height:1.5;\">部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span style=\"line-height:1.5;\">&nbsp;</span><span style=\"line-height:1.5;\">放在</span><span></span><span style=\"line-height:1.5;\">之前。</span> 
</p>
<p>
	<span><span style=\"line-height:1.5;\">注意的是</span><span style=\"line-height:1.5;\">unicode</span><span style=\"line-height:1.5;\">一个中文字符占</span><span style=\"line-height:1.5;\">2</span><span style=\"line-height:1.5;\">个字节，而</span><span style=\"line-height:1.5;\">UTF-8</span><span style=\"line-height:1.5;\">一个中&nbsp;文字符占</span><span style=\"line-height:1.5;\">3</span><span style=\"line-height:1.5;\">个字节）。从</span><span style=\"line-height:1.5;\">unicode</span><span style=\"line-height:1.5;\">到</span><span style=\"line-height:1.5;\">uft-8</span><span style=\"line-height:1.5;\">并不是直接的对应，而是要过一些算法和规则来转换。</span><span></span><br />
</span>
</p>
<p>
	<span></span> 
</p>
<p>
	<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />
</p>
<p>
	1.&nbsp;ASCII<span>码&nbsp;</span><br />
我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（<span>bit</span><span>）有</span><span>0</span><span>和</span><span>1</span><span>两种状态，因此八个二进制位就可以组合出</span><span>256</span><span>种状态，这被称为一个字节（</span><span>byte</span><span>）。也就是说，一个字节一共可以用来表示</span><span>256</span><span>种不同的状态，每一个状态对应一个符号，就是</span><span>256</span><span>个符号，从</span><span>0000000</span><span>到</span><span>11111111</span><span>。&nbsp;</span><br />
上个世纪<span>60</span><span>年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为</span><span>ASCII</span><span>码，一直沿用至今。&nbsp;</span><br />
ASCII<span>码一共规定了</span><span>128</span><span>个字符的编码，比如空格</span><span>“SPACE”</span><span>是</span><span>32</span><span>（二进制</span><span>00100000</span><span>），大写的字母</span><span>A</span><span>是</span><span>65</span><span>（二进制</span><span>01000001</span><span>）。这</span><span>128</span><span>个符号（包括</span><span>32</span><span>个不能打印出来的控制符号），只占用了一个字节的后面</span><span>7</span><span>位，最前面的</span><span>1</span><span>位统一规定为</span><span>0</span><span>。&nbsp;</span><br />
2<span>、非</span><span>ASCII</span><span>编码</span><br />
英语用<span>128</span><span>个符号编码就够了，但是用来表示其他语言，</span><span>128</span><span>个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用</span><span>ASCII</span><span>码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的</span><span>é</span><span>的编码为</span><span>130</span><span>（二进制</span><span>10000010</span><span>）。这样一来，这些欧洲国家使用的编码体系，可以表示最多</span><span>256</span><span>个符号。</span><br />
至于亚洲国家的文字，使用的符号就更多了，汉字就多达<span>10</span><span>万左右。一个字节只能表示</span><span>256</span><span>种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是</span><span>GB2312</span><span>，使用两个字节表示一个汉字，所以理论上最多可以表示</span><span>256x256=65536</span><span>个符号。&nbsp;这里只指出，虽然都是用多个字节表示一个符号，但是</span><span>GB</span><span>类的汉字编码与后文的</span><span>Unicode</span><span>和</span><span>UTF-8</span><span>是毫无关系的。&nbsp;</span><br />
3.Unicode&nbsp;<br />
正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。&nbsp;<br />
可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是<span>Unicode</span><span>，就像它的名字都表示的，这是一种所有符号的编码。&nbsp;</span><br />
Unicode<span>当然是一个很大的集合，现在的规模可以容纳</span><span>100</span><span>多万个符号。每个符号的编码都不一样，比如，</span><span>U+0639</span><span>表示阿拉伯字母</span><span>Ain</span><span>，</span><span>U+0041</span><span>表示英语的大写字母</span><span>A</span><span>，</span><span>U+4E25</span><span>表示汉字</span><span>“</span><span>严</span><span>”</span><span>。具体的符号对应表，可以查询</span><a href=\"http://link.zhihu.com/?target=http%3A/unicode.org\">http://unicode.org</a>，或者专门的汉字对应表。&nbsp;<br />
4.&nbsp;Unicode<span>的问题&nbsp;</span><br />
需要注意的是，<span>Unicode</span><span>只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。&nbsp;</span><br />
比如，汉字<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是十六进制数</span><span>4E25</span><span>，转换成二进制数足足有</span><span>15</span><span>位（</span><span>100111000100101</span><span>），也就是说这个符号的表示至少需要</span><span>2</span><span>个字节。表示其他更大的符号，可能需要</span><span>3</span><span>个字节或者</span><span>4</span><span>个字节，甚至更多。&nbsp;</span><br />
这里就有两个严重的问题，第一个问题是，如何才能区别<span>unicode</span><span>和</span><span>ascii</span><span>？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果</span><span>unicode</span><span>统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是</span><span>0</span><span>，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。&nbsp;</span><br />
它们造成的结果是：<span>1</span><span>）出现了</span><span>unicode</span><span>的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示</span><span>unicode</span><span>。</span><span>2</span><span>）</span><span>unicode</span><span>在很长一段时间内无法推广，直到互联网的出现。&nbsp;</span><br />
5.UTF-8&nbsp;<br />
互联网的普及，强烈要求出现一种统一的编码方式。<span>UTF-8</span><span>就是在互联网上使用最广的一种</span><span>unicode</span><span>的实现方式。其他实现方式还包括</span><span>UTF-16</span><span>和</span><span>UTF-32</span><span>，不过在互联网上基本不用。重复一遍，这里的关系是，</span><span>UTF-8</span><span>是</span><span>Unicode</span><span>的实现方式之一。&nbsp;</span><br />
UTF-8<span>最大的一个特点，就是它是一种变长的编码方式。它可以使用</span><span>1~4</span><span>个字节表示一个符号，根据不同的符号而变化字节长度。&nbsp;</span><br />
UTF-8<span>的编码规则很简单，只有二条：&nbsp;</span><br />
1<span>）对于单字节的符号，字节的第一位设为</span><span>0</span><span>，后面</span><span>7</span><span>位为这个符号的</span><span>unicode</span><span>码。因此对于英语字母，</span><span>UTF-8</span><span>编码和</span><span>ASCII</span><span>码是相同的。&nbsp;</span><br />
2<span>）对于</span><span>n</span><span>字节的符号（</span><span>n&gt;1</span><span>），第一个字节的前</span><span>n</span><span>位都设为</span><span>1</span><span>，第</span><span>n+1</span><span>位设为</span><span>0</span><span>，后面字节的前两位一律设为</span><span>10</span><span>。剩下的没有提及的二进制位，全部为这个符号的</span><span>unicode</span><span>码。&nbsp;</span><br />
下表总结了编码规则，字母<span>x</span><span>表示可用编码的位。&nbsp;</span><br />
Unicode<span>符号范围&nbsp;</span><span>|&nbsp;UTF-8</span><span>编码方式&nbsp;</span><br />
(<span>十六进制</span><span>)&nbsp;|&nbsp;</span><span>（二进制）&nbsp;</span><br />
--------------------+---------------------------------------------&nbsp;<br />
0000&nbsp;0000-0000&nbsp;007F&nbsp;|&nbsp;0xxxxxxx&nbsp;<br />
0000&nbsp;0080-0000&nbsp;07FF&nbsp;|&nbsp;110xxxxx&nbsp;10xxxxxx&nbsp;<br />
0000&nbsp;0800-0000&nbsp;FFFF&nbsp;|&nbsp;1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
0001&nbsp;0000-0010&nbsp;FFFF&nbsp;|&nbsp;11110xxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;10xxxxxx&nbsp;<br />
下面以汉字<span>“</span><span>严</span><span>”</span><span>为例，演示如何实现</span><span>UTF-8</span><span>编码。&nbsp;</span><br />
已知<span>“</span><span>严</span><span>”</span><span>的</span><span>unicode</span><span>是</span><span>4E25</span><span>（</span><span>100111000100101</span><span>），根据上表，可以发现</span><span>4E25</span><span>处在第三行的范围内（</span><span>0000&nbsp;0800-0000&nbsp;FFFF</span><span>），因此</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码需要三个字节，即格式是</span><span>“1110xxxx&nbsp;10xxxxxx&nbsp;10xxxxxx”</span><span>。然后，从</span><span>“</span><span>严</span><span>”</span><span>的最后一个二进制位开始，依次从后向前填入格式中的</span><span>x</span><span>，多出的位补</span><span>0</span><span>。这样就得到了，</span><span>“</span><span>严</span><span>”</span><span>的</span><span>UTF-8</span><span>编码是</span><span>“11100100&nbsp;10111000&nbsp;10100101”</span><span>，转换成十六进制就是</span><span>E4B8A5</span><span>。&nbsp;</span><br />
6.&nbsp;Unicode<span>与</span><span>UTF-8</span><span>之间的转换&nbsp;</span><br />
通过上一节的例子，可以看到<span>“</span><span>严</span><span>”</span><span>的</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，</span><span>UTF-8</span><span>编码是</span><span>E4B8A5</span><span>，两者是不一样的。它们之间的转换可以通过程序实现。&nbsp;</span><br />
在<span>Windows</span><span>平台下，有一个最简单的转化方法，就是使用内置的记事本小程序</span><span>Notepad.exe</span><span>。打开文件后，点击</span><span>“</span><span>文件</span><span>”</span><span>菜单中的</span><span>“</span><span>另存为</span><span>”</span><span>命令，会跳出一个对话框，在最底部有一个</span><span>“</span><span>编码</span><span>”</span><span>的下拉条。&nbsp;</span><br />
里面有四个选项：<span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>是默认的编码方式。对于英文文件是</span><span>ASCII</span><span>编码，对于简体中文文件是</span><span>GB2312</span><span>编码（只针对</span><span>Windows</span><span>简体中文版，如果是繁体中文版会采用</span><span>Big5</span><span>码）。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>编码指的是</span><span>UCS-2</span><span>编码方式，即直接用两个字节存入字符的</span><span>Unicode</span><span>码。这个选项用的</span><span>little&nbsp;endian</span><span>格式。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>编码与上一个选项相对应。我在下一节会解释</span><span>little&nbsp;endian</span><span>和</span><span>big&nbsp;endian</span><span>的涵义。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>编码，也就是上一节谈到的编码方法。&nbsp;</span><br />
选择完<span>”</span><span>编码方式</span><span>“</span><span>后，点击</span><span>”</span><span>保存</span><span>“</span><span>按钮，文件的编码方式就立刻转换好了。&nbsp;</span><br />
7.&nbsp;Little&nbsp;endian<span>和</span><span>Big&nbsp;endian&nbsp;</span><br />
上一节已经提到，<span>Unicode</span><span>码可以采用</span><span>UCS-2</span><span>格式直接存储。以汉字</span><span>”</span><span>严</span><span>“</span><span>为例，</span><span>Unicode</span><span>码是</span><span>4E25</span><span>，需要用两个字节存储，一个字节是</span><span>4E</span><span>，另一个字节是</span><span>25</span><span>。存储的时候，</span><span>4E</span><span>在前，</span><span>25</span><span>在后，就是</span><span>Big&nbsp;endian</span><span>方式；</span><span>25</span><span>在前，</span><span>4E</span><span>在后，就是</span><span>Little&nbsp;endian</span><span>方式。&nbsp;</span><br />
这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头<span>(Big-Endian)</span><span>敲开还是从小头</span><span>(Little-Endian)</span><span>敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。&nbsp;</span><br />
因此，第一个字节在前，就是<span>”</span><span>大头方式</span><span>“</span><span>（</span><span>Big&nbsp;endian</span><span>），第二个字节在前就是</span><span>”</span><span>小头方式</span><span>“</span><span>（</span><span>Little&nbsp;endian</span><span>）。&nbsp;</span><br />
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？&nbsp;<br />
Unicode<span>规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做</span><span>”</span><span>零宽度非换行空格</span><span>“</span><span>（</span><span>ZERO&nbsp;WIDTH&nbsp;NO-BREAK&nbsp;SPACE</span><span>），用</span><span>FEFF</span><span>表示。这正好是两个字节，而且</span><span>FF</span><span>比</span><span>FE</span><span>大</span><span>1</span><span>。&nbsp;</span><br />
如果一个文本文件的头两个字节是<span>FE&nbsp;FF</span><span>，就表示该文件采用大头方式；如果头两个字节是</span><span>FF&nbsp;FE</span><span>，就表示该文件采用小头方式。&nbsp;</span><br />
8.&nbsp;<span>实例&nbsp;</span><br />
下面，举一个实例。&nbsp;<br />
打开<span>”</span><span>记事本</span><span>“</span><span>程序</span><span>Notepad.exe</span><span>，新建一个文本文件，内容就是一个</span><span>”</span><span>严</span><span>“</span><span>字，依次采用</span><span>ANSI</span><span>，</span><span>Unicode</span><span>，</span><span>Unicode&nbsp;big&nbsp;endian&nbsp;</span><span>和&nbsp;</span><span>UTF-8</span><span>编码方式保存。&nbsp;</span><br />
然后，用文本编辑软件<span>UltraEdit</span><span>中的</span><span>”</span><span>十六进制功能</span><span>“</span><span>，观察该文件的内部编码方式。&nbsp;</span><br />
1<span>）</span><span>ANSI</span><span>：文件的编码就是两个字节</span><span>“D1&nbsp;CF”</span><span>，这正是</span><span>“</span><span>严</span><span>”</span><span>的</span><span>GB2312</span><span>编码，这也暗示</span><span>GB2312</span><span>是采用大头方式存储的。&nbsp;</span><br />
2<span>）</span><span>Unicode</span><span>：编码是四个字节</span><span>“FF&nbsp;FE&nbsp;25&nbsp;4E”</span><span>，其中</span><span>“FF&nbsp;FE”</span><span>表明是小头方式存储，真正的编码是</span><span>4E25</span><span>。&nbsp;</span><br />
3<span>）</span><span>Unicode&nbsp;big&nbsp;endian</span><span>：编码是四个字节</span><span>“FE&nbsp;FF&nbsp;4E&nbsp;25”</span><span>，其中</span><span>“FE&nbsp;FF”</span><span>表明是大头方式存储。&nbsp;</span><br />
4<span>）</span><span>UTF-8</span><span>：编码是六个字节</span><span>“EF&nbsp;BB&nbsp;BF&nbsp;E4&nbsp;B8&nbsp;A5”</span><span>，前三个字节</span><span>“EF&nbsp;BB&nbsp;BF”</span><span>表示这是</span><span>UTF-8</span><span>编码，后三个</span><span>“E4B8A5”</span><span>就是</span><span>“</span><span>严</span><span>”</span><span>的具体编码，它的存储顺序与编码顺序是一致的。</span> 
</p>' WHERE `id` = 14 [ RunTime:0.0495s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000067s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000162s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008600s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008686s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000673s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000747s ]

[ 2016-06-05T17:48:48+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000059s ]
INFO: [ app_init ] --END-- [ RunTime:0.000870s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001134s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001294s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000067s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007841s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007943s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000596s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000656s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000963s ]
INFO: [ app_end ] --END-- [ RunTime:0.001062s ]

[ 2016-06-05T17:49:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000804s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000925s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000996s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\">
	<p>
		什么是<span>Unicode</span><span>。</span><span>Unicode</span><span>的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span>Unicode</span><span>，那么，就能处理这些字符集。一般</span><span>Unicode</span><span>有两个字节。现在的</span><span>windows</span><span>操作系统都是支持</span><span>Unicode</span><span>的。&nbsp;</span><br />
什么是<span>UTF8</span><span>呢？</span><span>UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
是<span>Unicode</span><span>传送格式。即把</span><span>Unicode</span><span>文件转换成</span><span>BYTE</span><span>的传送流。</span><span>UTF8</span><span>是一种</span><span>Unicode</span><span>编码，即它的编码的字符集和</span><span>Unicode</span><span>是一致的。但编码的方式不一样。对于英文字符来讲，</span><span>UTF8</span><span>的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示</span>。
	</p>
	<p>
		网页编码英文译为<span>web&nbsp;page&nbsp;encoding</span><span>，是在网页中指定其特定的字符编码格式的库。</span>&nbsp;<br />
GBK<span>是国家标准</span><span>GB2312</span><span>基础上扩容后兼容</span><span>GB2312</span><span>的标准。</span><span>GBK</span><span>的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span>1</span><span>。</span><span>GBK</span><span>包含全部中文字符，是国家编码，通用性比</span><span>UTF8</span><span>差，不过</span><span>UTF8</span><span>占用的数据库比</span><span>GBK</span><span>大。</span>&nbsp;<br />
UTF-8<span>：</span><span>Unicode&nbsp;TransformationFormat-8bit</span><span>，允许含</span><span>BOM</span><span>，但通常不含</span><span>BOM</span><span>。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span>8</span><span>位（即一个字节），中文使用</span><span>24</span><span>为（三个字节）来编码。</span><span>UTF-8</span><span>包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span>UTF-8</span><span>编码的文字可以在各国支持</span><span>UTF8</span><span>字符集的浏览器上显示。如果是</span><span>UTF8</span><span>编码，则在外国人的英文</span><span>IE</span><span>上也能显示中文，他们无需下载</span><span>IE</span><span>的中文语言支持包。</span>&nbsp;<br />
UTF-8<span>版本虽然具有良好的国际兼容性，但中文需要比</span><span>GBK/BIG5</span><span>版本多占用</span><span>50%</span><span>的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span>GBK</span><span>编码节省数据库空间。对于英文较多的网站，适宜用</span><span>UTF-8</span><span>节省数据库空间。</span>&nbsp;<br />
GBK<span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>如何转换？</span><span>GBK</span><span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>之间都必须通过</span><span>Unicode</span><span>编码才能相互转换：</span><span>GBK</span><span>、</span><span>GB2312——Unicode——UTF8</span><span>；</span><span>UTF8——Unicode——GBK</span><span>、</span><span>GB2312</span><span>。使用</span><span>Windows</span><span>记事本的</span><span>“</span><span>另存为</span><span>”</span><span>，可以在</span><span>GBK</span><span>、</span><span>Unicode</span><span>、</span><span>Unicode&nbsp;big&nbsp;endian</span><span>和</span><span>UTF-8</span><span>这几种编码方式间相互转换。</span>&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：<span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=gb2312\"&gt;</span><span>，指示此网页的字符集编码是</span><span>GB2312</span><span>。（或者</span><span>UTF-8</span><span>）</span>&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些<span>FTP</span><span>软件直接在线修改文件，比如</span><span>CuteFTP</span><span>，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span>window</span><span>的记事本打开，用</span><span>“</span><span>另存为</span><span>”</span><span>保存为对应的编码即可解决问题。</span>&nbsp;<br />
在<span>windows</span><span>操作系统上使用</span><span>IE</span><span>作为浏览器时，常常会发生这样的问题：在浏览使用</span><span>UTF-8</span><span>编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=UTF-8\"&nbsp;/&gt;</span><span>，由此造成某些含有中文</span><span>UTF-8</span><span>编码的页面产生空白输出。如果使用的是</span><span>Firefox</span><span>、</span><span>Sarafi</span><span>的浏览器这不会造成这个问题。这是由于</span><span>IE</span><span>解析网页编码时以</span><span>HTML</span><span>内的标签优先，而后才是</span><span>HTTP&nbsp;header</span><span>内的讯息，而</span><span>mozilla</span><span>系列的浏览器则刚刚相反。</span>&nbsp;<br />
由于<span>UTF-8</span><span>为</span><span>3</span><span>个字节表示一个汉子，而普通的</span><span>GB2312</span><span>或</span><span>BIG5</span><span>是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span>&lt;title&gt;&lt;/title&gt;</span><span>的内容时，如果在</span><span>&lt;/title&gt;</span><span>前有奇数个全角字符，</span><span>IE</span><span>把</span><span>UTF-8</span><span>当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span>&lt;/title&gt;</span><span>的</span><span>&lt;</span><span>结合成一个乱码字，导致</span><span>IE</span><span>无法读完</span><span>&lt;title&gt;</span><span>部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span>&lt;meta&nbsp;http-equiv=\"Content-Type\"&nbsp;content=\"text/html;&nbsp;charset=UTF-8\"&nbsp;/&gt;&nbsp;</span><span>放在</span><span>&lt;title&gt;&lt;/title&gt;</span><span>之前。</span>
	</p>
	<p>
		<span style=\"color:#E53333;\">注意的是</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">一个中文字符占</span><span style=\"color:#E53333;\">2</span><span style=\"color:#E53333;\">个字节，而</span><span style=\"color:#E53333;\">UTF-8</span><span style=\"color:#E53333;\">一个中&nbsp;文字符占</span><span style=\"color:#E53333;\">3</span><span style=\"color:#E53333;\">个字节）。从</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">到</span><span style=\"color:#E53333;\">uft-8</span><span style=\"color:#E53333;\">并不是直接的对应，而是要过一些算法和规则来转换。</span>
	</p>
</span>
</p>
<p>
	<span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span><span></span><br />
</span> 
</p>
<p>
	<span></span> 
</p>
<p>
	<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />
</p>' WHERE `id` = 14 [ RunTime:0.0472s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000274s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017022s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017247s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001131s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001262s ]

[ 2016-06-05T17:49:57+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000766s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000945s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001014s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007432s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007548s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000575s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000635s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000930s ]
INFO: [ app_end ] --END-- [ RunTime:0.001141s ]

[ 2016-06-05T17:50:12+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000493s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000696s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000928s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span>
</p>
<p>
	什么是<span>Unicode</span><span>。</span><span>Unicode</span><span>的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span>Unicode</span><span>，那么，就能处理这些字符集。一般</span><span>Unicode</span><span>有两个字节。现在的</span><span>windows</span><span>操作系统都是支持</span><span>Unicode</span><span>的。&nbsp;</span><br />
什么是<span>UTF8</span><span>呢？</span><span>UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
是<span>Unicode</span><span>传送格式。即把</span><span>Unicode</span><span>文件转换成</span><span>BYTE</span><span>的传送流。</span><span>UTF8</span><span>是一种</span><span>Unicode</span><span>编码，即它的编码的字符集和</span><span>Unicode</span><span>是一致的。但编码的方式不一样。对于英文字符来讲，</span><span>UTF8</span><span>的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示</span>。
</p>
<p>
	网页编码英文译为<span>web&nbsp;page&nbsp;encoding</span><span>，是在网页中指定其特定的字符编码格式的库。</span>&nbsp;<br />
GBK<span>是国家标准</span><span>GB2312</span><span>基础上扩容后兼容</span><span>GB2312</span><span>的标准。</span><span>GBK</span><span>的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span>1</span><span>。</span><span>GBK</span><span>包含全部中文字符，是国家编码，通用性比</span><span>UTF8</span><span>差，不过</span><span>UTF8</span><span>占用的数据库比</span><span>GBK</span><span>大。</span>&nbsp;<br />
UTF-8<span>：</span><span>Unicode&nbsp;TransformationFormat-8bit</span><span>，允许含</span><span>BOM</span><span>，但通常不含</span><span>BOM</span><span>。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span>8</span><span>位（即一个字节），中文使用</span><span>24</span><span>为（三个字节）来编码。</span><span>UTF-8</span><span>包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span>UTF-8</span><span>编码的文字可以在各国支持</span><span>UTF8</span><span>字符集的浏览器上显示。如果是</span><span>UTF8</span><span>编码，则在外国人的英文</span><span>IE</span><span>上也能显示中文，他们无需下载</span><span>IE</span><span>的中文语言支持包。</span>&nbsp;<br />
UTF-8<span>版本虽然具有良好的国际兼容性，但中文需要比</span><span>GBK/BIG5</span><span>版本多占用</span><span>50%</span><span>的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span>GBK</span><span>编码节省数据库空间。对于英文较多的网站，适宜用</span><span>UTF-8</span><span>节省数据库空间。</span>&nbsp;<br />
GBK<span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>如何转换？</span><span>GBK</span><span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>之间都必须通过</span><span>Unicode</span><span>编码才能相互转换：</span><span>GBK</span><span>、</span><span>GB2312——Unicode——UTF8</span><span>；</span><span>UTF8——Unicode——GBK</span><span>、</span><span>GB2312</span><span>。使用</span><span>Windows</span><span>记事本的</span><span>“</span><span>另存为</span><span>”</span><span>，可以在</span><span>GBK</span><span>、</span><span>Unicode</span><span>、</span><span>Unicode&nbsp;big&nbsp;endian</span><span>和</span><span>UTF-8</span><span>这几种编码方式间相互转换。</span>&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：<span></span><span>，指示此网页的字符集编码是</span><span>GB2312</span><span>。（或者</span><span>UTF-8</span><span>）</span>&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些<span>FTP</span><span>软件直接在线修改文件，比如</span><span>CuteFTP</span><span>，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span>window</span><span>的记事本打开，用</span><span>“</span><span>另存为</span><span>”</span><span>保存为对应的编码即可解决问题。</span>&nbsp;<br />
在<span>windows</span><span>操作系统上使用</span><span>IE</span><span>作为浏览器时，常常会发生这样的问题：在浏览使用</span><span>UTF-8</span><span>编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span></span><span>，由此造成某些含有中文</span><span>UTF-8</span><span>编码的页面产生空白输出。如果使用的是</span><span>Firefox</span><span>、</span><span>Sarafi</span><span>的浏览器这不会造成这个问题。这是由于</span><span>IE</span><span>解析网页编码时以</span><span>HTML</span><span>内的标签优先，而后才是</span><span>HTTP&nbsp;header</span><span>内的讯息，而</span><span>mozilla</span><span>系列的浏览器则刚刚相反。</span>&nbsp;<br />
由于<span>UTF-8</span><span>为</span><span>3</span><span>个字节表示一个汉子，而普通的</span><span>GB2312</span><span>或</span><span>BIG5</span><span>是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span></span><span>的内容时，如果在</span><span></span><span>前有奇数个全角字符，</span><span>IE</span><span>把</span><span>UTF-8</span><span>当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span></span><span>的</span><span>&lt;</span><span>结合成一个乱码字，导致</span><span>IE</span><span>无法读完</span><span></span><span>部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span>&nbsp;</span><span>放在</span><span></span><span>之前。</span> 
</p>
<p>
	<span style=\"color:#E53333;\">注意的是</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">一个中文字符占</span><span style=\"color:#E53333;\">2</span><span style=\"color:#E53333;\">个字节，而</span><span style=\"color:#E53333;\">UTF-8</span><span style=\"color:#E53333;\">一个中&nbsp;文字符占</span><span style=\"color:#E53333;\">3</span><span style=\"color:#E53333;\">个字节）。从</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">到</span><span style=\"color:#E53333;\">uft-8</span><span style=\"color:#E53333;\">并不是直接的对应，而是要过一些算法和规则来转换。</span>
</p>
<p>
	<br />
</p>
<p>
	<span></span> 
</p>
<p>
	<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" /> 
</p>' WHERE `id` = 14 [ RunTime:0.1750s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000097s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000236s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015503s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015692s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001117s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001251s ]

[ 2016-06-05T17:50:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000494s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000685s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000755s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007344s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007417s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000584s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000647s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001052s ]
INFO: [ app_end ] --END-- [ RunTime:0.001159s ]

[ 2016-06-05T17:52:41+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000646s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000862s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000928s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000161s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008489s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008569s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000655s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000749s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.001106s ]

[ 2016-06-05T17:53:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000664s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000910s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000978s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0048s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span> 
</p>
<p>
	什么是<span>Unicode</span><span>。</span><span>Unicode</span><span>的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持</span><span>Unicode</span><span>，那么，就能处理这些字符集。一般</span><span>Unicode</span><span>有两个字节。现在的</span><span>windows</span><span>操作系统都是支持</span><span>Unicode</span><span>的。&nbsp;</span><br />
什么是<span>UTF8</span><span>呢？</span><span>UTF8&nbsp;==&nbsp;Unicode&nbsp;Transformation&nbsp;Format&nbsp;--&nbsp;8&nbsp;bit&nbsp;</span><br />
是<span>Unicode</span><span>传送格式。即把</span><span>Unicode</span><span>文件转换成</span><span>BYTE</span><span>的传送流。</span><span>UTF8</span><span>是一种</span><span>Unicode</span><span>编码，即它的编码的字符集和</span><span>Unicode</span><span>是一致的。但编码的方式不一样。对于英文字符来讲，</span><span>UTF8</span><span>的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示</span>。
</p>
<p>
	网页编码英文译为<span>web&nbsp;page&nbsp;encoding</span><span>，是在网页中指定其特定的字符编码格式的库。</span>&nbsp;<br />
GBK<span>是国家标准</span><span>GB2312</span><span>基础上扩容后兼容</span><span>GB2312</span><span>的标准。</span><span>GBK</span><span>的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成</span><span>1</span><span>。</span><span>GBK</span><span>包含全部中文字符，是国家编码，通用性比</span><span>UTF8</span><span>差，不过</span><span>UTF8</span><span>占用的数据库比</span><span>GBK</span><span>大。</span>&nbsp;<br />
UTF-8<span>：</span><span>Unicode&nbsp;TransformationFormat-8bit</span><span>，允许含</span><span>BOM</span><span>，但通常不含</span><span>BOM</span><span>。是用以解决国际上字符的一种多字节编码，它对英文使用</span><span>8</span><span>位（即一个字节），中文使用</span><span>24</span><span>为（三个字节）来编码。</span><span>UTF-8</span><span>包含全世界所有国家需要用到的字符，是国际编码，通用性强。</span><span>UTF-8</span><span>编码的文字可以在各国支持</span><span>UTF8</span><span>字符集的浏览器上显示。如果是</span><span>UTF8</span><span>编码，则在外国人的英文</span><span>IE</span><span>上也能显示中文，他们无需下载</span><span>IE</span><span>的中文语言支持包。</span>&nbsp;<br />
UTF-8<span>版本虽然具有良好的国际兼容性，但中文需要比</span><span>GBK/BIG5</span><span>版本多占用</span><span>50%</span><span>的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用</span><span>GBK</span><span>编码节省数据库空间。对于英文较多的网站，适宜用</span><span>UTF-8</span><span>节省数据库空间。</span>&nbsp;<br />
GBK<span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>如何转换？</span><span>GBK</span><span>、</span><span>GB2312</span><span>等与</span><span>UTF8</span><span>之间都必须通过</span><span>Unicode</span><span>编码才能相互转换：</span><span>GBK</span><span>、</span><span>GB2312——Unicode——UTF8</span><span>；</span><span>UTF8——Unicode——GBK</span><span>、</span><span>GB2312</span><span>。使用</span><span>Windows</span><span>记事本的</span><span>“</span><span>另存为</span><span>”</span><span>，可以在</span><span>GBK</span><span>、</span><span>Unicode</span><span>、</span><span>Unicode&nbsp;big&nbsp;endian</span><span>和</span><span>UTF-8</span><span>这几种编码方式间相互转换。</span>&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：<span></span><span>，指示此网页的字符集编码是</span><span>GB2312</span><span>。（或者</span><span>UTF-8</span><span>）</span>&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些<span>FTP</span><span>软件直接在线修改文件，比如</span><span>CuteFTP</span><span>，由于软件编码配置错误而导致转换错了编码。这时候使用</span><span>window</span><span>的记事本打开，用</span><span>“</span><span>另存为</span><span>”</span><span>保存为对应的编码即可解决问题。</span>&nbsp;<br />
在<span>windows</span><span>操作系统上使用</span><span>IE</span><span>作为浏览器时，常常会发生这样的问题：在浏览使用</span><span>UTF-8</span><span>编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：</span><span></span><span>，由此造成某些含有中文</span><span>UTF-8</span><span>编码的页面产生空白输出。如果使用的是</span><span>Firefox</span><span>、</span><span>Sarafi</span><span>的浏览器这不会造成这个问题。这是由于</span><span>IE</span><span>解析网页编码时以</span><span>HTML</span><span>内的标签优先，而后才是</span><span>HTTP&nbsp;header</span><span>内的讯息，而</span><span>mozilla</span><span>系列的浏览器则刚刚相反。</span>&nbsp;<br />
由于<span>UTF-8</span><span>为</span><span>3</span><span>个字节表示一个汉子，而普通的</span><span>GB2312</span><span>或</span><span>BIG5</span><span>是两个。页面输出时，由于上述原因，使浏览器解析、输出</span><span></span><span>的内容时，如果在</span><span></span><span>前有奇数个全角字符，</span><span>IE</span><span>把</span><span>UTF-8</span><span>当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和</span><span></span><span>的</span><span>&lt;</span><span>结合成一个乱码字，导致</span><span>IE</span><span>无法读完</span><span></span><span>部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把</span><span>&nbsp;</span><span>放在</span><span></span><span>之前。</span> 
</p>
<p>
<span style=\"color:#E53333;\">注意的是</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">一个中文字符占</span><span style=\"color:#E53333;\">2</span><span style=\"color:#E53333;\">个字节，而</span><span style=\"color:#E53333;\">UTF-8</span><span style=\"color:#E53333;\">一个中&nbsp;文字符占</span><span style=\"color:#E53333;\">3</span><span style=\"color:#E53333;\">个字节）。从</span><span style=\"color:#E53333;\">unicode</span><span style=\"color:#E53333;\">到</span><span style=\"color:#E53333;\">uft-8</span><span style=\"color:#E53333;\">并不是直接的对应，而是要过一些算法和规则来转换。</span> 
</p>
<br />
<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" /> ' WHERE `id` = 14 [ RunTime:0.0542s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000101s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000251s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017280s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017419s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001021s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001146s ]

[ 2016-06-05T17:54:12+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000727s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000876s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000942s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000155s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008600s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008703s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000579s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000638s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000969s ]
INFO: [ app_end ] --END-- [ RunTime:0.001085s ]

[ 2016-06-05T17:56:31+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000514s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000907s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000975s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000145s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007740s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007815s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000664s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000771s ]
INFO: [ app_end ] --END-- [ RunTime:0.000843s ]

[ 2016-06-05T17:57:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000583s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000821s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000895s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0046s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span> 
</p>
<p>
	什么是Unicode。Unicode的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持Unicode，那么，就能处理这些字符集。一般Unicode有两个字节。现在的windows操作系统都是支持Unicode的。&nbsp;<br />
什么是UTF8呢？UTF8 == Unicode Transformation Format -- 8 bit&nbsp;<br />
是Unicode传送格式。即把Unicode文件转换成BYTE的传送流。UTF8是一种Unicode编码，即它的编码的字符集和Unicode是一致的。但编码的方式不一样。对于英文字符来讲，UTF8的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。<br />
网页编码英文译为web page encoding，是在网页中指定其特定的字符编码格式的库。&nbsp;<br />
GBK是国家标准GB2312基础上扩容后兼容GB2312的标准。GBK的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成1。GBK包含全部中文字符，是国家编码，通用性比UTF8差，不过UTF8占用的数据库比GBK大。&nbsp;<br />
UTF-8：Unicode TransformationFormat-8bit，允许含BOM，但通常不含BOM。是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24为（三个字节）来编码。UTF-8包含全世界所有国家需要用到的字符，是国际编码，通用性强。UTF-8编码的文字可以在各国支持UTF8字符集的浏览器上显示。如果是UTF8编码，则在外国人的英文IE上也能显示中文，他们无需下载IE的中文语言支持包。&nbsp;<br />
UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。&nbsp;<br />
GBK、GB2312等与UTF8如何转换？GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：GBK、GB2312——Unicode——UTF8；UTF8——Unicode——GBK、GB2312。使用Windows记事本的“另存为”，可以在GBK、Unicode、Unicode big endian和UTF-8这几种编码方式间相互转换。&nbsp;<br />
如何让浏览器正确识别网页编码？一般在网页中都要有如下一句：&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"&gt;，指示此网页的字符集编码是GB2312。（或者UTF-8）&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些FTP软件直接在线修改文件，比如CuteFTP，由于软件编码配置错误而导致转换错了编码。这时候使用window的记事本打开，用“另存为”保存为对应的编码即可解决问题。&nbsp;<br />
在windows操作系统上使用IE作为浏览器时，常常会发生这样的问题：在浏览使用UTF-8编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;，由此造成某些含有中文UTF-8编码的页面产生空白输出。如果使用的是Firefox、Sarafi的浏览器这不会造成这个问题。这是由于IE解析网页编码时以HTML内的标签优先，而后才是HTTP header内的讯息，而mozilla系列的浏览器则刚刚相反。&nbsp;<br />
由于UTF-8为3个字节表示一个汉子，而普通的GB2312或BIG5是两个。页面输出时，由于上述原因，使浏览器解析、输出&lt;title&gt;&lt;/title&gt;的内容时，如果在&lt;/title&gt;前有奇数个全角字符，IE把UTF-8当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和&lt;/title&gt;的&lt;结合成一个乱码字，导致IE无法读完&lt;title&gt;部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; 放在&lt;title&gt;&lt;/title&gt;之前。<br />
<span style=\"color:#E53333;\">注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。&nbsp;</span><span style=\"color:#E53333;\"></span>
</p>
<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />' WHERE `id` = 14 [ RunTime:0.1616s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000276s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016748s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016900s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001102s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001223s ]

[ 2016-06-05T17:57:52+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000715s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001108s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001214s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000105s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000182s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007617s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007694s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000675s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000734s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000897s ]
INFO: [ app_end ] --END-- [ RunTime:0.000959s ]

[ 2016-06-05T18:06:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000550s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000849s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000922s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span> 
</p>
<p>
	<span></span>什么是Unicode。<br />
Unicode的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持Unicode，那么，就能处理这些字符集。一般Unicode有两个字节。现在的windows操作系统都是支持Unicode的。&nbsp;<br />
什么是UTF8呢？<br />
UTF8 == Unicode Transformation Format -- 8 bit&nbsp;<br />
是Unicode传送格式。即把Unicode文件转换成BYTE的传送流。UTF8是一种Unicode编码，即它的编码的字符集和Unicode是一致的。但编码的方式不一样。对于英文字符来讲，UTF8的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。<br />
网页编码英文译为web page encoding，是在网页中指定其特定的字符编码格式的库。&nbsp;<br />
GBK：是国家标准GB2312基础上扩容后兼容GB2312的标准。GBK的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成1。GBK包含全部中文字符，是国家编码，通用性比UTF8差，不过UTF8占用的数据库比GBK大。&nbsp;<br />
UTF-8：Unicode TransformationFormat-8bit，允许含BOM，但通常不含BOM。是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24为（三个字节）来编码。UTF-8包含全世界所有国家需要用到的字符，是国际编码，通用性强。UTF-8编码的文字可以在各国支持UTF8字符集的浏览器上显示。如果是UTF8编码，则在外国人的英文IE上也能显示中文，他们无需下载IE的中文语言支持包。&nbsp;UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。&nbsp;<br />
GBK、GB2312等与UTF8如何转换？<br />
GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：GBK、GB2312——Unicode——UTF8；UTF8——Unicode——GBK、GB2312。使用Windows记事本的“另存为”，可以在GBK、Unicode、Unicode big endian和UTF-8这几种编码方式间相互转换。&nbsp;<br />
如何让浏览器正确识别网页编码？<br />
一般在网页中都要有如下一句：&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"&gt;，指示此网页的字符集编码是GB2312。（或者UTF-8）&nbsp;<br />
页面有时候指定了编码为什么有时会出现乱码？<br />
这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些FTP软件直接在线修改文件，由于软件编码配置错误而导致转换错了编码。这时候使用window的记事本打开，用“另存为”保存为对应的编码即可解决问题。&nbsp;<br />
在windows操作系统上使用IE作为浏览器时，常常会发生这样的问题：在浏览使用UTF-8编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：&lt;meta http-equiv=\"Content-Type\"&nbsp;content=\"text/html; charset=UTF-8\" /&gt;，由此造成某些含有中文UTF-8编码的页面产生空白输出。<br />
如果使用的是Firefox、Sarafi的浏览器这不会造成这个问题。这是由于IE解析网页编码时以HTML内的标签优先，而后才是HTTP header内的讯息，而mozilla系列的浏览器则刚刚相反。&nbsp;<br />
由于UTF-8为3个字节表示一个汉子，而普通的GB2312或BIG5是两个。页面输出时，由于上述原因，使浏览器解析、输出&lt;title&gt;&lt;/title&gt;的内容时，如果在&lt;/title&gt;前有奇数个全角字符，IE把UTF-8当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和&lt;/title&gt;的&lt;结合成一个乱码字，导致IE无法读完&lt;title&gt;部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; 放在&lt;title&gt;&lt;/title&gt;之前。<br />
<span style=\"color:#E53333;\">注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对</span><span style=\"color:#E53333;\">应，而是要过一些算法和规则来转换。</span>&nbsp;<span style=\"color:#E53333;\"></span><span style=\"color:#E53333;\"></span>
</p>
<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />' WHERE `id` = 14 [ RunTime:0.2749s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000110s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000284s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017463s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017620s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001281s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001414s ]

[ 2016-06-05T18:06:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000613s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000883s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000953s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000160s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008380s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008463s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000514s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000576s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000751s ]
INFO: [ app_end ] --END-- [ RunTime:0.000818s ]

[ 2016-06-05T18:07:59+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000645s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000810s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000876s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span> 
</p>
<p>
	<span></span><span style=\"color:#E53333;\"><strong>什么是Unicode。</strong></span><br />
Unicode的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持Unicode，那么，就能处理这些字符集。一般Unicode有两个字节。现在的windows操作系统都是支持Unicode的。&nbsp;<br />
<strong><span style=\"color:#E53333;\">什么是UTF8呢？</span></strong><br />
UTF8 == Unicode Transformation Format -- 8 bit&nbsp;<br />
是Unicode传送格式。即把Unicode文件转换成BYTE的传送流。UTF8是一种Unicode编码，即它的编码的字符集和Unicode是一致的。但编码的方式不一样。对于英文字符来讲，UTF8的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。<br />
网页编码英文译为web page encoding，是在网页中指定其特定的字符编码格式的库。&nbsp;<br />
GBK：是国家标准GB2312基础上扩容后兼容GB2312的标准。GBK的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成1。GBK包含全部中文字符，是国家编码，通用性比UTF8差，不过UTF8占用的数据库比GBK大。&nbsp;<br />
UTF-8：Unicode TransformationFormat-8bit，允许含BOM，但通常不含BOM。是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24为（三个字节）来编码。UTF-8包含全世界所有国家需要用到的字符，是国际编码，通用性强。UTF-8编码的文字可以在各国支持UTF8字符集的浏览器上显示。如果是UTF8编码，则在外国人的英文IE上也能显示中文，他们无需下载IE的中文语言支持包。&nbsp;UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。&nbsp;<br />
<span style=\"color:#E53333;\"><strong>GBK、GB2312等与UTF8如何转换？</strong></span><br />
GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：GBK、GB2312——Unicode——UTF8；UTF8——Unicode——GBK、GB2312。使用Windows记事本的“另存为”，可以在GBK、Unicode、Unicode big endian和UTF-8这几种编码方式间相互转换。&nbsp;<br />
<span style=\"color:#E53333;\"><strong>如何让浏览器正确识别网页编码？</strong></span><br />
一般在网页中都要有如下一句：，指示此网页的字符集编码是GB2312。（或者UTF-8）&nbsp;<br />
<span style=\"color:#E53333;\"><strong>页面有时候指定了编码为什么有时会出现乱码？</strong></span><br />
这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些FTP软件直接在线修改文件，由于软件编码配置错误而导致转换错了编码。这时候使用window的记事本打开，用“另存为”保存为对应的编码即可解决问题。&nbsp;<br />
在windows操作系统上使用IE作为浏览器时，常常会发生这样的问题：在浏览使用UTF-8编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：，由此造成某些含有中文UTF-8编码的页面产生空白输出。<br />
如果使用的是Firefox、Sarafi的浏览器这不会造成这个问题。这是由于IE解析网页编码时以HTML内的标签优先，而后才是HTTP header内的讯息，而mozilla系列的浏览器则刚刚相反。&nbsp;<br />
由于UTF-8为3个字节表示一个汉子，而普通的GB2312或BIG5是两个。页面输出时，由于上述原因，使浏览器解析、输出的内容时，如果在前有奇数个全角字符，IE把UTF-8当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和的&lt;结合成一个乱码字，导致IE无法读完部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把放在之前。<br />
<span style=\"color:#E53333;\">注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对</span><span style=\"color:#E53333;\">应，而是要过一些算法和规则来转换。</span>&nbsp;<span style=\"color:#E53333;\"></span><span style=\"color:#E53333;\"></span> 
</p>
<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />' WHERE `id` = 14 [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007478s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007553s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000575s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000633s ]

[ 2016-06-05T18:08:19+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000688s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000926s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000994s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008306s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008385s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000611s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000672s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000824s ]
INFO: [ app_end ] --END-- [ RunTime:0.000886s ]

[ 2016-06-05T18:09:14+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000727s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000944s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001014s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 14  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000158s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008042s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008184s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000533s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000612s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000981s ]
INFO: [ app_end ] --END-- [ RunTime:0.001058s ]

[ 2016-06-05T18:09:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/14
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000683s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000878s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000948s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='有关字符编码的问题',`content`='<p>
	<span style=\"line-height:1.5;\"> </span> 
</p>
<p>
	<span></span><span style=\"color:#E53333;line-height:1.5;\"><strong>什么是Unicode。</strong></span><br />
<span style=\"line-height:1.5;\"> Unicode的基本目标是统一所有的编码，即它包含所有的字符集。这样只要一个系统支持Unicode，那么，就能处理这些字符集。一般Unicode有两个字节。现在的windows操作系统都是支持Unicode的。&nbsp;</span><br />
<strong><span style=\"color:#E53333;line-height:1.5;\">什么是UTF8呢？</span></strong><br />
<span style=\"line-height:1.5;\"> UTF8 == Unicode Transformation Format -- 8 bit&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 是Unicode传送格式。即把Unicode文件转换成BYTE的传送流。UTF8是一种Unicode编码，即它的编码的字符集和Unicode是一致的。但编码的方式不一样。对于英文字符来讲，UTF8的编码和一般的一样，用到一个字节。但对于中文来讲，那么要用三个字节表示。</span><br />
<span style=\"line-height:1.5;\"> 网页编码英文译为web page encoding，是在网页中指定其特定的字符编码格式的库。&nbsp;</span><br />
<span style=\"line-height:1.5;\"> GBK：是国家标准GB2312基础上扩容后兼容GB2312的标准。GBK的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成1。GBK包含全部中文字符，是国家编码，通用性比UTF8差，不过UTF8占用的数据库比GBK大。&nbsp;</span><br />
<span style=\"line-height:1.5;\"> UTF-8：Unicode TransformationFormat-8bit，允许含BOM，但通常不含BOM。是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24为（三个字节）来编码。UTF-8包含全世界所有国家需要用到的字符，是国际编码，通用性强。UTF-8编码的文字可以在各国支持UTF8字符集的浏览器上显示。如果是UTF8编码，则在外国人的英文IE上也能显示中文，他们无需下载IE的中文语言支持包。&nbsp;UTF-8版本虽然具有良好的国际兼容性，但中文需要比GBK/BIG5版本多占用50%的数据库存储空间，因此并非推荐使用，仅供对国际兼容性有特殊要求的用户使用。简单地说：对于中文较多的网站，适宜用GBK编码节省数据库空间。对于英文较多的网站，适宜用UTF-8节省数据库空间。&nbsp;</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>GBK、GB2312等与UTF8如何转换？</strong></span><br />
<span style=\"line-height:1.5;\"> GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：GBK、GB2312——Unicode——UTF8；UTF8——Unicode——GBK、GB2312。使用Windows记事本的“另存为”，可以在GBK、Unicode、Unicode big endian和UTF-8这几种编码方式间相互转换。&nbsp;</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>如何让浏览器正确识别网页编码？</strong></span><br />
<span style=\"line-height:1.5;\"> 一般在网页中都要有如下一句：，指示此网页的字符集编码是GB2312。（或者UTF-8）&nbsp;</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>页面有时候指定了编码为什么有时会出现乱码？</strong></span><br />
<span style=\"line-height:1.5;\"> 这可能是页面申明编码与文件本身编码不一致，更多时候是以错误编码打开页面然后保存导致的，或者是用某些FTP软件直接在线修改文件，由于软件编码配置错误而导致转换错了编码。这时候使用window的记事本打开，用“另存为”保存为对应的编码即可解决问题。&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 在windows操作系统上使用IE作为浏览器时，常常会发生这样的问题：在浏览使用UTF-8编码的网页时，浏览器无法自动识别该页面所用的编码，即使网页已经声明过编码格式：，由此造成某些含有中文UTF-8编码的页面产生空白输出。</span><br />
<span style=\"line-height:1.5;\"> 如果使用的是Firefox、Sarafi的浏览器这不会造成这个问题。这是由于IE解析网页编码时以HTML内的标签优先，而后才是HTTP header内的讯息，而mozilla系列的浏览器则刚刚相反。&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 由于UTF-8为3个字节表示一个汉子，而普通的GB2312或BIG5是两个。页面输出时，由于上述原因，使浏览器解析、输出的内容时，如果在前有奇数个全角字符，IE把UTF-8当作两个字节解析时出现半个汉字的情况，这时该半个汉字会和的&lt;结合成一个乱码字，导致IE无法读完部分，使整个页面为空百输出，而这个时候如果察看源文件的话，会发现实际上整个页面全部已经输出了，但浏览器不显示内容。最简单的解决办法是把放在之前。</span><br />
<span style=\"color:#E53333;line-height:1.5;\">注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对</span><span style=\"color:#E53333;line-height:1.5;\">应，而是要过一些算法和规则来转换。</span><span style=\"line-height:1.5;\">&nbsp;</span><span style=\"color:#E53333;\"></span><span style=\"color:#E53333;\"></span> 
</p>
<img src=\"/Public/Admin/js/editor/attached/image/20160605/20160605174210_59573.png\" alt=\"\" />' WHERE `id` = 14 [ RunTime:0.0549s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000145s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000285s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014718s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014867s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000925s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001081s ]

[ 2016-06-05T18:14:12+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000508s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001023s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001120s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0044s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('Data truncated for column \'Prices\' at row 1怎么解决？','这句话的意思是第一行数据的Prices列的数据被截断，应该是你的数据长度过长，检查下你数据库表中Prices的数据类型和精度，如果第一行的数据超过了表中的设置，就会出现这种情况，比较好的办法是把表中Prices的数据长度改长点&nbsp;') [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007212s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007289s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000582s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000639s ]

[ 2016-06-05T18:14:13+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000717s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000806s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000873s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000133s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000256s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008896s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008977s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000616s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000676s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000826s ]
INFO: [ app_end ] --END-- [ RunTime:0.000922s ]

[ 2016-06-05T18:14:31+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/15
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000518s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000990s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001096s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 15  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007495s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007635s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000672s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000807s ]
INFO: [ app_end ] --END-- [ RunTime:0.000868s ]

[ 2016-06-05T18:14:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/15
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000630s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000968s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001090s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0227s ]
SQL: UPDATE `sc_message` SET `title`='Data truncated for column \'Prices\' at row 1怎么解决？',`content`='<p>
	这句话的意思是第一行数据的Prices列的数据被截断，
</p>
<p>
	应该是你的数据长度过长，检查下你数据库表中Prices的数据类型和精度，
</p>
<p>
	如果第一行的数据超过了表中的设置，就会出现这种情况，比较好的办法是把表中Prices的数据长度改长点&nbsp;
</p>' WHERE `id` = 15 [ RunTime:0.0043s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008389s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008548s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000702s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000812s ]

[ 2016-06-05T18:17:24+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000719s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000864s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000933s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('where 1=1详解','where 1=1; 这个条件始终为True，在不定数量查询条件情况下，1=1可以很方便的规范语句。<br />
如果用户在多条件查询页面中，不选择任何字段、不输入任何关键词，那么，必将返回表中所有数据；<br />
如果用户在页面中，选择了部分字段并且输入了部分查询关键词，那么，就按用户设置的条件进行查询。<br />
其实，where 1=1的应用，不是什么高级的应用，也不是所谓的智能化的构造，<br />
仅仅只是为了满足多条件查询页面中不确定的各种因素而采用的一种构造一条正确能运行的动态SQL语句的一种方法。<br />
where 1=0; 这个条件始终为false，结果不会返回任何数据，只有表结构，可用于快速建表<br />') [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000130s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007505s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007584s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000613s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000670s ]

[ 2016-06-05T18:17:25+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000603s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000795s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000862s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000084s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000208s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007557s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007645s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000603s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000662s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000828s ]
INFO: [ app_end ] --END-- [ RunTime:0.000891s ]

[ 2016-06-05T18:19:19+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000713s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001010s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001104s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('数据库操作命令','插入数据：<br />
insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;<br />
可以插入多条同一主键的数据???--不可以，这里的id要求不能设定为主键，否则无法插入；<br />
replace也可以插入一条数据，如果数据已经存在，则更新原来的数据<br />
load &nbsp;date &nbsp;infile插入数据语法<br />
删除数据：<br />
delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】<br />
修改数据：<br />
update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】<br />
其中的数据值如果有字符串或时间值，需要用单引号；<br />
特别注意 where条件的使用！！！<br />
<br />
<br />
-------------------------------------------------------------------------------<br />
客户端cmd(即DOS命令下)操作数据库的常用命令：<br />
mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；<br />
set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；<br />
show databases; &nbsp;显示所有数据库；<br />
create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；<br />
drop database db1; &nbsp;删除数据库db1；<br />
use db_name; &nbsp;选择数据库；&nbsp;<br />
create table news; &nbsp;创建一个数据表news；<br />
show create database db_name &nbsp;显示数据库的创建语句；<br />
<br />
<br />
数据库的备份和恢复：<br />
备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名<br />
恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名<br />
文件名一般写一个完整的路径，eg：f:/db1.sql<br />
这两个命令，都是在“没有登录mysql”的时候使用；<br />
<br />
<br />
php操作mysql数据库基本函数：<br />
$link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");<br />
mysql_query(\"set names 网页文件编码名\");<br />
mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");<br />
然后，开始正式执行要完成的数据库操作任务：<br />
$result = mysql_query(\"select / delete / update / insert / desc / show......\");<br />
对于mysql_query()这个函数，可以执行“几乎任何sql语句“,<br />
通常只有两种情况：<br />
情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；<br />
情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；<br />
<br />
<br />
特别注意：<br />
mysql_query()返回的是资源类型的数据；<br />
以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果<br />
mysql_fetch_assoc($result);<br />
从结果集中取出\"一行数据\"，以字段下标返回<br />
mysql_fetch_row($result);<br />
从结果集中取出\"一行数据\"，以枚举数组返回<br />
mysql_fetch_array($result);<br />
从结果集中取出\"一行数据\"，并以混合数组形式返回<br />
$n1 = mysql_num_rows($result);<br />
获得该结果集的数据行数<br />
$n2 = mysql_num_fields($result);<br />
获得该结果集的数据列数<br />
$name = mysql_field_name($result,$i);<br />
获得结果集的第 i 个字段的名字！i从0开始算起<br />
----------------------------------------------------------------------<br />
索引：<br />
索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。<br />
建立索引的形式为： 索引类型（要建立索引的字段名）<br />
索引类型有如下几个：<br />
普通索引：形式：key (字段名)<br />
唯一索引：形式：unique key (字段名)<br />
主键索引：形式：primary key (字段名)<br />
全文索引：形式：fulltext (字段名)<br />
外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);<br />
<br />
<br />
约束：就是要求数据满足什么条件的一种“规定”。<br />
主要有如下几种约束：<br />
主键约束：形式：primary key (字段名)；<br />
唯一约束：形式：unique key (字段名)；<br />
外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);<br />
&nbsp;\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"<br />
<br />
<br />
表选项列表<br />
表选项就是创建一个表的时候，对该表的整体设定，有如下几个：<br />
charset = 要使用的字符编码，<br />
engine = 要使用的存储引擎（也叫表类型），<br />
auto_increment = 设定当前表的自增长字段的初始值，默认是1<br />
comment = ‘该表的一些说明文字’<br />
engine常用的有2种：InnoDB和MyIsam；默认InnoDB<br />
---------------------------------------------------------------------------<br />
<br />
<br />
<br />
<br />
-------------------------------------------------------------------------<br />
<br />
<br />
基本查询：<br />
select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;<br />
concat( )函数是mysql中的系统函数，用于“连接”字符串<br />
每个输出项（字符串或表达式）都可以有一个别名&nbsp;<br />
形式： XX as 别名；（可以是中文名，不用加引号）<br />
eg：count (*) &nbsp;as &nbsp;数量<br />
注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；<br />
all 和 distinct<br />
用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；<br />
distinct 消除重复的行，将多行重复的数据显示为1行<br />
from 字句<br />
表示select部分从中“取得”数据的数据源--其实就是表<br />
通常，后面就是表名。<br />
where 字句<br />
就是对from子句中的“数据源”中的数据进行筛选的条件设定，<br />
筛选的机制是“一行一行进行判断”；<br />
is 运算符：空值和布尔值的判断<br />
XX is null<br />
XX is not null<br />
XX is true<br />
XX is false<br />
between运算符：范围判断<br />
XX between 值1 and 值2；<br />
其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；<br />
in运算符：给定确定数据的范围判断<br />
XX in (值1，值2，值3，......)<br />
like运算符：对字符串进行模糊查找<br />
XX like‘要查找的内容’<br />
它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)<br />
&nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行<br />
&nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行<br />
group by 字句：分组<br />
group by 字段1【desc/asc】，字段2【desc/asc】，........<br />
什么叫做分组？<br />
分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放<br />
特别注意：分组之后的结果，一定要理解为：只有一个一个组了<br />
则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：<br />
select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；<br />
实际应用中，分组之后：<br />
1、分组依据本身的信息，其实就是该分组依据的字段名；<br />
2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！<br />
3、原来数据中的“类型字段的聚合信息”，包括如下几个：<br />
&nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()<br />
&nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()<br />
&nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()<br />
&nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()<br />
这4个是内部系统函数！！！<br />
select pinpai, count(*) as 数量 from product group by pinpai;<br />
表示每一种品牌的商品数量<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai<br />
chandi????? &nbsp;//只在mysql中生效<br />
having 子句<br />
和where作用一样，由于分组之后限定了范围，可用条件语句比较少<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000<br />
找出平均价大于5000的商品<br />
having &nbsp;count(*) &gt; 2<br />
此时count(*)是独立计算的结果(与select上面那条语句没有关系)：<br />
order by 字句<br />
对前面取得的数据以设定的标准（字段）来进行排序以输出结果。<br />
order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........<br />
(asc，默认值)<br />
limit 起始行号 &nbsp;<br />
/*找出价格最高的一件商品*/<br />
select * from product order by desc limit 0, 1<br />
将商品按降序排列，取出一行<br />
select字段依赖于from?????&nbsp;<br />
这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)<br />
完整的select查询语句结构：<br />
select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2<br />
<br />
<br />') [ RunTime:0.0026s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007967s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008039s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000614s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000670s ]

[ 2016-06-05T18:19:20+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000619s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000936s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000129s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007452s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007533s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000766s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000840s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000794s ]
INFO: [ app_end ] --END-- [ RunTime:0.000865s ]

[ 2016-06-05T18:19:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000833s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001057s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001140s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000194s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007438s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007525s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000579s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000639s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000823s ]
INFO: [ app_end ] --END-- [ RunTime:0.000961s ]

[ 2016-06-05T18:21:04+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000888s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000925s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000996s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='插入数据：<br />
insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;<br />
可以插入多条同一主键的数据???--不可以，这里的id要求不能设定为主键，否则无法插入；<br />
replace也可以插入一条数据，如果数据已经存在，则更新原来的数据<br />
load &nbsp;date &nbsp;infile插入数据语法<br />
删除数据：<br />
delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】<br />
修改数据：<br />
update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】<br />
其中的数据值如果有字符串或时间值，需要用单引号；<br />
特别注意 where条件的使用！！！<br />
客户端cmd(即DOS命令下)操作数据库的常用命令：<br />
mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；<br />
set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；<br />
show databases; &nbsp;显示所有数据库；<br />
create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；<br />
drop database db1; &nbsp;删除数据库db1；<br />
use db_name; &nbsp;选择数据库；&nbsp;<br />
create table news; &nbsp;创建一个数据表news；<br />
show create database db_name &nbsp;显示数据库的创建语句；<br />
数据库的备份和恢复：<br />
备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名<br />
恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名<br />
文件名一般写一个完整的路径，eg：f:/db1.sql<br />
这两个命令，都是在“没有登录mysql”的时候使用；<br />
php操作mysql数据库基本函数：<br />
$link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");<br />
mysql_query(\"set names 网页文件编码名\");<br />
mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");<br />
然后，开始正式执行要完成的数据库操作任务：<br />
$result = mysql_query(\"select / delete / update / insert / desc / show......\");<br />
对于mysql_query()这个函数，可以执行“几乎任何sql语句“,<br />
通常只有两种情况：<br />
情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；<br />
情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；<br />
特别注意：<br />
mysql_query()返回的是资源类型的数据；<br />
以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果<br />
mysql_fetch_assoc($result);<br />
从结果集中取出\"一行数据\"，以字段下标返回<br />
mysql_fetch_row($result);<br />
从结果集中取出\"一行数据\"，以枚举数组返回<br />
mysql_fetch_array($result);<br />
从结果集中取出\"一行数据\"，并以混合数组形式返回<br />
$n1 = mysql_num_rows($result);<br />
获得该结果集的数据行数<br />
$n2 = mysql_num_fields($result);<br />
获得该结果集的数据列数<br />
$name = mysql_field_name($result,$i);<br />
获得结果集的第 i 个字段的名字！i从0开始算起<br />
索引：<br />
索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。<br />
建立索引的形式为： 索引类型（要建立索引的字段名）<br />
索引类型有如下几个：<br />
普通索引：形式：key (字段名)<br />
唯一索引：形式：unique key (字段名)<br />
主键索引：形式：primary key (字段名)<br />
全文索引：形式：fulltext (字段名)<br />
外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);<br />
约束：就是要求数据满足什么条件的一种“规定”。<br />
主要有如下几种约束：<br />
主键约束：形式：primary key (字段名)；<br />
唯一约束：形式：unique key (字段名)；<br />
外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);<br />
&nbsp;\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"<br />
表选项列表<br />
表选项就是创建一个表的时候，对该表的整体设定，有如下几个：<br />
charset = 要使用的字符编码，<br />
engine = 要使用的存储引擎（也叫表类型），<br />
auto_increment = 设定当前表的自增长字段的初始值，默认是1<br />
comment = ‘该表的一些说明文字’<br />
engine常用的有2种：InnoDB和MyIsam；默认InnoDB<br />
基本查询：<br />
select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;<br />
concat( )函数是mysql中的系统函数，用于“连接”字符串<br />
每个输出项（字符串或表达式）都可以有一个别名&nbsp;<br />
形式： XX as 别名；（可以是中文名，不用加引号）<br />
eg：count (*) &nbsp;as &nbsp;数量<br />
注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；<br />
all 和 distinct<br />
用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；<br />
distinct 消除重复的行，将多行重复的数据显示为1行<br />
from 字句<br />
表示select部分从中“取得”数据的数据源--其实就是表<br />
通常，后面就是表名。<br />
where 字句<br />
就是对from子句中的“数据源”中的数据进行筛选的条件设定，<br />
筛选的机制是“一行一行进行判断”；<br />
is 运算符：空值和布尔值的判断<br />
XX is null<br />
XX is not null<br />
XX is true<br />
XX is false<br />
between运算符：范围判断<br />
XX between 值1 and 值2；<br />
其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；<br />
in运算符：给定确定数据的范围判断<br />
XX in (值1，值2，值3，......)<br />
like运算符：对字符串进行模糊查找<br />
XX like‘要查找的内容’<br />
它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)<br />
&nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行<br />
&nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行<br />
group by 字句：分组<br />
group by 字段1【desc/asc】，字段2【desc/asc】，........<br />
什么叫做分组？<br />
分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放<br />
特别注意：分组之后的结果，一定要理解为：只有一个一个组了<br />
则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：<br />
select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；<br />
实际应用中，分组之后：<br />
1、分组依据本身的信息，其实就是该分组依据的字段名；<br />
2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！<br />
3、原来数据中的“类型字段的聚合信息”，包括如下几个：<br />
&nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()<br />
&nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()<br />
&nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()<br />
&nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()<br />
这4个是内部系统函数！！！<br />
select pinpai, count(*) as 数量 from product group by pinpai;<br />
表示每一种品牌的商品数量<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai<br />
chandi????? &nbsp;//只在mysql中生效<br />
having 子句<br />
和where作用一样，由于分组之后限定了范围，可用条件语句比较少<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000<br />
找出平均价大于5000的商品<br />
having &nbsp;count(*) &gt; 2<br />
此时count(*)是独立计算的结果(与select上面那条语句没有关系)：<br />
order by 字句<br />
对前面取得的数据以设定的标准（字段）来进行排序以输出结果。<br />
order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........<br />
(asc，默认值)<br />
limit 起始行号 &nbsp;<br />
/*找出价格最高的一件商品*/<br />
select * from product order by desc limit 0, 1<br />
将商品按降序排列，取出一行<br />
select字段依赖于from?????&nbsp;<br />
这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)<br />
完整的select查询语句结构：<br />
select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2<br />' WHERE `id` = 17 [ RunTime:0.0519s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000281s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016950s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017099s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001111s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001243s ]

[ 2016-06-05T18:21:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000681s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001336s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001465s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000069s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000177s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008533s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008626s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000610s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000671s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000952s ]
INFO: [ app_end ] --END-- [ RunTime:0.001059s ]

[ 2016-06-05T18:24:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000610s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000837s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000905s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;\">插入数据：</span><br />
insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;<br />
可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；<br />
replace也可以插入一条数据，如果数据已经存在，则更新原来的数据<br />
load &nbsp;date &nbsp;infile插入数据语法<br />
<span style=\"color:#E53333;\">删除数据：</span><br />
delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】<br />
<span style=\"color:#E53333;\">修改数据：</span><br />
update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】<br />
其中的数据值如果有字符串或时间值，需要用单引号；<br />
特别注意 where条件的使用！！！<br />
<span style=\"color:#E53333;\">客户端cmd(即DOS命令下)操作数据库的常用命令：</span><br />
mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；<br />
set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；<br />
show databases; &nbsp;显示所有数据库；<br />
create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；<br />
drop database db1; &nbsp;删除数据库db1；<br />
use db_name; &nbsp;选择数据库；&nbsp;<br />
create table news; &nbsp;创建一个数据表news；<br />
show create database db_name &nbsp;显示数据库的创建语句；<br />
<span style=\"color:#E53333;\">数据库的备份和恢复：</span><br />
备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名<br />
恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名<br />
文件名一般写一个完整的路径，eg：f:/db1.sql<br />
这两个命令，都是在“没有登录mysql”的时候使用；<br />
<span style=\"color:#E53333;\">php操作mysql数据库基本函数：</span><br />
$link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");<br />
mysql_query(\"set names 网页文件编码名\");<br />
mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");<br />
然后，开始正式执行要完成的数据库操作任务：<br />
$result = mysql_query(\"select / delete / update / insert / desc / show......\");<br />
对于mysql_query()这个函数，可以执行“几乎任何sql语句“,<br />
通常只有两种情况：<br />
情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；<br />
情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；<br />
特别注意：<br />
mysql_query()返回的是资源类型的数据；<br />
以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果<br />
mysql_fetch_assoc($result);<br />
从结果集中取出\"一行数据\"，以字段下标返回<br />
mysql_fetch_row($result);<br />
从结果集中取出\"一行数据\"，以枚举数组返回<br />
mysql_fetch_array($result);<br />
从结果集中取出\"一行数据\"，并以混合数组形式返回<br />
$n1 = mysql_num_rows($result);<br />
获得该结果集的数据行数<br />
$n2 = mysql_num_fields($result);<br />
获得该结果集的数据列数<br />
$name = mysql_field_name($result,$i);<br />
获得结果集的第 i 个字段的名字！i从0开始算起<br />
<span style=\"color:#E53333;\">索引：</span><br />
索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。<br />
建立索引的形式为： 索引类型（要建立索引的字段名）<br />
索引类型有如下几个：<br />
普通索引：形式：key (字段名)<br />
唯一索引：形式：unique key (字段名)<br />
主键索引：形式：primary key (字段名)<br />
全文索引：形式：fulltext (字段名)<br />
外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);<br />
<span style=\"color:#E53333;\">约束：</span>就是要求数据满足什么条件的一种“规定”。<br />
主要有如下几种约束：<br />
主键约束：形式：primary key (字段名)；<br />
唯一约束：形式：unique key (字段名)；<br />
外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);<br />
&nbsp;\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"<br />
<span style=\"color:#E53333;\">表选项列表</span><br />
表选项就是创建一个表的时候，对该表的整体设定，有如下几个：<br />
charset = 要使用的字符编码，<br />
engine = 要使用的存储引擎（也叫表类型），<br />
auto_increment = 设定当前表的自增长字段的初始值，默认是1<br />
comment = ‘该表的一些说明文字’<br />
engine常用的有2种：InnoDB和MyIsam；默认InnoDB<br />
<span style=\"color:#E53333;\">基本查询：</span><br />
select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;<br />
concat( )函数是mysql中的系统函数，用于“连接”字符串<br />
每个输出项（字符串或表达式）都可以有一个别名&nbsp;<br />
形式： XX as 别名；（可以是中文名，不用加引号）<br />
eg：count (*) &nbsp;as &nbsp;数量<br />
注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；<br />
all 和 distinct<br />
用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；<br />
distinct 消除重复的行，将多行重复的数据显示为1行<br />
from 字句<br />
表示select部分从中“取得”数据的数据源--其实就是表<br />
通常，后面就是表名。<br />
where 字句<br />
就是对from子句中的“数据源”中的数据进行筛选的条件设定，<br />
筛选的机制是“一行一行进行判断”；<br />
is 运算符：空值和布尔值的判断<br />
XX is null<br />
XX is not null<br />
XX is true<br />
XX is false<br />
between运算符：范围判断<br />
XX between 值1 and 值2；<br />
其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；<br />
in运算符：给定确定数据的范围判断<br />
XX in (值1，值2，值3，......)<br />
like运算符：对字符串进行模糊查找<br />
XX like‘要查找的内容’<br />
它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)<br />
&nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行<br />
&nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行<br />
group by 字句：分组<br />
group by 字段1【desc/asc】，字段2【desc/asc】，........<br />
<span style=\"color:#E53333;\">什么叫做分组？</span><br />
分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放<br />
特别注意：分组之后的结果，一定要理解为：只有一个一个组了<br />
则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：<br />
select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；<br />
实际应用中，分组之后：<br />
1、分组依据本身的信息，其实就是该分组依据的字段名；<br />
2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！<br />
3、原来数据中的“类型字段的聚合信息”，包括如下几个：<br />
&nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()<br />
&nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()<br />
&nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()<br />
&nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()<br />
这4个是内部系统函数！！！<br />
select pinpai, count(*) as 数量 from product group by pinpai;<br />
表示每一种品牌的商品数量<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai<br />
chandi????? &nbsp;//只在mysql中生效<br />
having 子句<br />
和where作用一样，由于分组之后限定了范围，可用条件语句比较少<br />
select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000<br />
找出平均价大于5000的商品<br />
having &nbsp;count(*) &gt; 2<br />
此时count(*)是独立计算的结果(与select上面那条语句没有关系)：<br />
order by 字句<br />
对前面取得的数据以设定的标准（字段）来进行排序以输出结果。<br />
order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........<br />
(asc，默认值)<br />
limit 起始行号 &nbsp;<br />
/*找出价格最高的一件商品*/<br />
select * from product order by desc limit 0, 1<br />
将商品按降序排列，取出一行<br />
select字段依赖于from?????&nbsp;<br />
这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)<br />
完整的select查询语句结构：<br />
select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2<br />' WHERE `id` = 17 [ RunTime:0.0527s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000107s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000267s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015510s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015667s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001025s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001154s ]

[ 2016-06-05T18:24:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000703s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001010s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001116s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000092s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000232s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009115s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009206s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000693s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000753s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000961s ]
INFO: [ app_end ] --END-- [ RunTime:0.001073s ]

[ 2016-06-05T18:24:45+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000614s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000747s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000820s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\">插入数据：</span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"line-height:1.5;\"> load &nbsp;date &nbsp;infile插入数据语法</span><br />
<span style=\"color:#E53333;line-height:1.5;\">删除数据：</span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\">修改数据：</span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\">客户端cmd(即DOS命令下)操作数据库的常用命令：</span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">数据库的备份和恢复：</span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">php操作mysql数据库基本函数：</span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\">索引：</span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\">约束：</span><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\">表选项列表</span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\">基本查询：</span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\">什么叫做分组？</span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> chandi????? &nbsp;//只在mysql中生效</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0577s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000096s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000240s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016140s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016287s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001731s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001871s ]

[ 2016-06-05T18:25:06+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000805s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001005s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001083s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007468s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007542s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000675s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000735s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001104s ]
INFO: [ app_end ] --END-- [ RunTime:0.001190s ]

[ 2016-06-05T18:25:32+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000592s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001078s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001195s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\">插入数据：</span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\">删除数据：</span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\">修改数据：</span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\">客户端cmd(即DOS命令下)操作数据库的常用命令：</span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">数据库的备份和恢复：</span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">php操作mysql数据库基本函数：</span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\">索引：</span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\">约束：</span><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\">表选项列表</span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\">基本查询：</span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\">什么叫做分组？</span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> chandi????? &nbsp;//只在mysql中生效</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0585s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000270s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016965s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017114s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001095s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001216s ]

[ 2016-06-05T18:26:23+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000698s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001129s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001213s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007360s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007438s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000637s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000826s ]
INFO: [ app_end ] --END-- [ RunTime:0.000903s ]

[ 2016-06-05T18:28:00+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000822s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000997s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001068s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\">插入数据：</span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\">删除数据：</span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\">修改数据：</span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\">客户端cmd(即DOS命令下)操作数据库的常用命令：</span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">数据库的备份和恢复：</span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\">php操作mysql数据库基本函数：</span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\">索引：</span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\">约束：</span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\">表选项列表</span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\">基本查询：</span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\">什么叫做分组？</span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> chandi????? &nbsp;//只在mysql中生效</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.3132s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000247s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015880s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016020s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001111s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001232s ]

[ 2016-06-05T18:28:24+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000843s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000867s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000937s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000069s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008047s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008130s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000595s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000659s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000877s ]
INFO: [ app_end ] --END-- [ RunTime:0.000969s ]

[ 2016-06-05T18:29:52+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000632s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000812s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000879s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd(即DOS命令下)操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> chandi????? &nbsp;//只在mysql中生效</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0032s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000124s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007359s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007433s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000635s ]

[ 2016-06-05T18:30:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000738s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001067s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001194s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007855s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008037s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000623s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000725s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001027s ]
INFO: [ app_end ] --END-- [ RunTime:0.001118s ]

[ 2016-06-05T18:30:33+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000640s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000798s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000865s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> chandi????? &nbsp;//只在mysql中生效</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0810s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000272s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017064s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017257s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001033s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001163s ]

[ 2016-06-05T18:32:37+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000534s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000863s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000929s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008621s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008697s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000678s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000861s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001112s ]
INFO: [ app_end ] --END-- [ RunTime:0.001220s ]

[ 2016-06-05T18:32:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000751s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000968s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001050s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
主要有如下几种约束：</span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0029s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000124s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007547s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007620s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000622s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000682s ]

[ 2016-06-05T18:33:17+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000778s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000894s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000982s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008302s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008379s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000653s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000712s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000766s ]
INFO: [ app_end ] --END-- [ RunTime:0.000864s ]

[ 2016-06-05T18:33:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000597s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000822s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000896s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:2;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:2;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:2;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:2;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:2;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:2;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:2;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:2;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:2;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:2;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:2;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:2;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:2;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:2;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:2;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:2;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:2;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:2;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:2;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:2;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:2;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:2;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:2;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:2;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:2;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:2;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:2;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:2;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:2;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:2;\"> 特别注意：</span><br />
<span style=\"line-height:2;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:2;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:2;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:2;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:2;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:2;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:2;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:2;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:2;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:2;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:2;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:2;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:2;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:2;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>索引：</strong></span><br />
<span style=\"line-height:2;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:2;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:2;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:2;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:2;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:2;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:2;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:2;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>约束：</strong></span><br />
<span style=\"line-height:2;\"><span style=\"line-height:2;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:2;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:2;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:2;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:2;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:2;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:2;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:2;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:2;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:2;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:2;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:2;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:2;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:2;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:2;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:2;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:2;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:2;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:2;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:2;\"> all 和 distinct</span><br />
<span style=\"line-height:2;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:2;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:2;\"> from 字句</span><br />
<span style=\"line-height:2;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:2;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:2;\"> where 字句</span><br />
<span style=\"line-height:2;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:2;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:2;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:2;\"> XX is null</span><br />
<span style=\"line-height:2;\"> XX is not null</span><br />
<span style=\"line-height:2;\"> XX is true</span><br />
<span style=\"line-height:2;\"> XX is false</span><br />
<span style=\"line-height:2;\"> between运算符：范围判断</span><br />
<span style=\"line-height:2;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:2;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:2;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:2;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:2;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:2;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:2;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:2;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:2;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:2;\"> group by 字句：分组</span><br />
<span style=\"line-height:2;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:2;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:2;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:2;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:2;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:2;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:2;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:2;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:2;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:2;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:2;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:2;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:2;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:2;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:2;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:2;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:2;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:2;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:2;\"> having 子句</span><br />
<span style=\"line-height:2;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:2;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:2;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:2;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:2;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:2;\"> order by 字句</span><br />
<span style=\"line-height:2;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:2;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:2;\"> (asc，默认值)</span><br />
<span style=\"line-height:2;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:2;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:2;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:2;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:2;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:2;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:2;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:2;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0577s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000113s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000284s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016667s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016800s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000900s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000994s ]

[ 2016-06-05T18:33:51+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000766s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000872s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000940s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008026s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008101s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000633s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000692s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000763s ]
INFO: [ app_end ] --END-- [ RunTime:0.000842s ]

[ 2016-06-05T18:34:29+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000654s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000833s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000915s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='数据库操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0555s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000248s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016402s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016542s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001141s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001272s ]

[ 2016-06-05T18:36:53+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000749s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000902s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000975s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('数据表的字段类型','创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充（只有在创建表的时候使用了ZEROFILL才有这个效果）<br />
也就是说 &nbsp;<br />
int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围 &nbsp;，它还是-2147483648-2147483647 ，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
&nbsp; &nbsp;如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
&nbsp; &nbsp; &nbsp;形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
&nbsp; &nbsp; &nbsp;共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
&nbsp; &nbsp; &nbsp;形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
&nbsp; &nbsp; &nbsp;最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。<br />
<div>
	<br />
</div>') [ RunTime:0.0027s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007863s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007939s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000542s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000603s ]

[ 2016-06-05T18:36:54+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000615s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000850s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000929s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000074s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000203s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007156s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007234s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000590s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000647s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000807s ]
INFO: [ app_end ] --END-- [ RunTime:0.000895s ]

[ 2016-06-05T18:37:21+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000724s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001172s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001321s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0032s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 18  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000173s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008597s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008704s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000699s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000763s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000863s ]
INFO: [ app_end ] --END-- [ RunTime:0.000925s ]

[ 2016-06-05T18:38:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000593s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000770s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000836s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='数据表的字段类型',`content`='创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充（只有在创建表的时候使用了ZEROFILL才有这个效果）<br />
也就是说 &nbsp;int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围，它还是-2147483648-2147483647，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。' WHERE `id` = 18 [ RunTime:0.0570s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000187s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000361s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016799s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016968s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001360s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001556s ]

[ 2016-06-05T18:39:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000839s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000940s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001019s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 18  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007795s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007870s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000682s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000742s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000884s ]
INFO: [ app_end ] --END-- [ RunTime:0.000947s ]

[ 2016-06-05T18:40:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000597s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000763s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000830s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='数据表的字段类型',`content`='创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充<span>（只有在创建表的时候使用了ZEROFILL才有这个效果）</span>，也就是说 &nbsp;int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围，它还是-2147483648-2147483647，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。' WHERE `id` = 18 [ RunTime:0.2781s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000247s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016097s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016235s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001135s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001276s ]

[ 2016-06-05T18:52:51+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000586s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000867s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000937s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0045s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('session和cookie会话技术','什么是会话控制<br />
出现原因:http是无状态协议的,每次都是不同的服务器请求,无法维护两个请求事务之间的关系.<br />
会话控制:能够在网站中跟踪一个变量,通过对变量的跟踪,就可以使多个请求事物之间建立联系,根据授权和用户身份显示不同的内容,不同页面<br />
cookie:是服务器设置在客户端的文本文件,保存客户端的个人信息.<br />
什么是Cookie:<br />
1.cookie是在http协议下,服务器或脚本在客户端保存维护信息的一种方式<br />
2.cookie是web服务器保存在客户端的一个很小的文本文件,保存客户端的信息,提高网页的处理效率,降低服务器负担<br />
3.cookie保存在客户端,通常在浏览器的cookie临时文件夹中,可以手动的删除.如果cookie太多超过系统的允许范围,系统将自动删除<br />
cookie的工作原理<br />
1.当用户访问基于php技术的网站时,在php中可以使用setcookie()函数生成一个cookie,系统经过处理,将cookie发送到客户端并保存在C:\\Documents and Setting\\用户名\\Cookies目录下<br />
2.cookie是http标头的一部分,在它之前不能有任何输出，空格和换行都不可以<br />
3.当客户端再次访问网站时,浏览器会自动把cookie目录下与该站点对应的cookie信息发送到服务器,服务器将自动把客户端传来的cookie转化成php的变量,.php5中存放在$_COOKIE全局数据中<br />
4.接受和处理cookie.使用$_COOKIE获取<br />
COOKIE的参数设定<br />
Setcookie(键，值，有效期=0，有效路径=‘’，有效域名=‘’，是否仅安全连接传输=false，是否HTTPonly=false)<br />
1、 键：设置cookie的名字，数据是在响应阶段被传输到浏览器端的<br />
2、 值：设置cookie的值<br />
Tip：增加，修改，删除，都使用该函数setcookie()完成！<br />
3、 有效期：默认浏览器关闭（会话周期结束）时，COOKIE失效。也成之为：会话COOKIE（临时COOKIE）<br />
允许设置COOKIE的有效期，语法上，使用setcookie的第三个参数进行设置，通过unix时间戳<br />
（从1970年到现在的秒数，PHP函数time()来获取当前时间戳。）来设置COOKIE的有效期。<br />
当用户下次访问您的站点的时候，浏览器会先检查您站点的所有cookie,如果某个cookie已经过期，浏览器不会把这个cookie随页面请求一起发送给服务器，而是删除这个已经过期的cookie。时间点是从cookie被创建时候当前时间开始计算。<br />
谁来判断该COOKIE是否过期？(是否在有效期内)<br />
浏览器 &nbsp;OR &nbsp;服务器？<br />
是浏览器判断该COOKIE是否过期的。<br />
在设置COOKIE时，同时将COOKIE的有效期，告知（传输）到浏览器端。<br />
如何删除COOKIE：<br />
Time()-1:	删除COOKIE通用做法，强制设为过期。<br />
注意: 当cookie被删除时,它的值在当前页面仍然有效.如果要把cookie设置成在浏览器关闭后就失效.那么可以把expiretime的值设为0,或者不设此值<br />
4、 path有效路径（使用较少）：默认仅在当前目录及其后代目录有效。使用空字符串表示<br />
默认值！通常如果需要设置，就是将COOKIE设置为 / 根目录下有效，表示整站有效。<br />
5、 有效域（使用频率较高）：某个域名下设置的COOKIE，仅仅可以在当前域名下所使用<br />
COOKIE，支持在一级域名内（所有的二级域名之间）进行COOKIE数据共享。<br />
6、 secure是否仅安全连接（https）传输：<br />
告知浏览器，我们所设置的cookie，是否仅仅在https这个协议下，才会被发送到浏览器端！ 用 参数 第六个完成设置：默认值false，表示都可以（http和https）。<br />
7、 HTTPONLY：<br />
所设置好的COOKIE，是否仅仅在http请求时所使用。<br />
COOKIE还可以通过浏览器端的脚本（javascript）获取到。<br />
function getCookie(){<br />
&nbsp; &nbsp; &nbsp;alert(document.cookie);<br />
}<br />
如果需要禁止浏览器端其他脚本使用该cookie，则使用第七个参数即可，默认false，设置为true表示除了http请求，其它地方（javascript）不可以用<br />
COOKIE的有效期：<br />
设置方法如下：<br />
setcookie(\"cookie_name\", \"abcd\", time()+3600);<br />
解释：这个cookie有3600秒的有效期；<br />
cookie有效期在退出作用域那一刻开始生效；<br />
重新访问又有3600秒，设置cookie时，不会考虑之前的是否设置cookie和cookie是否有效，可以认为是强制设置。<br />
如果关闭浏览器重新打开又重新算（当然这个要在浏览器端设置了关闭浏览器立即失效的开关）。cookie其实就是从打开页面产生cookie开始算起，如果你打开页面产生cookie的时间有1800秒了，假如设置的3600秒失效，再次刷新页面（不重新设置cookie的情况下）就剩1800秒了<br />
PHP手册上关于setcookie函数的expire参数有这样一个解释：<br />
If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).&nbsp;<br />
如果设为0 或者忽略该参数, cookie将在session结束时(或关闭浏览器时)过期<br />
COOKIE的注意事项<br />
1.setcookie()之前不能有任何的输出,空白和空格也不行(Setcookie()为头信息设置)<br />
2.setcookie()之后在当前页面echo时不会输出,必须刷新或到下一个页面才会输出<br />
3.不同浏览对cookie的处理不同,客户端可以禁用cookie,而且对浏览器的数量有限制.一个浏览器可以最多创建300个cookie,每个不能超过4kb,每个站点最多设置20个<br />
4.避免过度依赖cookie,因为客户端会禁止掉cookie<br />
什么是session?<br />
1.session从用户访问页面开始,到断开与网站的连接为止,形成一个会话的生命周期.在会话期间,分配客户唯一的一个sessionID,用来标识当前用户,与其他用户进行区分<br />
2.session会话时,session会分别保存在客户端和服务器端的两个文件,对于客户端:使用临时的cookie保存(cookie的名称为PHPSESSID)或者通过url字符串的形式传递.服务器端也以文本的形式保存在指定的session目录中<br />
3.session通过id接受每一次访问的请求,从而识别当前用户,跟踪和保持用户的具体资料,以及session变量,可在session中存储数字或文字资料.比如session_name.这些信息都保存在服务器端<br />
4.sessionID可以作为会话信息保存到数据库中,进行session持久化.这样可以跟踪用户的登陆次数,在线与否,在线时间<br />
如何销毁session?<br />
1、unset($_SESSION[\'XXX\']):用于删除单个session变量<br />
注意:不要使用unset($_SESSION),此函数不可用,会删除全局的$_SESSION销毁<br />
2、$_SESSION=array():删除多个session变量<br />
3、销毁session_destroy():结束当前的会话,并清空会话中的所有资源.该函数不会unset(释放)和当前session相关的全局变量,也不会删除客户端的session对应的cookie<br />
4、清空session值<br />
session_start();<br />
$_SESSION=array();<br />
session的过期时间：<br />
session的过期时间由两方面决定的：<br />
1存储在客户端的$_COOKIE[\'PHPSESSID\']的过期时间（默认cookie名称为PHPSESSID,可通过php.ini中的session.name修改。）<br />
&nbsp;2.存储在服务器端的相对应的session文件（session文件名和上述cookie的值一一对应），默认为1440秒，即24分钟&nbsp;<br />
两者的关系： 当执行session_start()的时候，其实是做了两件事：<br />
&nbsp;1，检查客户端发送过来的的所有cookie（当然也包括$_COOKIE[\'PHPSESSID\'], 如果有的话），根据$_COOKIE[\'PHPSESSID\']的值（这是由apache产生的随机字符串，如0lkbd2se458r600m2m7o1r4ic5）来访问 相对应的 session文件，这两者是一 一对应的关系。当然文件里面的值是经过序列化的<br />
2，如果客户端没有传来$_COOKIE[\'PHPSESSID\']，就会有服务端产生一个随机的$_COOKIE[\'PHPSESSID\']并存储在客户端。<br />
需要理解：<br />
1、在session_start()开启之后，当session数据对应的PHPSESSIONID的cookie已经超时，无法传回到服务器端，此时由于session开启，系统会自动再重新分配一个SESSIONID标识，SESSIONID默认是存储于浏览器端。<br />
2、同时在session_start开启之后，如果之前有存储过session，并且没有过期，则会获取到已经存好的session，如果没有存储过session，则session机制默认也会自动分配一个SESSIONID给浏览器，同时在服务器端生成对应的文件，此时的session是一个过期的会话<br />
如何设置 session数据的属性？<br />
设置COOKIE中session-ID这个COOKIE变量属性即可！<br />
方案一，配置 php.ini<br />
方案二，在脚本中，开启session之前使用函数进行配置<br />
ini_set(\'session.cookie_lifetime\',\'3600\');<br />
ini_set(\'sesssion.cookie_domain\',\' .baidu.com\');<br />
@session_start();<br />
采用下面的函数进行设置：<br />
Session_set_cookie_params(有效期，有效路径，有效域，是否仅安全连接传输，是否HTTPONLY)<br />
实际环境中，很少改session的有效期。经常改有效域名。<br />
session_set_cookie_params(0,\'/\', \'.baidu.com\');<br />
Session数据区操作：<br />
重写session的存储机制：<br />
Session数据区默认以 文件的形式存储与服务器操作系统临时目录中！<br />
当 session数据区过多时，文件形式的存储，操作速度变慢，磁盘的读写开销很大<br />
重写session入数据库：<br />
共6个函数<br />
Session_set_save_handler(开始函数，结束函数，读函数，写函数，删除函数，GC函数);<br />
告知session机制，在需要读写时，使用用户自定义的读写函数完成！<br />
这个函数仅仅是设置告知，不是调用，以上6个函数，在session机制运行到某个时间点时，<br />
才会被调用！<br />
垃圾回收操作： sessGC()<br />
垃圾：服务器上过时的session数据区。<br />
垃圾如何判定？<br />
如果一个session数据区已经超过多久没有使用（最后一次写操作）了，就是被视为垃圾数据。<br />
该时间临界点：默认1440s。可以被配置：session.gc_maxlifetime = 1440<br />
判断过期条件：Last_write &lt; 当前时间-1440&nbsp;<br />
垃圾如何删除？<br />
在 session_start()过程中，开启session机制过程中：有几率地执行 垃圾回收操作。<br />
一旦执行，就会删除所有的过期的垃圾数据区。<br />
默认的概率为1/1000。<br />
可以设置该几率：<br />
可能性：Session.gc_probability<br />
基数（除数）：Session.gc_divisor<br />
建议在脚本周期调整，使用函数ini_set(),在开启session机制前完成<br />
实现 sessGC()：PHP的session机制将 最大有效期作为参数，传递过来！<br />
语法细节：<br />
要注意先设置再开启session机制<br />
PHP配置项：session.save_handler改为 user： 表示用户自定义！<br />
会话技术总结：<br />
Session.save_handler	存储处理器： files|user<br />
Session.save_path	存储地址。<br />
Session.cookie_XXX	（lifetime，path，domain，secure，httponly）存储session-ID这个COOKIE变量的属性<br />
Session.gc_maxlifetime<br />
Session.gc_probability<br />
Session.gc_divisor<br />
<br />
<br />
Session，COOKIE联系和区别？<br />
联系：都是会话技术。<br />
Session基于COOKIE，session-ID存储于COOKIE中！<br />
<br />
<br />
区别：	 &nbsp;	 &nbsp; Cookie	 &nbsp; &nbsp; &nbsp; session<br />
存储位置	 &nbsp;浏览器端	 &nbsp; &nbsp; &nbsp; 服务器端<br />
安全性	 &nbsp; 	 &nbsp; &nbsp;低	 &nbsp; &nbsp; &nbsp; &nbsp;	高<br />
大小限制	 &nbsp; &nbsp;有	 &nbsp; &nbsp; &nbsp; &nbsp;	没有<br />
数据类型	 &nbsp; 字符串	 &nbsp; &nbsp; &nbsp;除资源外的其它全部<br />
有效期使用 &nbsp; &nbsp;	 &nbsp;长时间存 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;几乎不做持久化<br />
Session如何持久化？[理论]<br />
1、Session-ID要持久化：<br />
2、session_set_cookie_params(3600);<br />
服务器session数据区有效期修改：ini_set(‘session.gc_maxlifetime’, 3600);<br />
浏览器禁用COOKIE，session是否可用？[理论]<br />
COOKIE被禁用，session-Id不能存储和传输。因此不可用！<br />
理论上的解决方案：<br />
通过 URL， 或者 POST数据数据向服务器端，每次传输session-ID！<br />
例如下面的配置：php.ini<br />
Session是否仅仅是用COOKIE完成传输session-ID：<br />
session.use_only_cookie = 1 &nbsp;开启（在session_start之前）<br />
是否通过其他方式自动传输session-ID：<br />
session.use_trans_sid = 0 &nbsp;开启<br />
然后通过表单的隐藏域向服务器端，每次传输session-ID！即可<br />
session和cookie的额外的一些理解：<br />
1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。<br />
2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。<br />
3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。<br />
所以，总结一下：<br />
Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；<br />
Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br />') [ RunTime:0.0043s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000128s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007839s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007915s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000750s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000806s ]

[ 2016-06-05T18:52:52+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000761s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001092s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001196s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007254s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007339s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000626s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000684s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000932s ]
INFO: [ app_end ] --END-- [ RunTime:0.000994s ]

[ 2016-06-05T18:55:09+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000695s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000897s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000968s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 19  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000091s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000182s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008779s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008855s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000604s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000663s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000752s ]
INFO: [ app_end ] --END-- [ RunTime:0.000826s ]

[ 2016-06-05T19:00:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000052s ]
INFO: [ app_init ] --END-- [ RunTime:0.000877s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000974s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001055s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='session和cookie会话技术',`content`='什么是会话控制？<br />
出现原因:http是无状态协议的,每次都是不同的服务器请求,无法维护两个请求事务之间的关系.<br />
会话控制:能够在网站中跟踪一个变量,通过对变量的跟踪,就可以使多个请求事物之间建立联系,根据授权和用户身份显示不同的内容,不同页面<br />
COOKIE:是服务器设置在客户端的文本文件,保存客户端的个人信息.<br />
什么是COOKIE？<br />
1.cookie是在http协议下,服务器或脚本在客户端保存维护信息的一种方式<br />
2.cookie是web服务器保存在客户端的一个很小的文本文件,保存客户端的信息,提高网页的处理效率,降低服务器负担<br />
3.cookie保存在客户端,通常在浏览器的cookie临时文件夹中,可以手动的删除.如果cookie太多超过系统的允许范围,系统将自动删除<br />
cookie的工作原理：<br />
1.当用户访问基于php技术的网站时,在php中可以使用setcookie()函数生成一个cookie,系统经过处理,将cookie发送到客户端并保存在C:\\Documents and Setting\\用户名\\Cookies目录下<br />
2.cookie是http标头的一部分,在它之前不能有任何输出，空格和换行都不可以<br />
3.当客户端再次访问网站时,浏览器会自动把cookie目录下与该站点对应的cookie信息发送到服务器,服务器将自动把客户端传来的cookie转化成php的变量,.php5中存放在$_COOKIE全局数据中<br />
4.接受和处理cookie.使用$_COOKIE获取<br />
COOKIE的参数设定<br />
Setcookie(键，值，有效期=0，有效路径=‘’，有效域名=‘’，是否仅安全连接传输=false，是否HTTPonly=false)<br />
1、 键：设置cookie的名字，数据是在响应阶段被传输到浏览器端的<br />
2、 值：设置cookie的值<br />
Tip：增加，修改，删除，都使用该函数setcookie()完成！<br />
3、 有效期：默认浏览器关闭（会话周期结束）时，COOKIE失效。也成之为：会话COOKIE（临时COOKIE）<br />
允许设置COOKIE的有效期，语法上，使用setcookie的第三个参数进行设置，通过unix时间戳<br />
（从1970年到现在的秒数，PHP函数time()来获取当前时间戳。）来设置COOKIE的有效期。<br />
当用户下次访问您的站点的时候，浏览器会先检查您站点的所有cookie,如果某个cookie已经过期，浏览器不会把这个cookie随页面请求一起发送给服务器，而是删除这个已经过期的cookie。时间点是从cookie被创建时候当前时间开始计算。<br />
谁来判断该COOKIE是否过期？(是否在有效期内)<br />
浏览器 &nbsp;OR &nbsp;服务器？<br />
是浏览器判断该COOKIE是否过期的。<br />
在设置COOKIE时，同时将COOKIE的有效期，告知（传输）到浏览器端。<br />
如何删除COOKIE：<br />
Time()-1:	删除COOKIE通用做法，强制设为过期。<br />
注意: 当cookie被删除时,它的值在当前页面仍然有效.如果要把cookie设置成在浏览器关闭后就失效.那么可以把expiretime的值设为0,或者不设此值<br />
4、 path有效路径（使用较少）：默认仅在当前目录及其后代目录有效。使用空字符串表示<br />
默认值！通常如果需要设置，就是将COOKIE设置为 / 根目录下有效，表示整站有效。<br />
5、 有效域（使用频率较高）：某个域名下设置的COOKIE，仅仅可以在当前域名下所使用<br />
COOKIE，支持在一级域名内（所有的二级域名之间）进行COOKIE数据共享。<br />
6、 secure是否仅安全连接（https）传输：<br />
告知浏览器，我们所设置的cookie，是否仅仅在https这个协议下，才会被发送到浏览器端！ 用 参数 第六个完成设置：默认值false，表示都可以（http和https）。<br />
7、 HTTPONLY：<br />
所设置好的COOKIE，是否仅仅在http请求时所使用。<br />
COOKIE还可以通过浏览器端的脚本（javascript）获取到。<br />
function getCookie(){<br />
&nbsp; &nbsp; &nbsp;alert(document.cookie);<br />
}<br />
如果需要禁止浏览器端其他脚本使用该cookie，则使用第七个参数即可，默认false，设置为true表示除了http请求，其它地方（javascript）不可以用<br />
COOKIE的有效期：<br />
设置方法如下：<br />
setcookie(\"cookie_name\", \"abcd\", time()+3600);<br />
解释：这个cookie有3600秒的有效期；<br />
cookie有效期在退出作用域那一刻开始生效；<br />
重新访问又有3600秒，设置cookie时，不会考虑之前的是否设置cookie和cookie是否有效，可以认为是强制设置。<br />
如果关闭浏览器重新打开又重新算（当然这个要在浏览器端设置了关闭浏览器立即失效的开关）。cookie其实就是从打开页面产生cookie开始算起，如果你打开页面产生cookie的时间有1800秒了，假如设置的3600秒失效，再次刷新页面（不重新设置cookie的情况下）就剩1800秒了。<br />
PHP手册上关于setcookie函数的expire参数有这样一个解释：<br />
If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).&nbsp;<br />
如果设为0 或者忽略该参数, cookie将在session结束时(或关闭浏览器时)过期<br />
COOKIE的注意事项：<br />
1.setcookie()之前不能有任何的输出,空白和空格也不行(Setcookie()为头信息设置)<br />
2.setcookie()之后在当前页面echo时不会输出,必须刷新或到下一个页面才会输出<br />
3.不同浏览对cookie的处理不同,客户端可以禁用cookie,而且对浏览器的数量有限制.一个浏览器可以最多创建300个cookie,每个不能超过4kb,每个站点最多设置20个<br />
4.避免过度依赖cookie,因为客户端会禁止掉cookie<br />
什么是SESSION？<br />
1.session从用户访问页面开始,到断开与网站的连接为止,形成一个会话的生命周期.在会话期间,分配客户唯一的一个sessionID,用来标识当前用户,与其他用户进行区分<br />
2.session会话时,session会分别保存在客户端和服务器端的两个文件,对于客户端:使用临时的cookie保存(cookie的名称为PHPSESSID)或者通过url字符串的形式传递.服务器端也以文本的形式保存在指定的session目录中<br />
3.session通过id接受每一次访问的请求,从而识别当前用户,跟踪和保持用户的具体资料,以及session变量,可在session中存储数字或文字资料.比如session_name.这些信息都保存在服务器端<br />
4.sessionID可以作为会话信息保存到数据库中,进行session持久化.这样可以跟踪用户的登陆次数,在线与否,在线时间<br />
如何销毁SESSION?<br />
1、unset($_SESSION[\'XXX\']):用于删除单个session变量<br />
注意:不要使用unset($_SESSION),此函数不可用,会删除全局的$_SESSION销毁<br />
2、$_SESSION=array():删除多个session变量<br />
3、销毁session_destroy():结束当前的会话,并清空会话中的所有资源.该函数不会unset(释放)和当前session相关的全局变量,也不会删除客户端的session对应的cookie<br />
4、清空session值<br />
session_start();<br />
$_SESSION=array();<br />
SESSION的过期时间：<br />
session的过期时间由两方面决定的：<br />
1.存储在客户端的$_COOKIE[\'PHPSESSID\']的过期时间（默认cookie名称为PHPSESSID,可通过php.ini中的session.name修改。）<br />
2.存储在服务器端的相对应的session文件（session文件名和上述cookie的值一一对应），默认为1440秒，即24分钟&nbsp;<br />
两者的关系： 当执行session_start()的时候，其实是做了两件事：<br />
一、检查客户端发送过来的的所有cookie（当然也包括$_COOKIE[\'PHPSESSID\'], 如果有的话），根据$_COOKIE[\'PHPSESSID\']的值（这是由apache产生的随机字符串，如0lkbd2se458r600m2m7o1r4ic5）来访问 相对应的 session文件，这两者是一 一对应的关系。当然文件里面的值是经过序列化的。<br />
二、如果客户端没有传来$_COOKIE[\'PHPSESSID\']，就会有服务端产生一个随机的$_COOKIE[\'PHPSESSID\']并存储在客户端。<br />
对session_start()de<span></span>理解：<br />
1、在session_start()开启之后，当session数据对应的PHPSESSIONID的cookie已经超时，无法传回到服务器端，此时由于session开启，系统会自动再重新分配一个SESSIONID标识，SESSIONID默认是存储于浏览器端。<br />
2、同时在session_start开启之后，如果之前有存储过session，并且没有过期，则会获取到已经存好的session，如果没有存储过session，则session机制默认也会自动分配一个SESSIONID给浏览器，同时在服务器端生成对应的文件，此时的session是一个过期的会话<br />
如何设置 session数据的属性？<br />
设置COOKIE中session-ID这个COOKIE变量属性即可！<br />
方案一，配置 php.ini<br />
方案二，在脚本中，开启session之前使用函数进行配置<br />
ini_set(\'session.cookie_lifetime\',\'3600\');<br />
ini_set(\'sesssion.cookie_domain\',\' .baidu.com\');<br />
@session_start();<br />
采用下面的函数进行设置：<br />
Session_set_cookie_params(有效期，有效路径，有效域，是否仅安全连接传输，是否HTTPONLY)<br />
实际环境中，很少改session的有效期。经常改有效域名。<br />
session_set_cookie_params(0,\'/\', \'.baidu.com\');<br />
Session数据区操作：<br />
重写session的存储机制：<br />
Session数据区默认以 文件的形式存储与服务器操作系统临时目录中！<br />
当 session数据区过多时，文件形式的存储，操作速度变慢，磁盘的读写开销很大<br />
重写session入数据库：<br />
共6个函数<br />
Session_set_save_handler(开始函数，结束函数，读函数，写函数，删除函数，GC函数);<br />
告知session机制，在需要读写时，使用用户自定义的读写函数完成！<br />
这个函数仅仅是设置告知，不是调用，以上6个函数，在session机制运行到某个时间点时，<br />
才会被调用！<br />
垃圾回收操作： sessGC()<br />
垃圾：服务器上过时的session数据区。<br />
垃圾如何判定？<br />
如果一个session数据区已经超过多久没有使用（最后一次写操作）了，就是被视为垃圾数据。<br />
该时间临界点：默认1440s。可以被配置：session.gc_maxlifetime = 1440<br />
判断过期条件：Last_write &lt; 当前时间-1440&nbsp;<br />
垃圾如何删除？<br />
在 session_start()过程中，开启session机制过程中：有几率地执行 垃圾回收操作。<br />
一旦执行，就会删除所有的过期的垃圾数据区。<br />
默认的概率为1/1000。<br />
可以设置该几率：<br />
可能性：Session.gc_probability<br />
基数（除数）：Session.gc_divisor<br />
建议在脚本周期调整，使用函数ini_set(),在开启session机制前完成<br />
实现 sessGC()：PHP的session机制将 最大有效期作为参数，传递过来！<br />
语法细节：<br />
要注意先设置再开启session机制<br />
PHP配置项：session.save_handler改为 user： 表示用户自定义！<br />
会话技术总结：<br />
Session.save_handler	存储处理器： files|user<br />
Session.save_path	存储地址。<br />
Session.cookie_XXX	（lifetime，path，domain，secure，httponly）存储session-ID这个COOKIE变量的属性<br />
Session.gc_maxlifetime<br />
Session.gc_probability<br />
Session.gc_divisor<br />
Session，COOKIE联系和区别？<br />
联系：都是会话技术。<br />
Session基于COOKIE，session-ID存储于COOKIE中！<br />
区别： &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; cookie &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; session<br />
存储位置 &nbsp; &nbsp;&nbsp;&nbsp;浏览器端	 &nbsp; &nbsp; &nbsp; 服务器端<br />
安全性 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;低 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 高<br />
大小限制 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;有 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 没有<br />
数据类型 &nbsp; &nbsp; &nbsp;&nbsp;字符串 &nbsp; &nbsp; &nbsp; &nbsp;除资源外的其它全部<br />
有效期使用 &nbsp;&nbsp;长时间存 &nbsp; &nbsp; &nbsp;&nbsp;几乎不做持久化<br />
Session如何持久化？[理论]<br />
1、Session-ID要持久化：<br />
2、session_set_cookie_params(3600);<br />
服务器session数据区有效期修改：ini_set(‘session.gc_maxlifetime’, 3600);<br />
浏览器禁用COOKIE，session是否可用？[理论]<br />
COOKIE被禁用，session-Id不能存储和传输。因此不可用！<br />
理论上的解决方案：<br />
通过 URL， 或者 POST数据数据向服务器端，每次传输session-ID！<br />
例如下面的配置：php.ini<br />
Session是否仅仅是用COOKIE完成传输session-ID：<br />
session.use_only_cookie = 1 &nbsp;开启（在session_start之前）<br />
是否通过其他方式自动传输session-ID：<br />
session.use_trans_sid = 0 &nbsp;开启<br />
然后通过表单的隐藏域向服务器端，每次传输session-ID！即可<br />
session和cookie的额外的一些理解：<br />
1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。<br />
2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。<br />
3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。<br />
所以，总结一下：<br />
Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；<br />
Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br />' WHERE `id` = 19 [ RunTime:0.0504s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000096s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000237s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015884s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016054s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001067s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001190s ]

[ 2016-06-05T19:01:21+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000774s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000804s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000871s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 19  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000093s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000191s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007665s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007743s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000662s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000749s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000754s ]
INFO: [ app_end ] --END-- [ RunTime:0.000829s ]

[ 2016-06-05T19:06:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000586s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001073s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001173s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='session和cookie会话技术',`content`='<span style=\"color:#E53333;\">什么是会话控制？</span><br />
出现原因:http是无状态协议的,每次都是不同的服务器请求,无法维护两个请求事务之间的关系.<br />
会话控制:能够在网站中跟踪一个变量,通过对变量的跟踪,就可以使多个请求事物之间建立联系,根据授权和用户身份显示不同的内容,不同页面<br />
COOKIE:是服务器设置在客户端的文本文件,保存客户端的个人信息.<br />
<span style=\"color:#E53333;\">什么是COOKIE？</span><br />
1.cookie是在http协议下,服务器或脚本在客户端保存维护信息的一种方式<br />
2.cookie是web服务器保存在客户端的一个很小的文本文件,保存客户端的信息,提高网页的处理效率,降低服务器负担<br />
3.cookie保存在客户端,通常在浏览器的cookie临时文件夹中,可以手动的删除.如果cookie太多超过系统的允许范围,系统将自动删除<br />
<span style=\"color:#E53333;\">cookie的工作原理：</span><br />
1.当用户访问基于php技术的网站时,在php中可以使用setcookie()函数生成一个cookie,系统经过处理,将cookie发送到客户端并保存在C:\\Documents and Setting\\用户名\\Cookies目录下<br />
2.cookie是http标头的一部分,在它之前不能有任何输出，空格和换行都不可以<br />
3.当客户端再次访问网站时,浏览器会自动把cookie目录下与该站点对应的cookie信息发送到服务器,服务器将自动把客户端传来的cookie转化成php的变量,.php5中存放在$_COOKIE全局数据中<br />
4.接受和处理cookie.使用$_COOKIE获取<br />
<span style=\"color:#E53333;\">COOKIE的参数设定：</span><br />
Setcookie(键，值，有效期=0，有效路径=‘’，有效域名=‘’，是否仅安全连接传输=false，是否HTTPonly=false)<br />
1、 键：设置cookie的名字，数据是在响应阶段被传输到浏览器端的<br />
2、 值：设置cookie的值<br />
Tip：增加，修改，删除，都使用该函数setcookie()完成！<br />
3、 有效期：默认浏览器关闭（会话周期结束）时，COOKIE失效。也成之为：会话COOKIE（临时COOKIE）<br />
允许设置COOKIE的有效期，语法上，使用setcookie的第三个参数进行设置，通过unix时间戳<br />
（从1970年到现在的秒数，PHP函数time()来获取当前时间戳。）来设置COOKIE的有效期。<br />
当用户下次访问您的站点的时候，浏览器会先检查您站点的所有cookie,如果某个cookie已经过期，浏览器不会把这个cookie随页面请求一起发送给服务器，而是删除这个已经过期的cookie。时间点是从cookie被创建时候当前时间开始计算。<br />
谁来判断该COOKIE是否过期？(是否在有效期内)<br />
浏览器 &nbsp;OR &nbsp;服务器？<br />
是浏览器判断该COOKIE是否过期的。<br />
在设置COOKIE时，同时将COOKIE的有效期，告知（传输）到浏览器端。<br />
<span style=\"color:#E53333;\">如何删除COOKIE：</span><br />
Time()-1:	删除COOKIE通用做法，强制设为过期。<br />
注意: 当cookie被删除时,它的值在当前页面仍然有效.如果要把cookie设置成在浏览器关闭后就失效.那么可以把expiretime的值设为0,或者不设此值<br />
4、 path有效路径（使用较少）：默认仅在当前目录及其后代目录有效。使用空字符串表示<br />
默认值！通常如果需要设置，就是将COOKIE设置为 / 根目录下有效，表示整站有效。<br />
5、 有效域（使用频率较高）：某个域名下设置的COOKIE，仅仅可以在当前域名下所使用<br />
COOKIE，支持在一级域名内（所有的二级域名之间）进行COOKIE数据共享。<br />
6、 secure是否仅安全连接（https）传输：<br />
告知浏览器，我们所设置的cookie，是否仅仅在https这个协议下，才会被发送到浏览器端！ 用 参数 第六个完成设置：默认值false，表示都可以（http和https）。<br />
7、 HTTPONLY：<br />
所设置好的COOKIE，是否仅仅在http请求时所使用。<br />
COOKIE还可以通过浏览器端的脚本（javascript）获取到。<br />
function getCookie(){<br />
&nbsp; &nbsp; &nbsp;alert(document.cookie);<br />
}<br />
如果需要禁止浏览器端其他脚本使用该cookie，则使用第七个参数即可，默认false，设置为true表示除了http请求，其它地方（javascript）不可以用<br />
<span style=\"color:#E53333;\">COOKIE的有效期：</span><br />
设置方法如下：<br />
setcookie(\"cookie_name\", \"abcd\", time()+3600);<br />
解释：这个cookie有3600秒的有效期；<br />
cookie有效期在退出作用域那一刻开始生效；<br />
重新访问又有3600秒，设置cookie时，不会考虑之前的是否设置cookie和cookie是否有效，可以认为是强制设置。<br />
如果关闭浏览器重新打开又重新算（当然这个要在浏览器端设置了关闭浏览器立即失效的开关）。cookie其实就是从打开页面产生cookie开始算起，如果你打开页面产生cookie的时间有1800秒了，假如设置的3600秒失效，再次刷新页面（不重新设置cookie的情况下）就剩1800秒了。<br />
PHP手册上关于setcookie函数的expire参数有这样一个解释：<br />
If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).&nbsp;<br />
如果设为0 或者忽略该参数, cookie将在session结束时(或关闭浏览器时)过期<br />
<span style=\"color:#E53333;\">COOKIE的注意事项：</span><br />
1.setcookie()之前不能有任何的输出,空白和空格也不行(Setcookie()为头信息设置)<br />
2.setcookie()之后在当前页面echo时不会输出,必须刷新或到下一个页面才会输出<br />
3.不同浏览对cookie的处理不同,客户端可以禁用cookie,而且对浏览器的数量有限制.一个浏览器可以最多创建300个cookie,每个不能超过4kb,每个站点最多设置20个<br />
4.避免过度依赖cookie,因为客户端会禁止掉cookie<br />
<span style=\"color:#E53333;\">什么是SESSION？</span><br />
1.session从用户访问页面开始,到断开与网站的连接为止,形成一个会话的生命周期.在会话期间,分配客户唯一的一个sessionID,用来标识当前用户,与其他用户进行区分<br />
2.session会话时,session会分别保存在客户端和服务器端的两个文件,对于客户端:使用临时的cookie保存(cookie的名称为PHPSESSID)或者通过url字符串的形式传递.服务器端也以文本的形式保存在指定的session目录中<br />
3.session通过id接受每一次访问的请求,从而识别当前用户,跟踪和保持用户的具体资料,以及session变量,可在session中存储数字或文字资料.比如session_name.这些信息都保存在服务器端<br />
4.sessionID可以作为会话信息保存到数据库中,进行session持久化.这样可以跟踪用户的登陆次数,在线与否,在线时间<br />
<span style=\"color:#E53333;\">如何销毁SESSION?</span><br />
1、unset($_SESSION[\'XXX\']):用于删除单个session变量<br />
注意:不要使用unset($_SESSION),此函数不可用,会删除全局的$_SESSION销毁<br />
2、$_SESSION=array():删除多个session变量<br />
3、销毁session_destroy():结束当前的会话,并清空会话中的所有资源.该函数不会unset(释放)和当前session相关的全局变量,也不会删除客户端的session对应的cookie<br />
4、清空session值<br />
session_start();<br />
$_SESSION=array();<br />
<span style=\"color:#E53333;\">SESSION的过期时间：</span><br />
session的过期时间由两方面决定的：<br />
1.存储在客户端的$_COOKIE[\'PHPSESSID\']的过期时间（默认cookie名称为PHPSESSID,可通过php.ini中的session.name修改。）<br />
2.存储在服务器端的相对应的session文件（session文件名和上述cookie的值一一对应），默认为1440秒，即24分钟&nbsp;<br />
两者的关系： 当执行session_start()的时候，其实是做了两件事：<br />
一、检查客户端发送过来的的所有cookie（当然也包括$_COOKIE[\'PHPSESSID\'], 如果有的话），根据$_COOKIE[\'PHPSESSID\']的值（这是由apache产生的随机字符串，如0lkbd2se458r600m2m7o1r4ic5）来访问 相对应的 session文件，这两者是一 一对应的关系。当然文件里面的值是经过序列化的。<br />
二、如果客户端没有传来$_COOKIE[\'PHPSESSID\']，就会有服务端产生一个随机的$_COOKIE[\'PHPSESSID\']并存储在客户端。<br />
对session_start()的理解：<br />
1、在session_start()开启之后，当session数据对应的PHPSESSIONID的cookie已经超时，无法传回到服务器端，此时由于session开启，系统会自动再重新分配一个SESSIONID标识，SESSIONID默认是存储于浏览器端。<br />
2、同时在session_start开启之后，如果之前有存储过session，并且没有过期，则会获取到已经存好的session，如果没有存储过session，则session机制默认也会自动分配一个SESSIONID给浏览器，同时在服务器端生成对应的文件，此时的session是一个过期的会话<br />
<span style=\"color:#E53333;\">如何设置 session数据的属性？</span><br />
设置COOKIE中session-ID这个COOKIE变量属性即可！<br />
方案一，配置 php.ini<br />
方案二，在脚本中，开启session之前使用函数进行配置<br />
ini_set(\'session.cookie_lifetime\',\'3600\');<br />
ini_set(\'sesssion.cookie_domain\',\' .baidu.com\');<br />
@session_start();<br />
采用下面的函数进行设置：<br />
Session_set_cookie_params(有效期，有效路径，有效域，是否仅安全连接传输，是否HTTPONLY)<br />
实际环境中，很少改session的有效期。经常改有效域名。<br />
session_set_cookie_params(0,\'/\', \'.baidu.com\');<br />
<span style=\"color:#E53333;\">Session数据区操作：</span><br />
重写session的存储机制：<br />
Session数据区默认以 文件的形式存储与服务器操作系统临时目录中！<br />
当 session数据区过多时，文件形式的存储，操作速度变慢，磁盘的读写开销很大<br />
重写session入数据库：<br />
共6个函数<br />
Session_set_save_handler(开始函数，结束函数，读函数，写函数，删除函数，GC函数);<br />
告知session机制，在需要读写时，使用用户自定义的读写函数完成！<br />
这个函数仅仅是设置告知，不是调用，以上6个函数，在session机制运行到某个时间点时，<br />
才会被调用！<br />
垃圾回收操作： sessGC()<br />
垃圾：服务器上过时的session数据区。<br />
<span style=\"color:#E53333;\">垃圾如何判定？</span><br />
如果一个session数据区已经超过多久没有使用（最后一次写操作）了，就是被视为垃圾数据。<br />
该时间临界点：默认1440s。可以被配置：session.gc_maxlifetime = 1440<br />
判断过期条件：Last_write &lt; 当前时间-1440&nbsp;<br />
<span style=\"color:#E53333;\">垃圾如何删除？</span><br />
在 session_start()过程中，开启session机制过程中：有几率地执行 垃圾回收操作。<br />
一旦执行，就会删除所有的过期的垃圾数据区。<br />
默认的概率为1/1000。<br />
可以设置该几率：<br />
可能性：Session.gc_probability<br />
基数（除数）：Session.gc_divisor<br />
建议在脚本周期调整，使用函数ini_set(),在开启session机制前完成<br />
实现 sessGC()：PHP的session机制将 最大有效期作为参数，传递过来！<br />
语法细节：<br />
要注意先设置再开启session机制<br />
PHP配置项：session.save_handler改为 user： 表示用户自定义！<br />
<span style=\"color:#E53333;\">会话技术总结：</span><br />
Session.save_handler	存储处理器： files|user<br />
Session.save_path	存储地址。<br />
Session.cookie_XXX	（lifetime，path，domain，secure，httponly）存储session-ID这个COOKIE变量的属性<br />
Session.gc_maxlifetime<br />
Session.gc_probability<br />
Session.gc_divisor<br />
<span style=\"color:#E53333;\">Session，COOKIE联系和区别？</span><br />
联系：都是会话技术。<br />
Session基于COOKIE，session-ID存储于COOKIE中！<br />
区别：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cookie &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session<br />
存储位置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器端	 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 服务器端<br />
安全性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;低 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高<br />
大小限制&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;有 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有<br />
数据类型&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除资源外的其它全部<br />
有效期使用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;长时间存 &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;几乎不做持久化<br />
<span style=\"color:#E53333;\">Session如何持久化？[理论]</span><br />
1、Session-ID要持久化：<br />
2、session_set_cookie_params(3600);<br />
服务器session数据区有效期修改：ini_set(‘session.gc_maxlifetime’, 3600);<br />
浏览器禁用COOKIE，session是否可用？[理论]<br />
COOKIE被禁用，session-Id不能存储和传输。因此不可用！<br />
理论上的解决方案：<br />
通过 URL， 或者 POST数据数据向服务器端，每次传输session-ID！<br />
例如下面的配置：php.ini<br />
Session是否仅仅是用COOKIE完成传输session-ID：<br />
session.use_only_cookie = 1 &nbsp;开启（在session_start之前）<br />
是否通过其他方式自动传输session-ID：<br />
session.use_trans_sid = 0 &nbsp;开启<br />
然后通过表单的隐藏域向服务器端，每次传输session-ID！即可<br />
<span style=\"color:#E53333;\">session和cookie的额外的一些理解：</span><br />
1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。<br />
2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。<br />
3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。<br />
所以，总结一下：<br />
Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；<br />
Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br />' WHERE `id` = 19 [ RunTime:0.0508s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000106s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000323s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016842s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016996s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001154s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001355s ]

[ 2016-06-05T19:07:54+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/9
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000680s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001098s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001172s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 9  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000151s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007756s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007868s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000575s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000634s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000740s ]
INFO: [ app_end ] --END-- [ RunTime:0.000801s ]

[ 2016-06-05T19:08:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/9
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000785s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000961s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001047s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='面向对象中的属性和方法',`content`='<p>
	<span style=\"color:#E53333;\">类常量：</span> 
</p>
<p>
	定义形式：<span>const&nbsp;</span><span>常量名&nbsp;</span><span>=&nbsp;</span><span>常量值；</span><span>const P1&nbsp;=&nbsp;1;&nbsp;</span> 
</p>
<p>
	使用形式：类名：：常量名；<span>$v1=C1::P1</span> 
</p>
<p>
	定义类常量不能使用<span>define()</span>
</p>
<p>
	<span style=\"color:#E53333;\">普通属性（实例属性）</span><span style=\"color:#E53333;\">：</span> 
</p>
<p>
	定义形式：<span>public $</span><span>属性名&nbsp;</span><span>=&nbsp;</span><span>初始值；</span> 
</p>
<p>
	使用形式：<span>$</span><span>对象</span><span>-&gt;</span><span>属性名；</span> 
</p>
<p>
	$v1&nbsp;=&nbsp;$<span>对象</span><span>-&gt;</span><span>属性名；</span><span>//</span><span>赋值</span> 
</p>
<p>
	echo $<span>对象</span><span>-&gt;</span><span>属性名；&nbsp;</span><span>//</span><span>输出</span> 
</p>
<p>
	相当于&nbsp;<span>obj1.style.border=\"red\";</span>
</p>
<p>
	<span style=\"color:#E53333;\">静态属性：</span> 
</p>
<p>
	定义形式：<span>static&nbsp;$</span><span>属性名&nbsp;</span><span>=&nbsp;</span><span>初始值；</span> 
</p>
<p>
	使用形式：类名：：<span>$</span><span>静态属性名；</span> 
</p>
<p>
	注意：
</p>
<p>
	静态属性，他不属于任何一个对象，而只属于该类本身，
</p>
<p>
	也可以理解为该类的所有对象所共有的数据
</p>
<p>
	<span style=\"color:#E53333;\">普通方法（实例方法）</span> 
</p>
<p>
	function&nbsp;<span>方法名</span><span>(</span><span>形参</span><span>1</span><span>，形参</span><span>2</span><span>，</span><span>....&nbsp;){//</span><span>方法体。。。</span><span>}</span> 
</p>
<p>
	调用形式：<span>$</span><span>对象名</span><span>-&gt;</span><span>方法名</span><span>(</span><span>实参</span><span>1</span><span>，实参</span><span>2</span><span>，</span><span>....</span><span>）；</span>
</p>
<p>
	<span style=\"color:#E53333;\">静态方法：</span> 
</p>
<p>
	static function&nbsp;<span>方法名</span><span>(</span><span>形参</span><span>1</span><span>，形参</span><span>2</span><span>，</span><span>....&nbsp;){//</span><span>方法体。。。</span><span>}</span> 
</p>
<p>
	调用形式：类名：：方法名<span>(</span><span>实参</span><span>1</span><span>，实参</span><span>2</span><span>，</span><span>....</span><span>）；</span> 
</p>
<p style=\"text-indent:0pt;background:#FFFFFF;\">
	静态属性和方法，在类被调用时创建。类被调用，是指类被创建或者类中的任何静态成员被调用。
</p>
<p style=\"text-indent:0pt;background:#FFFFFF;\">
	静态方法不需要所在类被实例化就可以直接使用。
</p>
<p style=\"text-indent:0pt;background:#FFFFFF;\">
	使用的方式是&nbsp;类名：：静态方法名
</p>
<p style=\"text-indent:0pt;background:#FFFFFF;\">
	<br />
</p>
<p>
	<span style=\"color:#E53333;\">$this</span><span>代表一个对象</span>，就是调用当前这个方法的对象
</p>
<p>
	使用方法：<span>$</span><span>对象名</span><span>-&gt;</span><span>方法名</span><span>(</span><span>实参</span><span>1</span><span>，实参</span><span>2</span><span>，</span><span>....</span><span>）；</span> 
</p>
<p>
	构造方法<span>__construct()</span><span>中通常使用</span><span>$this</span><span>对属性进行赋值：</span> 
</p>
<p>
	$this-&gt;name&nbsp;=&nbsp;$name;
</p>
<p>
	在普通方法中可以直接将对象的属性当作<span>\"</span><span>变量</span><span>\"</span><span>进行输出</span> 
</p>
<p>
	function&nbsp;showInfo(){
</p>
<p>
	echo&nbsp;\"<span>商品名称：</span><span>\"&nbsp;.&nbsp;$this-&gt;name;}</span> 
</p>
<p>
	<br />
</p>
<p>
	<span style=\"color:#E53333;\">self</span>代表一个类，就是这个词（<span>self</span><span>）本身所在的这个类</span> 
</p>
<p>
	静态方法中调用静态属性：<span>self::$p2</span> 
</p>
<p>
	self::$instance instanceof self&nbsp;<span>或&nbsp;</span><span>new&nbsp;self()</span>
</p>
<p>
	<span style=\"color:#E53333;\">构造方法私有化：</span> 
</p>
<p>
	private function&nbsp;__construct(){}
</p>
<p>
	子类构造方法中调用父类的构造方法：<span>parent::__contrust</span> 
</p>
<p>
	子类普通方法中调用父类实例方法：<span>parent::</span><span>方法名</span><span>() &nbsp;</span> 
</p>
<span></span>' WHERE `id` = 9 [ RunTime:0.0488s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000107s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000259s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016743s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016913s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001577s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001740s ]

[ 2016-06-05T19:22:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000744s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000976s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001044s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 8  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008278s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008384s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000636s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000840s ]
INFO: [ app_end ] --END-- [ RunTime:0.000902s ]

[ 2016-06-05T19:22:57+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000629s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000833s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000903s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0044s ]
SQL: UPDATE `sc_message` SET `title`='【PDO扩展】lastInsertId函数返回0的原因',`content`='在使用PHP的PDO扩展插入数据的时候，有时候需要获取到最后插入记录的ID作为返回信息。要怎么才能实现这个需求呢？<br />
lastInsertId函数<br />
使用PDO的lastInsertId函数。<br />
但是，最近在使用的过程中发现有时候lastInsertId函数返回的是0。为什么会这样呢？<br />
来看看lastInsertId函数在 PHP手册 上的说明。<br />
返回最后插入行的ID或序列值。<br />
那么lastInsertId什么情况下会返回0呢？<br />
查看mysql手册<br />
翻开mysql手册，在 这里 找到这一段：<br />
mysql_insert_id() returns the value stored into an AUTO_INCREMENT column, whether that value is automatically generated by storing NULL or 0 or was specified as an explicit value. LAST_INSERT_ID() returns only automatically generated AUTO_INCREMENT values. If you store an explicit value other than NULL or 0, it does not affect the value returned by LAST_INSERT_ID().<br />
结论：<br />
从手册的描述可以知道，mysql_insert_id 函数返回的是储存在有AUTO_INCREMENT约束的字段的值，如果表中的字段不使用 AUTO_INCREMENT 约束或者使用自己生成的唯一值插入，那么该函数不会返回你所存储的值，而是返回NULL或0。因此，在没有使用AUTO_INCREMENT约束的表中，或者ID是自己生成的唯一ID，lastInsertId函数返回的都是0。<br />
<div>
	<br />
</div>' WHERE `id` = 8 [ RunTime:0.0474s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000263s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013219s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013347s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001080s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001214s ]

[ 2016-06-05T19:23:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000714s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000917s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000990s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 8  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008116s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008191s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000666s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000827s ]
INFO: [ app_end ] --END-- [ RunTime:0.000889s ]

[ 2016-06-05T19:23:40+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000650s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000824s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000891s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='【PDO扩展】lastInsertId函数返回0的原因',`content`='在使用PHP的PDO扩展插入数据的时候，有时候需要获取到最后插入记录的ID作为返回信息。要怎么才能实现这个需求呢？<br />
使用PDO的lastInsertId函数。<br />
但是，最近在使用的过程中发现有时候lastInsertId函数返回的是0。为什么会这样呢？<br />
来看看lastInsertId函数在 PHP手册 上的说明。<br />
返回最后插入行的ID或序列值。<br />
那么lastInsertId什么情况下会返回0呢？<br />
查看mysql手册<br />
翻开mysql手册，在 这里 找到这一段：<br />
mysql_insert_id() returns the value stored into an AUTO_INCREMENT column, whether that value is automatically generated by storing NULL or 0 or was specified as an explicit value. LAST_INSERT_ID() returns only automatically generated AUTO_INCREMENT values. If you store an explicit value other than NULL or 0, it does not affect the value returned by LAST_INSERT_ID().<br />
结论：<br />
从手册的描述可以知道，mysql_insert_id 函数返回的是储存在有AUTO_INCREMENT约束的字段的值，如果表中的字段不使用 AUTO_INCREMENT 约束或者使用自己生成的唯一值插入，那么该函数不会返回你所存储的值，而是返回NULL或0。因此，在没有使用AUTO_INCREMENT约束的表中，或者ID是自己生成的唯一ID，lastInsertId函数返回的都是0。<br />
<div>
	<br />
</div>' WHERE `id` = 8 [ RunTime:0.0027s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008441s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008518s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000599s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000659s ]

[ 2016-06-05T19:23:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000575s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000817s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000910s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0057s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 8  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000162s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007807s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007930s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000571s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000635s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000751s ]
INFO: [ app_end ] --END-- [ RunTime:0.000812s ]

[ 2016-06-05T19:23:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/8
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000641s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000798s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000866s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='【PDO扩展】lastInsertId函数返回0的原因',`content`='在使用PHP的PDO扩展插入数据的时候，有时候需要获取到最后插入记录的ID作为返回信息。要怎么才能实现这个需求呢？<br />
使用PDO的lastInsertId函数。<br />
但是在使用的过程中发现有时候lastInsertId函数返回的是0。为什么会这样呢？<br />
来看看lastInsertId函数在 PHP手册 上的说明。<br />
返回最后插入行的ID或序列值。<br />
那么lastInsertId什么情况下会返回0呢？<br />
查看mysql手册<br />
翻开mysql手册，在 这里 找到这一段：<br />
mysql_insert_id() returns the value stored into an AUTO_INCREMENT column, whether that value is automatically generated by storing NULL or 0 or was specified as an explicit value. LAST_INSERT_ID() returns only automatically generated AUTO_INCREMENT values. If you store an explicit value other than NULL or 0, it does not affect the value returned by LAST_INSERT_ID().<br />
结论：<br />
从手册的描述可以知道，mysql_insert_id 函数返回的是储存在有AUTO_INCREMENT约束的字段的值，如果表中的字段不使用 AUTO_INCREMENT 约束或者使用自己生成的唯一值插入，那么该函数不会返回你所存储的值，而是返回NULL或0。因此，在没有使用AUTO_INCREMENT约束的表中，或者ID是自己生成的唯一ID，lastInsertId函数返回的都是0。<br />
<div>
	<br />
</div>' WHERE `id` = 8 [ RunTime:0.0484s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000158s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008868s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008954s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000703s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000771s ]

[ 2016-06-05T19:31:11+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000615s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000860s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000956s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('工厂模式和单例模式','两种设计模式：<br />
1、工厂模式：<br />
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<br />
2、单例模式：<br />
实现单例4步：<br />
第1步：私有化构造方法 private function __construct(){ }<br />
第2步：定义一个静态变量，私有化并赋值为空(这里的null表示这个变量没有值)<br />
static private $instance = null;<br />
第3步：私有化克隆的魔术方法 &nbsp;private function __clone(){ }<br />
第4步：定义一个静态方法，判断这个对象是否为它自己的实例对象，保存到静态变量中并返回<br />
static function Getobj() {<br />
if(!(self::$instance instanceof self)){<br />
self::$instance = new self();<br />
}<br />
return self::$instance;<br />
}<br />
单例类创建一个对象：Single::Getobj；<br />') [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007903s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000697s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000760s ]

[ 2016-06-05T19:31:12+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000587s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000860s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000926s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007941s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008013s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000749s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000970s ]
INFO: [ app_end ] --END-- [ RunTime:0.001031s ]

[ 2016-06-05T19:31:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000590s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000851s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000932s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000151s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007298s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007376s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000555s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000615s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000815s ]
INFO: [ app_end ] --END-- [ RunTime:0.000876s ]

[ 2016-06-05T19:31:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000560s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000805s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000884s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<span style=\"color:#E53333;\"><strong>1、工厂模式：</strong></span><br />
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span><br />
实现单例4步：<br />
第1步：私有化构造方法 private function __construct(){ }<br />
第2步：定义一个静态变量，私有化并赋值为空(这里的null表示这个变量没有值)<br />
static private $instance = null;<br />
第3步：私有化克隆的魔术方法 &nbsp;private function __clone(){ }<br />
第4步：定义一个静态方法，判断这个对象是否为它自己的实例对象，保存到静态变量中并返回<br />
static function Getobj() {<br />
if(!(self::$instance instanceof self)){<br />
self::$instance = new self();<br />
}<br />
return self::$instance;<br />
}<br />
单例类创建一个对象：Single::Getobj；<br />' WHERE `id` = 20 [ RunTime:0.0529s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000112s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000277s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016836s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001070s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001195s ]

[ 2016-06-05T19:32:08+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000546s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000611s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000686s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000164s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007235s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007312s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000460s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000556s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000680s ]
INFO: [ app_end ] --END-- [ RunTime:0.000740s ]

[ 2016-06-05T19:32:32+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000593s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000680s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000747s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span>
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span>
</p>
第1步：私有化构造方法 private function __construct(){ }<br />
第2步：定义一个静态变量，私有化并赋值为空(这里的null表示这个变量没有值)<br />
static private $instance = null;<br />
第3步：私有化克隆的魔术方法 &nbsp;private function __clone(){ }<br />
第4步：定义一个静态方法，判断这个对象是否为它自己的实例对象，保存到静态变量中并返回<br />
static function Getobj() {<br />
if(!(self::$instance instanceof self)){<br />
self::$instance = new self();<br />
}<br />
return self::$instance;<br />
}<br />
单例类创建一个对象：Single::Getobj；<br />' WHERE `id` = 20 [ RunTime:0.0728s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000080s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000239s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013995s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014127s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000653s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000746s ]

[ 2016-06-05T19:33:45+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000640s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000712s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000789s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000093s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000214s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007973s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008102s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000555s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000619s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000735s ]
INFO: [ app_end ] --END-- [ RunTime:0.000795s ]

[ 2016-06-05T19:34:38+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000570s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000662s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000728s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
第1步：私有化构造方法 private function __construct(){ }<br />
第2步：定义一个静态变量，私有化并赋值为空(这里的null表示这个变量没有值)<br />
static private $instance = null;<br />
第3步：私有化克隆的魔术方法 &nbsp;private function __clone(){ }<br />
第4步：定义一个静态方法，判断这个属性是否为它自己的实例对象，并保存到静态变量中然后返回<br />
static function Getobj() {<br />
<span></span>&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance instanceof self)){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self::$instance = new self();<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<span></span><br />
&nbsp;&nbsp;&nbsp;&nbsp;return self::$instance;<br />
}<br />
单例类创建一个对象：Single::Getobj；<br />' WHERE `id` = 20 [ RunTime:0.0553s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000263s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014670s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014843s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000889s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001023s ]

[ 2016-06-05T19:37:44+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000029s ]
INFO: [ app_init ] --END-- [ RunTime:0.000578s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000900s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000977s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000153s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008160s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008235s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000637s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000833s ]
INFO: [ app_end ] --END-- [ RunTime:0.000924s ]

[ 2016-06-05T19:37:52+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000746s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000992s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001083s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
第1步：私有化构造方法 private function __construct(){ }<br />
第2步：定义一个静态变量，私有化并赋值为空(这里的null表示这个变量没有值)<br />
static private $instance = null;<br />
第3步：私有化克隆的魔术方法 &nbsp;private function __clone(){ }<br />
第4步：定义一个静态方法，判断这个属性是否为它自己的实例对象，并保存到静态变量中然后返回<br />
static function Getobj() {<br />
<span></span>&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance instanceof self)){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self::$instance = new self();<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<span></span><br />
&nbsp;&nbsp;&nbsp;&nbsp;return self::$instance;<br />
}<br />
<p>
	单例类创建一个对象：Single::Getobj；
</p>
<p>
	<p style=\"margin-left:10.5000pt;\">
		class&nbsp;Single{
	</p>
	<p style=\"margin-left:10.5000pt;\">
		Private&nbsp;function&nbsp;__construct(){&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>第</span><span>1</span><span>步：私有化构造方法私有化构造方法</span>
	</p>
	<p style=\"text-indent:22.0000pt;\">
		Private&nbsp;static&nbsp;$instance&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>第</span><span>2</span><span>步：定义一个静态变量，私有化并赋值为空</span>
	</p>
	<p style=\"margin-left:10.5000pt;\">
		Private&nbsp;function&nbsp;__clone(){&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>第</span><span>3</span><span>步：私有化克隆的魔术方法</span>
	</p>
	<p style=\"margin-left:10.5000pt;\">
		Static&nbsp;function&nbsp;getObj(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>第</span><span>4</span><span>步：定义一个公共的静态方法</span>
	</p>
	<p style=\"margin-left:10.5000pt;\">
		If(!(self::$instance&nbsp;&nbsp;instanceof&nbsp;&nbsp;self)){&nbsp;&nbsp;&nbsp;&nbsp;//<span>判断是否为它自己的实例对象</span>&nbsp;
	</p>
	<p style=\"margin-left:31.5000pt;text-indent:21.0000pt;\">
		$instance&nbsp;=&nbsp;new&nbsp;self;&nbsp;&nbsp;&nbsp;
	</p>
	<p style=\"margin-left:31.5000pt;text-indent:21.0000pt;\">
		}
	</p>
	<p style=\"margin-left:31.5000pt;text-indent:21.0000pt;\">
		Return&nbsp;$instance;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>保存该对象并返回</span>
	</p>
	<p style=\"margin-left:10.5000pt;text-indent:21.0000pt;\">
		}
	</p>
	<p style=\"margin-left:10.5000pt;\">
		}
	</p>
	<p style=\"margin-left:10.5000pt;\">
		$obj&nbsp;=&nbsp;Single::getObj();
	</p>
	<p style=\"margin-left:10.5000pt;\">
		为什么要使用单例：
	</p>
	<p>
		使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界<span>new</span><span>出来，它</span>最大的好处就是节省内存空间，提高效率，节省内存资源的开销！
	</p>
</p>' WHERE `id` = 20 [ RunTime:0.0514s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000107s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000270s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016394s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016567s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001103s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001242s ]

[ 2016-06-05T19:38:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000685s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000858s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000924s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008088s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008165s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000591s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000651s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000811s ]
INFO: [ app_end ] --END-- [ RunTime:0.000871s ]

[ 2016-06-05T19:42:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000541s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000835s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000903s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span>
</p>
<p>
	<br />
</p>
<p>
	<br />
</p>
class Single{<br />
private function __construct(){ } &nbsp; &nbsp;//第1步：私有化构造方法私有化构造方法<br />
private static $instance = null; &nbsp; &nbsp; //第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第4步：定义一个公共的静态方法<br />
if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp; &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
$instance = new self; &nbsp;&nbsp;<br />
}<br />
return $instance; &nbsp; &nbsp; &nbsp; &nbsp; //保存该对象并返回<br />
}<br />
}<br />
$obj = Single::getObj();<br />
为什么要使用单例：<br />
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0496s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000266s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014717s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014847s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000855s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000986s ]

[ 2016-06-05T19:42:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000698s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000777s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000842s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007339s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007415s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000515s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000573s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000787s ]
INFO: [ app_end ] --END-- [ RunTime:0.000848s ]

[ 2016-06-05T19:42:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000612s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001040s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001149s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span>
</p>
class Single{<br />
private function __construct(){ } &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
private static $instance = null; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
private function __clone(){ } &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第4步：定义一个公共的静态方法<br />
if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp; &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
$instance = new self; &nbsp;&nbsp;<br />
}<br />
return $instance; &nbsp; &nbsp; &nbsp; &nbsp; //保存该对象并返回<br />
}<br />
}<br />
$obj = Single::getObj();<br />
为什么要使用单例：<br />
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0563s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000092s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000233s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015429s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015565s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000979s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001094s ]

[ 2016-06-05T19:43:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000788s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000975s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001058s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000079s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000238s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008475s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008571s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000652s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000733s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000843s ]
INFO: [ app_end ] --END-- [ RunTime:0.000934s ]

[ 2016-06-05T19:43:18+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000796s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000965s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001033s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007589s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007668s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000631s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000691s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000753s ]
INFO: [ app_end ] --END-- [ RunTime:0.000818s ]

[ 2016-06-05T19:44:19+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000048s ]
INFO: [ app_init ] --END-- [ RunTime:0.000623s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000776s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000845s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ } &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp; &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span><br />
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0514s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000276s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016897s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017055s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001080s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001240s ]

[ 2016-06-05T19:44:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000638s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000759s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000083s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000197s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007169s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007270s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000450s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000511s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000728s ]
INFO: [ app_end ] --END-- [ RunTime:0.000793s ]

[ 2016-06-05T19:45:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000785s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000871s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001061s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='工厂模式和单例模式',`content`='两种设计模式：<br />
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){&nbsp;&nbsp;&nbsp;&nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span>
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006851s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006942s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000415s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000472s ]

[ 2016-06-05T19:45:42+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000618s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000665s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000731s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000133s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006900s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006977s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000427s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000496s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000871s ]
INFO: [ app_end ] --END-- [ RunTime:0.000987s ]

[ 2016-06-05T19:46:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000499s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000842s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000912s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span>
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){&nbsp;&nbsp;&nbsp;&nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007617s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007693s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000489s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000555s ]

[ 2016-06-05T19:46:34+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000740s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001127s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001248s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0043s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000155s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008280s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008358s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000672s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000732s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000886s ]
INFO: [ app_end ] --END-- [ RunTime:0.000949s ]

[ 2016-06-05T19:46:45+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000653s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000845s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000939s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0576s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000092s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000236s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014170s ]
INFO: [ view_parse ] --END-- [ RunTime:0.014313s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000970s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001079s ]

[ 2016-06-05T19:46:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000621s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001415s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001481s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000162s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008704s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008784s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000646s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000706s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000915s ]
INFO: [ app_end ] --END-- [ RunTime:0.000976s ]

[ 2016-06-05T19:47:12+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000597s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000772s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000839s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; //第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0472s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000111s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000282s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017132s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017296s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001593s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001797s ]

[ 2016-06-05T19:47:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000543s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000709s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000776s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000194s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007754s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007870s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000579s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000639s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000841s ]
INFO: [ app_end ] --END-- [ RunTime:0.000904s ]

[ 2016-06-05T19:47:46+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000626s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000887s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000958s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0609s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000271s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017250s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017405s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000811s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000895s ]

[ 2016-06-05T19:47:54+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000033s ]
INFO: [ app_init ] --END-- [ RunTime:0.001050s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000953s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001048s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000151s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007550s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007677s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000566s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000627s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000848s ]
INFO: [ app_end ] --END-- [ RunTime:0.000911s ]

[ 2016-06-05T19:48:05+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000619s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000668s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000736s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0490s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000111s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000287s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015118s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015276s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000724s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000855s ]

[ 2016-06-05T19:48:15+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000727s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000971s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001052s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000138s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007358s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007433s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000572s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000631s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000861s ]
INFO: [ app_end ] --END-- [ RunTime:0.000922s ]

[ 2016-06-05T19:48:24+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000797s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001038s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001128s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; //第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0488s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000123s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000327s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016255s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016495s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000987s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001108s ]

[ 2016-06-05T19:48:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000040s ]
INFO: [ app_init ] --END-- [ RunTime:0.000643s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000846s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000957s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000140s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006590s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006663s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000418s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000478s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000716s ]
INFO: [ app_end ] --END-- [ RunTime:0.000781s ]

[ 2016-06-05T19:48:55+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000631s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000647s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000714s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null;&nbsp;&nbsp;&nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0494s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000249s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015524s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015660s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000797s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000917s ]

[ 2016-06-05T19:49:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.001119s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001074s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001157s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008009s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008093s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000600s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000659s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000840s ]
INFO: [ app_end ] --END-- [ RunTime:0.000902s ]

[ 2016-06-05T19:49:15+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000702s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000860s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000927s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null; &nbsp; &nbsp; //第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0539s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000274s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.018573s ]
INFO: [ view_parse ] --END-- [ RunTime:0.018734s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001312s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001446s ]

[ 2016-06-05T19:49:23+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000780s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000898s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000991s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000164s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007068s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007151s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000536s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000598s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000857s ]
INFO: [ app_end ] --END-- [ RunTime:0.000920s ]

[ 2016-06-05T19:49:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000595s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000686s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000766s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null; &nbsp; &nbsp; &nbsp;&nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0492s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000107s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000266s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015268s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015453s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000863s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001004s ]

[ 2016-06-05T19:49:44+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000744s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000874s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000967s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0045s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 20  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000150s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000256s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006675s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006748s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000416s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000475s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000625s ]
INFO: [ app_end ] --END-- [ RunTime:0.000692s ]

[ 2016-06-05T19:49:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/20
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000041s ]
INFO: [ app_init ] --END-- [ RunTime:0.000755s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001104s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001229s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='两种设计模式：工厂模式和单例模式',`content`='<span></span> 
<p>
	<span style=\"color:#E53333;\"><strong>1、工厂模式：<span></span></strong></span> 
</p>
所谓工厂模式，就是这样一个类（就是所谓的工厂类）：<br />
它可以根据“传递”给他的类名，而去生产出对应的类的对象。<br />
//设计一个工厂类：这个工厂类，有一个静态方法；<br />
//通过该方法可以获得指定类的对象！<br />
class Gongchang{<br />
&nbsp; &nbsp; &nbsp; &nbsp; static function GetObject($className){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj = new $className(); //可变类<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span></span> return $obj;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
}<br />
$o1 = Gongchang::GetObject(\"A\");<br />
$o2 = Gongchang::GetObject(\"B\");<br />
<p>
	<span style=\"color:#E53333;\"><strong>2、单例模式：</strong></span> 
</p>
class Single{<br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __construct(){ }&nbsp;&nbsp;&nbsp;&nbsp;//第1步：私有化构造方法私有化构造方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;private static $instance = null; &nbsp; &nbsp; &nbsp;//第2步：定义一个静态变量，私有化并赋值为空<span>(这里的null表示这个变量没有值)</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;private function __clone(){ } &nbsp; &nbsp; &nbsp; &nbsp;//第3步：私有化克隆的魔术方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;static function getObj(){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第4步：定义一个公共的静态方法<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(self::$instance &nbsp;instanceof &nbsp;self)){ &nbsp;//判断是否为它自己的实例对象&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$instance = new self; &nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $instance; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//保存该对象并返回<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
$obj = Single::getObj();<br />
<p>
	<span style=\"color:#E53333;\"><strong>为什么要使用单例：</strong></span> 
</p>
使用单例模式可以保证每次实例化获得的对象只有一个，并且不能被外界new出来，它最大的好处就是节省内存空间，提高效率，节省内存资源的开销！<br />' WHERE `id` = 20 [ RunTime:0.0490s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000108s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000260s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015826s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015974s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001083s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001215s ]

[ 2016-06-05T19:51:16+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000610s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000774s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000843s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('有一个数组$a = array(4，3，7，12，8，9)；将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。','<p style=\"margin-left:10.5pt;\">
	$arr&nbsp;=&nbsp;array(4,3,7,12,8,9);
</p>
<p style=\"margin-left:10.5pt;\">
	$n&nbsp;=&nbsp;count($arr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>获取数组长度</span><span>(</span><span>个数</span><span>)</span>
</p>
<p style=\"margin-left:10.5pt;\">
	for($i=0;$i&lt;$n-1;$i++)&nbsp;&nbsp;&nbsp;&nbsp;//$i代表趟数，需要进行<span>$n-1</span><span>趟</span>
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>这里</span><span>$k</span><span>代表每一趟比较所需要的次数，第一次比较需要</span><span>$n-1</span><span>次</span>
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>每经过一次比较，数组中的个数减</span><span>1</span><span>，也就是减去</span><span>$i($i</span><span>从</span><span>0</span><span>开始</span><span>)</span>
</p>
<p style=\"margin-left:10.5pt;\">
	for($k=0;$k&lt;$n-$i-1;$k++)
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>这里</span><span>$k</span><span>也可以用作下标</span>
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>当</span><span>$i=0</span><span>时，</span><span>$k&lt;$n-1</span><span>，即</span><span>$k&lt;5(</span><span>下标从</span><span>0</span><span>到</span><span>4)</span><span>，也就是</span><span>6</span><span>个数比较</span><span>5</span><span>次</span>
</p>
<p style=\"margin-left:10.5pt;\">
	if($arr[$k]&gt;$arr[$k+1])
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	$temp&nbsp;=&nbsp;$arr[$k];
</p>
<p style=\"margin-left:10.5pt;\">
	$arr[$k]&nbsp;=&nbsp;$arr[$k+1];&nbsp;&nbsp;&nbsp;//<span>这里进行交换</span>
</p>
<p style=\"margin-left:10.5pt;\">
	$arr[$k+1]&nbsp;=&nbsp;$temp;
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	echo&nbsp;\"&lt;br&nbsp;/&gt;排序之后：\"&nbsp;.&nbsp;print_r($arr);
</p>') [ RunTime:0.0792s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000278s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017521s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017691s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001057s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001188s ]

[ 2016-06-05T19:51:17+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000741s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000895s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000977s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000070s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000169s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007891s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008032s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000649s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000885s ]
INFO: [ app_end ] --END-- [ RunTime:0.000960s ]

[ 2016-06-05T19:51:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000659s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000619s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000692s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000146s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006957s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007035s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000416s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000477s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000725s ]
INFO: [ app_end ] --END-- [ RunTime:0.000785s ]

[ 2016-06-05T19:52:11+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000541s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000651s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000719s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	$arr&nbsp;=&nbsp;array(4,3,7,12,8,9);
</p>
<p style=\"margin-left:10.5pt;\">
	$n&nbsp;=&nbsp;count($arr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>获取数组长度</span><span>(</span><span>个数</span><span>)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	for($i=0;$i&lt;$n-1;$i++)&nbsp;&nbsp;&nbsp;&nbsp;//$i代表趟数，需要进行<span>$n-1</span><span>趟</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>这里</span><span>$k</span><span>代表每一趟比较所需要的次数，第一次比较需要</span><span>$n-1</span><span>次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>每经过一次比较，数组中的个数减</span><span>1</span><span>，也就是减去</span><span>$i($i</span><span>从</span><span>0</span><span>开始</span><span>)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	for($k=0;$k&lt;$n-$i-1;$k++)
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>这里</span><span>$k</span><span>也可以用作下标</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	//<span>当</span><span>$i=0</span><span>时，</span><span>$k&lt;$n-1</span><span>，即</span><span>$k&lt;5(</span><span>下标从</span><span>0</span><span>到</span><span>4)</span><span>，也就是</span><span>6</span><span>个数比较</span><span>5</span><span>次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	if($arr[$k]&gt;$arr[$k+1])
</p>
<p style=\"margin-left:10.5pt;\">
	{
</p>
<p style=\"margin-left:10.5pt;\">
	$temp&nbsp;=&nbsp;$arr[$k];
</p>
<p style=\"margin-left:10.5pt;\">
	$arr[$k]&nbsp;=&nbsp;$arr[$k+1];&nbsp;&nbsp;&nbsp;//<span>这里进行交换</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	$arr[$k+1]&nbsp;=&nbsp;$temp;
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	echo&nbsp;\"<br />
排序之后：\"&nbsp;.&nbsp;print_r($arr);
</p>' WHERE `id` = 21 [ RunTime:0.0024s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007782s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007856s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000424s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000481s ]

[ 2016-06-05T19:52:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000029s ]
INFO: [ app_init ] --END-- [ RunTime:0.001100s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000851s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000927s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000148s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006686s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006764s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000427s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000486s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000726s ]
INFO: [ app_end ] --END-- [ RunTime:0.000787s ]

[ 2016-06-05T19:54:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000595s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000979s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001076s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	$arr&nbsp;=&nbsp;array(4,3,7,12,8,9);
</p>
<p style=\"margin-left:10.5pt;\">
	$n&nbsp;=&nbsp;count($arr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<span>获取数组长度</span><span>(</span><span>个数</span><span>)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行<span>$n-1</span><span>趟</span>
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;//<span>这里</span><span>$k</span><span>代表每一趟比较所需要的次数，第一次比较需要</span><span>$n-1</span><span>次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;//<span>每经过一次比较，数组中的个数减</span><span>1</span><span>，也就是减去</span><span>$i($i</span><span>从</span><span>0</span><span>开始</span><span>)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;for($k=0;$k&lt;$n-$i-1;$k++)<span style=\"line-height:1.5;\">{</span>
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;//<span>这里</span><span>$k</span><span>也可以用作下标</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;//<span>当</span><span>$i=0</span><span>时，</span><span>$k&lt;$n-1</span><span>，即</span><span>$k&lt;5(</span><span>下标从</span><span>0</span><span>到</span><span>4)</span><span>，也就是</span><span>6</span><span>个数比较</span><span>5</span><span>次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($arr[$k]&gt;$arr[$k+1])
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$temp&nbsp;=&nbsp;$arr[$k];
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr[$k]&nbsp;=&nbsp;$arr[$k+1];&nbsp;&nbsp;&nbsp;//<span>这里进行交换</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr[$k+1]&nbsp;=&nbsp;$temp;
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</p>
<p style=\"margin-left:10.5pt;\">
	&nbsp;&nbsp;&nbsp;&nbsp;}
</p>
<p style=\"margin-left:10.5pt;\">
	}
</p>
<p style=\"margin-left:10.5pt;\">
	echo&nbsp;\"<span></span>排序之后：\"&nbsp;.&nbsp;print_r($arr);
</p>' WHERE `id` = 21 [ RunTime:0.0565s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000273s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.018211s ]
INFO: [ view_parse ] --END-- [ RunTime:0.018364s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001057s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001169s ]

[ 2016-06-05T19:54:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000033s ]
INFO: [ app_init ] --END-- [ RunTime:0.001010s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000847s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000933s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000148s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008014s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008092s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000605s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000664s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000739s ]
INFO: [ app_end ] --END-- [ RunTime:0.000801s ]

[ 2016-06-05T19:54:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000566s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000810s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000914s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">$arr&nbsp;=&nbsp;array(4,3,7,12,8,9);</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">$n&nbsp;=&nbsp;count($arr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">获取数组长度</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">个数</span><span style=\"line-height:1;\">)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行</span><span style=\"line-height:1;\">$n-1</span><span style=\"line-height:1;\">趟</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">这里</span><span style=\"line-height:1;\">$k</span><span style=\"line-height:1;\">代表每一趟比较所需要的次数，第一次比较需要</span><span style=\"line-height:1;\">$n-1</span><span style=\"line-height:1;\">次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">每经过一次比较，数组中的个数减</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">，也就是减去</span><span style=\"line-height:1;\">$i($i</span><span style=\"line-height:1;\">从</span><span style=\"line-height:1;\">0</span><span style=\"line-height:1;\">开始</span><span style=\"line-height:1;\">)</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;for($k=0;$k&lt;$n-$i-1;$k++)</span><span style=\"line-height:1;\">{</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">这里</span><span style=\"line-height:1;\">$k</span><span style=\"line-height:1;\">也可以用作下标</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">当</span><span style=\"line-height:1;\">$i=0</span><span style=\"line-height:1;\">时，</span><span style=\"line-height:1;\">$k&lt;$n-1</span><span style=\"line-height:1;\">，即</span><span style=\"line-height:1;\">$k&lt;5(</span><span style=\"line-height:1;\">下标从</span><span style=\"line-height:1;\">0</span><span style=\"line-height:1;\">到</span><span style=\"line-height:1;\">4)</span><span style=\"line-height:1;\">，也就是</span><span style=\"line-height:1;\">6</span><span style=\"line-height:1;\">个数比较</span><span style=\"line-height:1;\">5</span><span style=\"line-height:1;\">次</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($arr[$k]&gt;$arr[$k+1])</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$temp&nbsp;=&nbsp;$arr[$k];</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr[$k]&nbsp;=&nbsp;$arr[$k+1];&nbsp;&nbsp;&nbsp;//</span><span style=\"line-height:1;\">这里进行交换</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr[$k+1]&nbsp;=&nbsp;$temp;</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">}</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">echo&nbsp;\"</span><span></span><span style=\"line-height:1;\">排序之后：\"&nbsp;.&nbsp;print_r($arr);</span>
</p>' WHERE `id` = 21 [ RunTime:0.0711s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000100s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000251s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015431s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015578s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000806s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000985s ]

[ 2016-06-05T19:54:40+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000601s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000933s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001033s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000091s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000211s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007511s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007592s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000446s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000591s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000740s ]
INFO: [ app_end ] --END-- [ RunTime:0.000806s ]

[ 2016-06-05T19:55:00+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000507s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000620s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000707s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0044s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\">$arr = array(4,3,7,12,8,9);<br />
$n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)<br />
for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟<br />
&nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次<br />
&nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)<br />
&nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){<br />
&nbsp; &nbsp; //这里$k也可以用作下标<br />
&nbsp; &nbsp; //当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次<br />
&nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])<br />
&nbsp; &nbsp; &nbsp; &nbsp; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; }<br />
}<br />
echo \"排序之后：\" . print_r($arr);<br />
</span>
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.0025s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000087s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000241s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.010365s ]
INFO: [ view_parse ] --END-- [ RunTime:0.010489s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000525s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000615s ]

[ 2016-06-05T19:55:17+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000710s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000800s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000869s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000134s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006623s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006735s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000531s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000642s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000779s ]
INFO: [ app_end ] --END-- [ RunTime:0.000850s ]

[ 2016-06-05T19:55:23+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.000846s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000867s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000937s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"><span style=\"line-height:1.5;\">$arr = array(4,3,7,12,8,9);</span><br />
<span style=\"line-height:1.5;\"> $n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)</span><br />
<span style=\"line-height:1.5;\"> for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k也可以用作下标</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; {</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> }</span><br />
<span style=\"line-height:1.5;\"> echo \"排序之后：\" . print_r($arr);</span><br />
</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.0552s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000292s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014928s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015050s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001090s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001223s ]

[ 2016-06-05T19:55:55+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000732s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001043s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001134s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007643s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007717s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000677s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000783s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000940s ]
INFO: [ app_end ] --END-- [ RunTime:0.001002s ]

[ 2016-06-05T19:56:02+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000569s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000732s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000801s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"><span style=\"line-height:1.5;\">$arr = array(4,3,7,12,8,9);</span><br />
<span style=\"line-height:1.5;\"> $n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)</span><br />
<span style=\"line-height:1.5;\"> for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//这里$k也可以用作下标</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; {</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> }</span><br />
<span style=\"line-height:1.5;\"> echo \"排序之后：\" . print_r($arr);</span><br />
</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.0517s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000243s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.014980s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015117s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000748s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000868s ]

[ 2016-06-05T19:56:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000493s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000727s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000819s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000153s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007641s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007761s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000549s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000658s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000812s ]
INFO: [ app_end ] --END-- [ RunTime:0.000943s ]

[ 2016-06-05T19:56:33+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000510s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000931s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001007s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"><span style=\"line-height:1.5;\">$arr = array(4,3,7,12,8,9);</span><br />
<span style=\"line-height:1.5;\"> $n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)</span><br />
<span style=\"line-height:1.5;\"> for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//这里$k也可以用作下标</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; //当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; {</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> }</span><br />
<span style=\"line-height:1.5;\"> echo \"排序之后：\" . print_r($arr);</span><br />
</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.0528s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000111s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000290s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017029s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017203s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001110s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001246s ]

[ 2016-06-05T19:56:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000535s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000949s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001036s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007505s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007639s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000637s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000700s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000744s ]
INFO: [ app_end ] --END-- [ RunTime:0.000833s ]

[ 2016-06-05T19:56:55+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.000760s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000703s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000823s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"><span style=\"line-height:1.5;\">$arr = array(4,3,7,12,8,9);</span><br />
<span style=\"line-height:1.5;\"> $n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)</span><br />
<span style=\"line-height:1.5;\"> for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp;//这里$k也可以用作下标</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; //当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; {</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> }</span><br />
<span style=\"line-height:1.5;\"> echo \"排序之后：\" . print_r($arr);</span><br />
</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.0474s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000098s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000248s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015199s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015336s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000795s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000916s ]

[ 2016-06-05T19:57:04+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000699s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000983s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001079s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 21  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000149s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008138s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008220s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000626s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000686s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000840s ]
INFO: [ app_end ] --END-- [ RunTime:0.000902s ]

[ 2016-06-05T19:57:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/21
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000953s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001156s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001292s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='有一个数组$a=array(4,3,7,12,8,9);将其重新排序并输出结果，按从小到大的顺序排序，不使用PHP内置函数。',`content`='<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"><span style=\"line-height:1.5;\">$arr = array(4,3,7,12,8,9);</span><br />
<span style=\"line-height:1.5;\"> $n = count($arr); &nbsp; &nbsp; &nbsp; &nbsp;//获取数组长度(个数)</span><br />
<span style=\"line-height:1.5;\"> for($i=0;$i&lt;$n-1;$i++){ &nbsp; &nbsp;//$i代表趟数，需要进行$n-1趟</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //这里$k代表每一趟比较所需要的次数，第一次比较需要$n-1次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; //每经过一次比较，数组中的个数减1，也就是减去$i($i从0开始)</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; for($k=0;$k&lt;$n-$i-1;$k++){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; //这里$k也可以用作下标</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; //当$i=0时，$k&lt;$n-1，即$k&lt;5(下标从0到4)，也就是6个数比较5次</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; if($arr[$k]&gt;$arr[$k+1])</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; {</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $temp = $arr[$k];</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k] = $arr[$k+1]; &nbsp; //这里进行交换</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arr[$k+1] = $temp;</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; }</span><br />
<span style=\"line-height:1.5;\"> }</span><br />
<span style=\"line-height:1.5;\"> echo \"排序之后：\" . print_r($arr);</span><br />
</span> 
</p>
<p style=\"margin-left:10.5pt;\">
	<span style=\"line-height:1;\"></span><span></span><span style=\"line-height:1;\"></span> 
</p>' WHERE `id` = 21 [ RunTime:0.1232s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000101s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000249s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016713s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016860s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000974s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001094s ]

[ 2016-06-05T19:58:33+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000789s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000759s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000838s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('什么是MVC？为什么要使用MVC？你在你的项目中是怎样使用MVC的？','<span style=\"line-height:1.5;\">MVC：是一种编程思想，M，model，表示模型，完成具体的业务逻辑，V，view，表示视图，用来展示页面，C，controller，控制器，专门用来负责调度的。</span><br />
<span style=\"line-height:1.5;\">Why：我们使用MVC开发项目主要是要将业务逻辑和显示相分离，使得项目分层明确，便于维护和分工协作，便于交流。</span><br />
<span style=\"line-height:1.5;\">How：在项目中我们定义了单一入口文件index.php，通过路由方式（请求分发器）请求到具体的哪个平台下的哪个控制器下对应的方法，在控制器中实例化模型，调用模型中的方法完成具体的业务逻辑，模型层再将处理后的结果返回给控制器，然后在控制器中加载视图文件，将模型中返回的结果输出到视图中。</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0025s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007062s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007139s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000510s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000586s ]

[ 2016-06-05T19:58:34+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000039s ]
INFO: [ app_init ] --END-- [ RunTime:0.002148s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001522s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001672s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000149s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007445s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007575s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000420s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000490s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000863s ]
INFO: [ app_end ] --END-- [ RunTime:0.000941s ]

[ 2016-06-05T20:00:13+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000801s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000769s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000868s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('简述什么是面向对象编程？','<p style=\"margin-left:10.5000pt;\">
	<span style=\"line-height:1.5;\">OOP核心思想：使用人类思考问题、解决问题的方式来编写程序。</span><br />
<span style=\"line-height:1.5;\">面向对象的三大特征：</span><br />
<span style=\"line-height:1.5;\">封装，通常有两层含义，第一层，将属性和方法封装到一起（通过class），形成一个完整的对象。第二层，对外隐藏具体的实现细节，提供一个可调用的接口（访问权限修饰符）。</span><br />
<span style=\"line-height:1.5;\">继承，子类继承了父类的属性和方法（非私有的），使用继承可以实现代码的重用</span><br />
<span style=\"line-height:1.5;\">多态，在不同的上下文中表现出不同的形态。php本身就是多态的语言，原因在于它是弱类型的。</span><br />
<span style=\"line-height:1.5;\"></span><span style=\"line-height:1.5;\"></span>
</p>') [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007601s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007674s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000404s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000507s ]

[ 2016-06-05T20:00:14+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000668s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000778s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000850s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000165s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007976s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008065s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000457s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000519s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000801s ]
INFO: [ app_end ] --END-- [ RunTime:0.000868s ]

[ 2016-06-05T20:01:36+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000598s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000672s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000762s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('如何理解面向对象中的关键字static？','<span style=\"line-height:1.5;\">Static关键字的理解：</span><br />
<span style=\"line-height:1.5;\">Static通常用来声明类中成员或方法为静态的，表示该属性只隶属于该类，而不是该类的对象。也就是不需要通过实例化对象，使用类名：：方法名的方式就可以访问静态属性和静态方法。</span><br />
<span style=\"line-height:1.5;\">Static它还可以表示“当前类”，跟self“类似”，但是它可以自动地判断“当前类”，依据是：代表调用其所在方法的那个类。</span><br />
<span style=\"line-height:1.5;\">Static还可以表示一个函数中的静态局部变量，该函数调用后，该变量的值不会被销毁（清空），而是会保留起来。</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000124s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006788s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006864s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000455s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000511s ]

[ 2016-06-05T20:01:38+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000032s ]
INFO: [ app_init ] --END-- [ RunTime:0.001070s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000752s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000885s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000146s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006600s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006780s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000404s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000468s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000874s ]
INFO: [ app_end ] --END-- [ RunTime:0.000958s ]

[ 2016-06-05T20:03:32+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000636s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000787s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000873s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('简述session和cookie两种会话技术的区别，并详细描述session机制的工作原理？','<span style=\"line-height:1.5;\">联系： Session基于COOKIE，session-ID存储于COOKIE中！</span><br />
<span style=\"line-height:1.5;\">区别：Cookie 存储于浏览器端，安全性低，数据有大小限制，只支持字符串类型的数据，可以长时间存储于浏览器端；</span><br />
<span style=\"line-height:1.5;\">Session存储于服务器端（其session-ID存储于浏览器端），安全性较高，数据有大小没有限制（默认是8M，可以在php.ini中配置），支持除了资源外的其它全部数据类型，一般不会长时间存储于服务器端，通常会将session写入到数据库中，如果是存储在服务器端，则通常会有几率的执行垃圾回收机制，回收过期的session 数据。</span><br />
<span style=\"line-height:1.5;\">&nbsp; session机制的工作原理：</span><br />
<span style=\"line-height:1.5;\">在session_start()开启时，先判断session中有没有存储过数据，如果有就读取session中的内容，如果没有就随机分配一个session-ID给浏览器，同时在服务器生成对应的文件，在读取session数据时，客户端将session-ID传递到服务器，服务器根据session-ID找到对应的文件，对文件内容进行反序列化就得到session的值，保存的时候先序列化再写入。</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0026s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000124s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007227s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007300s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000573s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000629s ]

[ 2016-06-05T20:03:33+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000663s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000910s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000999s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000136s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006914s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006999s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000582s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000639s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000810s ]
INFO: [ app_end ] --END-- [ RunTime:0.000871s ]

[ 2016-06-05T20:04:28+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000743s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000858s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000925s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 25  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007368s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007510s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000466s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000527s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000747s ]
INFO: [ app_end ] --END-- [ RunTime:0.000809s ]

[ 2016-06-05T20:04:54+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000650s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000811s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000879s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='简述session和cookie两种会话技术的区别，并详细描述session机制的工作原理？',`content`='<span style=\"line-height:1.5;\">联系： Session基于COOKIE，session-ID存储于COOKIE中！</span><br />
<span style=\"line-height:1.5;\">区别：Cookie 存储于浏览器端，安全性低，数据大小有限制，只支持字符串类型的数据，可以长时间存储于浏览器端；</span><br />
<span style=\"line-height:1.5;\">Session存储于服务器端（其session-ID存储于浏览器端），安全性较高，数据大小没有限制（默认是8M，可以在php.ini中配置），支持除了资源外的其它全部数据类型，一般不会长时间存储于服务器端，通常会将session写入到数据库中，如果是存储在服务器端，则通常会有几率的执行垃圾回收机制，回收过期的session 数据。</span><br />
<span style=\"line-height:1.5;\">&nbsp; session机制的工作原理：</span><br />
<span style=\"line-height:1.5;\">在session_start()开启时，先判断session中有没有存储过数据，如果有就读取session中的内容，如果没有就随机分配一个session-ID给浏览器，同时在服务器生成对应的文件，在读取session数据时，客户端将session-ID传递到服务器，服务器根据session-ID找到对应的文件，对文件内容进行反序列化就得到session的值，保存的时候先序列化再写入。</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 25 [ RunTime:0.0531s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000112s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000289s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015876s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016065s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000854s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000983s ]

[ 2016-06-05T20:05:59+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000885s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000799s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000892s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 25  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006929s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007020s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000531s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000592s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000804s ]
INFO: [ app_end ] --END-- [ RunTime:0.000865s ]

[ 2016-06-05T20:06:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/25
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000646s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000909s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000977s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='简述session和cookie两种会话技术的区别，并详细描述session机制的工作原理？',`content`='<span style=\"line-height:1.5;\">联系： Session基于COOKIE，session-ID存储于COOKIE中！</span><br />
<span style=\"line-height:1.5;\">区别：Cookie 存储于浏览器端，安全性低，对数据大小有限制，只支持字符串类型的数据，可以长时间存储于浏览器端；</span><br />
<span style=\"line-height:1.5;\">Session存储于服务器端（其session-ID存储于浏览器端），安全性较高，对数据大小没有限制（默认是8M，可以在php.ini中配置），支持除了资源外的其它全部数据类型，一般不会长时间存储于服务器端，通常会将session写入到数据库中，如果是存储在服务器端，则通常会有几率的执行垃圾回收机制，回收过期的session 数据。</span><br />
<span style=\"line-height:1.5;\">session机制的工作原理：</span><br />
<span style=\"line-height:1.5;\">在session_start()开启时，先判断session中有没有存储过数据，如果有就读取session中的内容，如果没有就随机分配一个session-ID给浏览器，同时在服务器生成对应的文件，在读取session数据时，客户端将session-ID传递到服务器，服务器根据session-ID找到对应的文件，对文件内容进行反序列化就得到session的值，保存的时候先序列化再写入。</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 25 [ RunTime:0.0551s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000105s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000260s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016613s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016787s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001024s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001143s ]

[ 2016-06-05T20:07:59+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000642s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000788s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000854s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('请问PHP中如何防止SQL注入和XSS攻击？在后台登录我们为什么要使用到验证码？ 试写出SQL注入的万能用户名和万能密码？','<span style=\"line-height:1.5;\">使用addslashes()函数可以实现防止SQL注入</span><br />
<span style=\"line-height:1.5;\">使用htmlentities()或者htmlspecialchars()函数实现防止XSS攻击</span><br />
<span style=\"line-height:1.5;\">验证码的作用：防止用户向服务器重复提交表单数据，暴力破解，论坛灌水，刷帖</span><br />
<span style=\"line-height:1.5;\">万能用户名：xxx’ or 1#</span><br />
<span style=\"line-height:1.5;\">万能密码： &nbsp;xxx’ or ‘1</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000068s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000177s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008363s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008479s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000634s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000692s ]

[ 2016-06-05T20:08:00+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000698s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000867s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000934s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000161s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007584s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007658s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000736s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000798s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000962s ]
INFO: [ app_end ] --END-- [ RunTime:0.001025s ]

[ 2016-06-05T20:08:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000037s ]
INFO: [ app_init ] --END-- [ RunTime:0.001349s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000868s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000958s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 26  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007925s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000510s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000569s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000754s ]
INFO: [ app_end ] --END-- [ RunTime:0.000815s ]

[ 2016-06-05T20:08:33+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000591s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000677s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000745s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='请问PHP中如何防止SQL注入和XSS攻击？在后台登录我们为什么要使用到验证码？试写出SQL注入的万能用户名和万能密码？',`content`='<span style=\"line-height:1.5;\">使用addslashes()函数可以实现防止SQL注入</span><br />
<span style=\"line-height:1.5;\">使用htmlentities()或者htmlspecialchars()函数实现防止XSS攻击</span><br />
<span style=\"line-height:1.5;\">验证码的作用：防止用户向服务器重复提交表单数据，暴力破解，论坛灌水，刷帖</span><br />
<span style=\"line-height:1.5;\">万能用户名：xxx’ or 1#</span><br />
<span style=\"line-height:1.5;\">万能密码： &nbsp;xxx’ or ‘1</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 26 [ RunTime:0.0033s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007737s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007837s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000423s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000480s ]

[ 2016-06-05T20:09:15+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000035s ]
INFO: [ app_init ] --END-- [ RunTime:0.001006s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001543s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001653s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 26  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000148s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006922s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006995s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000434s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000494s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000699s ]
INFO: [ app_end ] --END-- [ RunTime:0.000760s ]

[ 2016-06-05T20:09:21+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000725s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000943s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001088s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='请问PHP中如何防止SQL注入和XSS攻击？在后台登录我们为什么要使用到验证码？ 试写出SQL注入的万能用户名和万能密码？',`content`='<span style=\"line-height:1.5;\">使用addslashes()函数可以实现防止SQL注入</span><br />
<span style=\"line-height:1.5;\">使用htmlentities()或者htmlspecialchars()函数实现防止XSS攻击</span><br />
<span style=\"line-height:1.5;\">验证码的作用：防止用户向服务器重复提交表单数据，暴力破解，论坛灌水，刷帖</span><br />
<span style=\"line-height:1.5;\">万能用户名：xxx’ or 1#</span><br />
<span style=\"line-height:1.5;\">万能密码： &nbsp;xxx’ or ‘1</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 26 [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000082s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000166s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007884s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007960s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000601s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000658s ]

[ 2016-06-05T20:10:40+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000619s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000761s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 26  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000136s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007287s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007367s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000582s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000641s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000788s ]
INFO: [ app_end ] --END-- [ RunTime:0.000856s ]

[ 2016-06-05T20:10:58+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000669s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000897s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000966s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='请问PHP中如何防止SQL注入和XSS攻击？在后台登录我们为什么要使用到验证码？ 试写出SQL注入的万能用户名和万能密码？',`content`='<span style=\"line-height:1.5;\">使用addslashes()函数可以防止SQL注入</span><br />
<span style=\"line-height:1.5;\">使用htmlentities()或者htmlspecialchars()函数可以防止XSS攻击</span><br />
<span style=\"line-height:1.5;\">验证码的作用：防止用户向服务器重复提交表单数据，暴力破解，论坛灌水，刷帖</span><br />
<span style=\"line-height:1.5;\">万能用户名：xxx’ or 1#</span><br />
<span style=\"line-height:1.5;\">万能密码： &nbsp;xxx’ or ‘1</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 26 [ RunTime:0.0502s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000109s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000281s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017274s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017470s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001134s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001264s ]

[ 2016-06-05T20:12:13+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000694s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000871s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000941s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('什么是数据库中的事务，在什么情况下会用到事务？','<span style=\"line-height:1.5;\">事务（transaction）是作为一个单元的一组有序的数据库操作。</span><br />
<span style=\"line-height:1.5;\">如果组内的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作都完成，事务则提交（commit），其修改将作用于所有其它数据库进程。如果其中的一个操作失败，事务则回滚（rollback），该事务所有操作的影响都将取消。要想使用事务，首先需要开启事务（start &nbsp;transaction）。</span><br />
<span style=\"line-height:1.5;\">我们通常使用事务是为了要保证数据的一致性，事务经常用于银行转账、汇款或者某件商品的库存量和购物车的数量当中，比如：一件商品出库时，既要让商品库存量中的商品数量减1，又要让对应用户的购物车中的商品加1。</span><br />') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000057s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008659s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008734s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000640s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000696s ]

[ 2016-06-05T20:12:14+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000537s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000802s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000882s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009126s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009344s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000692s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000753s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000892s ]
INFO: [ app_end ] --END-- [ RunTime:0.000957s ]

[ 2016-06-05T20:13:41+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000454s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000569s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000641s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 3  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000133s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006751s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006827s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000415s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000477s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000700s ]
INFO: [ app_end ] --END-- [ RunTime:0.000761s ]

[ 2016-06-05T20:13:54+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/3
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000626s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000659s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000737s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='apache虚拟主机配置',`content`='<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"><virtualhost *:80=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; ServerName &nbsp;www.abc.com</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; DocumentRoot \"F:\\soft\\class\\php\"</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; <directory \"f:\\soft\\class\\php\"=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Options Indexes</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Order Deny,Allow</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Allow From All</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp;</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"></span><br />
<br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"><virtualhost *:80=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; ServerName &nbsp;www.www.com</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; DocumentRoot \"F:\\www\"</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; <directory \"f:\\www\"=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Options Indexes</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Order Deny,Allow</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Allow From All</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; DirectoryIndex &nbsp; &nbsp;index.php</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; #允许使用“分布式权限配置文件”</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; AllowOverride &nbsp;All</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp;</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"></span><br />
<br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"><virtualhost *:80=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; ServerName &nbsp;localhost</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; DocumentRoot \"F:\\soft\\phpsoft\\apache\\htdocs\"</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; <directory \"f:=\"\" f:\\soft\\phpsoft\\apache\\htdocs\"=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Options Indexes</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Order Deny,Allow</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; &nbsp; &nbsp; Allow From All</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp;</span><br />
<p>
	<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"></span> 
</p>
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">第130行：</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">#装载php“模块”--其实就是指php语言包中的一个文件而已！需要给出php5apache2_2.dll的完整路径</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">LoadModule php5_module \"F:/soft/phpsoft/php/php-5.3.13-Win32-VC9-x86/php5apache2_2.dll\"</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">#告知apache，凡是\".php\"后缀文件，找php语言模块（这里称为application/x-httpd-php）</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"><filesmatch \"\\.php$\"=\"\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">&nbsp; &nbsp; setHandler application/x-httpd-php</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\"></span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">#第二步的另一个语法形式，作用相同，但更灵活一些</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">AddType &nbsp;application/x-httpd-php &nbsp;.php &nbsp;.pap &nbsp; .phtml</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">#让apache知道，php.ini的所在位置（此时不要写出php.ini的文件名，只要目录）：</span><br />
<span style=\"font-family:Simsun;font-size:medium;line-height:normal;\">phpIniDir \"F:\\soft\\PHPsoft\\php\\php-5.3.13-Win32-VC9-x86\"</span><br />' WHERE `id` = 3 [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000142s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007432s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007506s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000412s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000470s ]

[ 2016-06-05T20:14:13+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.001015s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000809s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000899s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 7  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007622s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007697s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000589s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000649s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000813s ]
INFO: [ app_end ] --END-- [ RunTime:0.000876s ]

[ 2016-06-05T20:14:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/7
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000692s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000909s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001009s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='递归思想和递推思想',`content`='有关函数的编程思想：<br />
<span style=\"color:#E53333;\">递归思想：——递归函数</span><br />
就是在一个函数内部调用它自己的函数。<br />
递归思想总结：<br />
当面对一个“大问题”，该大问题可以经由该问题的同类问题的“小一级问题”而经过简单计算获得，<br />
而且，可以获知（已知）这类问题的“最小一级问题”的答案。则此时就可以使用递归方法来解决该问题。<br />
此时该函数的基本模式是：<br />
function &nbsp;digui( $n ){<br />
&nbsp;&nbsp;&nbsp;&nbsp;if(是最小一级){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 已知的答案；<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;$jieguo = 对 digui($n-1) 进行简单运算；<br />
&nbsp;&nbsp;&nbsp;&nbsp;return $jieguo;<br />
}<br />
<br />
<span style=\"color:#E53333;\">递推（迭代）思想</span><br />
如果要求一个“大问题”，且该问题有如下2个特点：<br />
1，已知该问题的同类问题的最小问题的答案。<br />
2，如果知道这种问题的小一级问题的答案，就可以轻松求得其“大一级”问题的答案，并且此问题的级次有一定的规律；<br />
则此时就可以使用递推思想来解决该问题，代码模式为：<br />
$qian = 已知的最小一级问题的答案；<br />
for( $i = 最小一级的下一级； &nbsp;$i &lt;= 最大一级的级次； ++$i）{<br />
&nbsp;&nbsp;&nbsp;&nbsp;$jieguo = 对 $qian 进行一定的计算，通常需要使用到$i;<br />
&nbsp;&nbsp;&nbsp;&nbsp;$qian = $jieguo;<br />
}<br />
echo &nbsp;“结果为：” &nbsp;. &nbsp;$jieguo;<br />
通常，如果一个问题，既能使用递归算计解决，又能使用递推算法解决，则应该使用递推算法。<br />
<br />
<br />
<br />
<br />
<br />
<br />' WHERE `id` = 7 [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000085s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000222s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009863s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009981s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000773s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000848s ]

[ 2016-06-05T20:15:18+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000630s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000848s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000917s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 26  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008206s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008281s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000603s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000676s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001013s ]
INFO: [ app_end ] --END-- [ RunTime:0.001109s ]

[ 2016-06-05T20:15:26+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/26
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000033s ]
INFO: [ app_init ] --END-- [ RunTime:0.000862s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001545s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001673s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0048s ]
SQL: UPDATE `sc_message` SET `title`='请问PHP中如何防止SQL注入和XSS攻击？在后台登录我们为什么要使用到验证码？试写出SQL注入的万能用户名和万能密码？',`content`='<span style=\"line-height:1.5;\">使用addslashes()函数可以防止SQL注入</span><br />
<span style=\"line-height:1.5;\">使用htmlentities()或者htmlspecialchars()函数可以防止XSS攻击</span><br />
<span style=\"line-height:1.5;\">验证码的作用：防止用户向服务器重复提交表单数据，暴力破解，论坛灌水，刷帖</span><br />
<span style=\"line-height:1.5;\">万能用户名：xxx’ or 1#</span><br />
<span style=\"line-height:1.5;\">万能密码： &nbsp;xxx’ or ‘1</span><br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 26 [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000123s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007230s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007307s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000589s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000646s ]

[ 2016-06-05T20:16:05+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000649s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000909s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000993s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008291s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008376s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000744s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000808s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000823s ]
INFO: [ app_end ] --END-- [ RunTime:0.000903s ]

[ 2016-06-05T20:16:13+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000875s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000817s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000910s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='数据库常用的操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0036s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000129s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007647s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007723s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000576s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000633s ]

[ 2016-06-05T20:16:24+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000601s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000999s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001111s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 18  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008346s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008420s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000679s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000743s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000888s ]
INFO: [ app_end ] --END-- [ RunTime:0.000950s ]

[ 2016-06-05T20:16:33+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000701s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000994s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001099s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='mysql数据表的字段类型',`content`='创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充<span>（只有在创建表的时候使用了ZEROFILL才有这个效果）</span>，也就是说 &nbsp;int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围，它还是-2147483648-2147483647，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。' WHERE `id` = 18 [ RunTime:0.0046s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000134s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007713s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007792s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000546s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000606s ]

[ 2016-06-05T20:16:41+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000686s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001013s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001120s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000164s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007936s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008015s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000488s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000548s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000803s ]
INFO: [ app_end ] --END-- [ RunTime:0.000907s ]

[ 2016-06-05T20:16:47+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000800s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000658s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000742s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='mysql数据库常用的操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0035s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007406s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007479s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000483s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000540s ]

[ 2016-06-05T20:16:53+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000594s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000698s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000763s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000083s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000215s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007416s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007512s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000489s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000565s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000987s ]
INFO: [ app_end ] --END-- [ RunTime:0.001100s ]

[ 2016-06-05T20:17:01+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000566s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000663s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000746s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='Mysql数据库常用的操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0039s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000127s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000223s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007591s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007665s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000488s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000545s ]

[ 2016-06-05T20:17:06+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000031s ]
INFO: [ app_init ] --END-- [ RunTime:0.000872s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000970s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001085s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 18  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000158s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007516s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007588s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000568s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000786s ]
INFO: [ app_end ] --END-- [ RunTime:0.000847s ]

[ 2016-06-05T20:17:13+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000485s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000574s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000646s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='Mysql数据表的字段类型',`content`='创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充<span>（只有在创建表的时候使用了ZEROFILL才有这个效果）</span>，也就是说 &nbsp;int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围，它还是-2147483648-2147483647，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。' WHERE `id` = 18 [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000141s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007854s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007942s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000905s ]

[ 2016-06-05T20:17:17+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000035s ]
INFO: [ app_init ] --END-- [ RunTime:0.001062s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001378s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001516s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 17  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000163s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007311s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007393s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000473s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000576s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000748s ]
INFO: [ app_end ] --END-- [ RunTime:0.000827s ]

[ 2016-06-05T20:17:26+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/17
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000552s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000746s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000817s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='MySQL数据库常用的操作命令',`content`='<span style=\"color:#E53333;line-height:1.5;\"><strong>插入数据：</strong></span><br />
<span style=\"line-height:1.5;\"> insert 【into】 表名 【(字段名1，字段名2，......)】 values(值表达式1，值表达式2，.......)，(........)，.....;</span><br />
<span style=\"line-height:1.5;\"> 可以插入多条同一主键的数据???--不可以，这里的id如果设定为主键，就无法插入；</span><br />
<span style=\"line-height:1.5;\"> replace也可以插入一条数据，如果数据已经存在，则更新原来的数据</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>删除数据：</strong></span><br />
<span style=\"line-height:1.5;\"> delete from &nbsp;表名 &nbsp;【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>修改数据：</strong></span><br />
<span style=\"line-height:1.5;\"> update 表名 set &nbsp;字段1=值1，字段2=值2，.......【where 条件】【order by 排序字段】【limit 限定行数】</span><br />
<span style=\"line-height:1.5;\"> 其中的数据值如果有字符串或时间值，需要用单引号；</span><br />
<span style=\"line-height:1.5;\"> 特别注意 where条件的使用！！！</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>客户端cmd操作数据库的常用命令：</strong></span><br />
<span style=\"line-height:1.5;\"> mysql -hlocalhost -uroot -p; &nbsp;登录mysql数据库；</span><br />
<span style=\"line-height:1.5;\"> set names gbk; &nbsp;设定当前数据库的环境编码；客户端cmd默认的是gbk编码；</span><br />
<span style=\"line-height:1.5;\"> show databases; &nbsp;显示所有数据库；</span><br />
<span style=\"line-height:1.5;\"> create database &nbsp;db1 charset utf8; &nbsp; 创建一个数据库db1 &nbsp;设定字符集utf8；</span><br />
<span style=\"line-height:1.5;\"> drop database db1; &nbsp;删除数据库db1；</span><br />
<span style=\"line-height:1.5;\"> use db_name; &nbsp;选择数据库；&nbsp;</span><br />
<span style=\"line-height:1.5;\"> create table news; &nbsp;创建一个数据表news；</span><br />
<span style=\"line-height:1.5;\"> show create database db_name &nbsp;显示数据库的创建语句；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>数据库的备份和恢复：</strong></span><br />
<span style=\"line-height:1.5;\"> 备份：mysqldump &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &gt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 恢复：mysql &nbsp;-h服务器地址 -u登录名 -p &nbsp;数据库名 &lt; 文件名</span><br />
<span style=\"line-height:1.5;\"> 文件名一般写一个完整的路径，eg：f:/db1.sql</span><br />
<span style=\"line-height:1.5;\"> 这两个命令，都是在“没有登录mysql”的时候使用；</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>php操作mysql数据库基本函数：</strong></span><br />
<span style=\"line-height:1.5;\"> $link = mysql_connent(\"数据库服务器地址\",\"用户名\",\"密码\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"set names 网页文件编码名\");</span><br />
<span style=\"line-height:1.5;\"> mysql_query(\"use 数据库名\"); 也可以这样写：mysql_select_db(\"数据库名\");</span><br />
<span style=\"line-height:1.5;\"> 然后，开始正式执行要完成的数据库操作任务：</span><br />
<span style=\"line-height:1.5;\"> $result = mysql_query(\"select / delete / update / insert / desc / show......\");</span><br />
<span style=\"line-height:1.5;\"> 对于mysql_query()这个函数，可以执行“几乎任何sql语句“,</span><br />
<span style=\"line-height:1.5;\"> 通常只有两种情况：</span><br />
<span style=\"line-height:1.5;\"> 情况1：执行没有数据返回的语句：执行结果只有true和false两种情况；</span><br />
<span style=\"line-height:1.5;\"> 情况2：执行有数据返回的语句：成功返回“结果集”，失败返回false；</span><br />
<span style=\"line-height:1.5;\"> 特别注意：</span><br />
<span style=\"line-height:1.5;\"> mysql_query()返回的是资源类型的数据；</span><br />
<span style=\"line-height:1.5;\"> 以下的函数都是从‘结果集’中取出数据，即mysql_query语句执行的结果</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_assoc($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以字段下标返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_row($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，以枚举数组返回</span><br />
<span style=\"line-height:1.5;\"> mysql_fetch_array($result);</span><br />
<span style=\"line-height:1.5;\"> 从结果集中取出\"一行数据\"，并以混合数组形式返回</span><br />
<span style=\"line-height:1.5;\"> $n1 = mysql_num_rows($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据行数</span><br />
<span style=\"line-height:1.5;\"> $n2 = mysql_num_fields($result);</span><br />
<span style=\"line-height:1.5;\"> 获得该结果集的数据列数</span><br />
<span style=\"line-height:1.5;\"> $name = mysql_field_name($result,$i);</span><br />
<span style=\"line-height:1.5;\"> 获得结果集的第 i 个字段的名字！i从0开始算起</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>索引：</strong></span><br />
<span style=\"line-height:1.5;\"> 索引是系统内部自动维护的隐藏的‘数据表’,它的作用是加快数据的读取速度。</span><br />
<span style=\"line-height:1.5;\"> 建立索引的形式为： 索引类型（要建立索引的字段名）</span><br />
<span style=\"line-height:1.5;\"> 索引类型有如下几个：</span><br />
<span style=\"line-height:1.5;\"> 普通索引：形式：key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 唯一索引：形式：unique key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 主键索引：形式：primary key (字段名)</span><br />
<span style=\"line-height:1.5;\"> 全文索引：形式：fulltext (字段名)</span><br />
<span style=\"line-height:1.5;\"> 外键索引：形式：foreign key (字段名) references &nbsp;其它表(对应其它表中的字段名);</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>约束：</strong></span><br />
<span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">约束</span></span><span style=\"line-height:1.5;\"><span style=\"line-height:1.5;\">就是要求数据满足什么条件的一种“规定”。</span><br />
<span style=\"line-height:1.5;\"> 主要有如下几种约束：</span></span><br />
<span style=\"line-height:1.5;\"> 主键约束：形式：primary key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 唯一约束：形式：unique key (字段名)；</span><br />
<span style=\"line-height:1.5;\"> 外键约束：形式：foreign key (字段名) &nbsp;references &nbsp;其它表名(对应其它表名中的字段名);</span><br />
<span style=\"line-height:1.5;\">\"XX约束，它们只是同一件事情的不同说法，同时也称为 XX索引\"</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>表选项列表：</strong></span><br />
<span style=\"line-height:1.5;\"> 表选项就是创建一个表的时候，对该表的整体设定，有如下几个：</span><br />
<span style=\"line-height:1.5;\"> charset = 要使用的字符编码，</span><br />
<span style=\"line-height:1.5;\"> engine = 要使用的存储引擎（也叫表类型），</span><br />
<span style=\"line-height:1.5;\"> auto_increment = 设定当前表的自增长字段的初始值，默认是1</span><br />
<span style=\"line-height:1.5;\"> comment = ‘该表的一些说明文字’</span><br />
<span style=\"line-height:1.5;\"> engine常用的有2种：InnoDB和MyIsam；默认InnoDB</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>基本查询：</strong></span><br />
<span style=\"line-height:1.5;\"> select【all | distinct】 字段或表达式列表 【from字句】【where 字句】【group by 字句】【having 字句】【order by 字句】【limit 字句】;</span><br />
<span style=\"line-height:1.5;\"> concat( )函数是mysql中的系统函数，用于“连接”字符串</span><br />
<span style=\"line-height:1.5;\"> 每个输出项（字符串或表达式）都可以有一个别名&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 形式： XX as 别名；（可以是中文名，不用加引号）</span><br />
<span style=\"line-height:1.5;\"> eg：count (*) &nbsp;as &nbsp;数量</span><br />
<span style=\"line-height:1.5;\"> 注意，实际上表的字段并没有改变，而只是改变了“结果集”的字段名；</span><br />
<span style=\"line-height:1.5;\"> all 和 distinct</span><br />
<span style=\"line-height:1.5;\"> 用于设定select出来的数据，是否消除“重复性”，默认值all（显示所有）；</span><br />
<span style=\"line-height:1.5;\"> distinct 消除重复的行，将多行重复的数据显示为1行</span><br />
<span style=\"line-height:1.5;\"> from 字句</span><br />
<span style=\"line-height:1.5;\"> 表示select部分从中“取得”数据的数据源--其实就是表</span><br />
<span style=\"line-height:1.5;\"> 通常，后面就是表名。</span><br />
<span style=\"line-height:1.5;\"> where 字句</span><br />
<span style=\"line-height:1.5;\"> 就是对from子句中的“数据源”中的数据进行筛选的条件设定，</span><br />
<span style=\"line-height:1.5;\"> 筛选的机制是“一行一行进行判断”；</span><br />
<span style=\"line-height:1.5;\"> is 运算符：空值和布尔值的判断</span><br />
<span style=\"line-height:1.5;\"> XX is null</span><br />
<span style=\"line-height:1.5;\"> XX is not null</span><br />
<span style=\"line-height:1.5;\"> XX is true</span><br />
<span style=\"line-height:1.5;\"> XX is false</span><br />
<span style=\"line-height:1.5;\"> between运算符：范围判断</span><br />
<span style=\"line-height:1.5;\"> XX between 值1 and 值2；</span><br />
<span style=\"line-height:1.5;\"> 其实相当于： &nbsp;XX &gt;=值1 &nbsp;and &nbsp;XX &lt;= 值2；</span><br />
<span style=\"line-height:1.5;\"> in运算符：给定确定数据的范围判断</span><br />
<span style=\"line-height:1.5;\"> XX in (值1，值2，值3，......)</span><br />
<span style=\"line-height:1.5;\"> like运算符：对字符串进行模糊查找</span><br />
<span style=\"line-height:1.5;\"> XX like‘要查找的内容’</span><br />
<span style=\"line-height:1.5;\"> 它依赖与一下两个字符 % 和 _ &nbsp; ( _ 表示一个任意的字符)</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'%联想%\' &nbsp; 找出表中‘联想’这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> &nbsp;\'联想%\' &nbsp; &nbsp;找出以\'联想\'开头的这一行的所有数据行</span><br />
<span style=\"line-height:1.5;\"> group by 字句：分组</span><br />
<span style=\"line-height:1.5;\"> group by 字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"color:#E53333;line-height:1.5;\"><strong>什么叫做分组？</strong></span><br />
<span style=\"line-height:1.5;\"> 分组就是将多行数据，以某种标准（就是指定的字段）来进行“分类”存放</span><br />
<span style=\"line-height:1.5;\"> 特别注意：分组之后的结果，一定要理解为：只有一个一个组了</span><br />
<span style=\"line-height:1.5;\"> 则结果是：在select语句中的“输出（取出）”部分，只应该出现“组的信息”：</span><br />
<span style=\"line-height:1.5;\"> select &nbsp;组信息1， 组信息2， ..... &nbsp;from &nbsp;数据源 &nbsp; group &nbsp;by &nbsp;字段；</span><br />
<span style=\"line-height:1.5;\"> 实际应用中，分组之后：</span><br />
<span style=\"line-height:1.5;\"> 1、分组依据本身的信息，其实就是该分组依据的字段名；</span><br />
<span style=\"line-height:1.5;\"> 2、每一组的“数量”信息：就是用count（*）获得；这个也是内部系统函数！</span><br />
<span style=\"line-height:1.5;\"> 3、原来数据中的“类型字段的聚合信息”，包括如下几个：</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最大值：max(字段名) &nbsp; 原始形式为 &nbsp;max()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;最小值：min(字段名) &nbsp; &nbsp;原始形式为 &nbsp;min()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;平均值：avg(字段名) &nbsp; &nbsp;原始形式为 &nbsp;avg()</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;总和值：sum(字段名) &nbsp; 原始形式为 &nbsp;sum()</span><br />
<span style=\"line-height:1.5;\"> 这4个是内部系统函数！！！</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量 from product group by pinpai;</span><br />
<span style=\"line-height:1.5;\"> 表示每一种品牌的商品数量</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai</span><br />
<span style=\"line-height:1.5;\"> having 子句</span><br />
<span style=\"line-height:1.5;\"> 和where作用一样，由于分组之后限定了范围，可用条件语句比较少</span><br />
<span style=\"line-height:1.5;\"> select pinpai, count(*) as 数量, max(price) as 最高价,min(price) as 最低价,avg(price) as 平均价,sum(price) as 总价, chandi &nbsp;from product group by pinpai having 平均价 &gt; 5000</span><br />
<span style=\"line-height:1.5;\"> 找出平均价大于5000的商品</span><br />
<span style=\"line-height:1.5;\"> having &nbsp;count(*) &gt; 2</span><br />
<span style=\"line-height:1.5;\"> 此时count(*)是独立计算的结果(与select上面那条语句没有关系)：</span><br />
<span style=\"line-height:1.5;\"> order by 字句</span><br />
<span style=\"line-height:1.5;\"> 对前面取得的数据以设定的标准（字段）来进行排序以输出结果。</span><br />
<span style=\"line-height:1.5;\"> order by &nbsp;字段1【desc/asc】，字段2【desc/asc】，........</span><br />
<span style=\"line-height:1.5;\"> (asc，默认值)</span><br />
<span style=\"line-height:1.5;\"> limit 起始行号 &nbsp;</span><br />
<span style=\"line-height:1.5;\"> /*找出价格最高的一件商品*/</span><br />
<span style=\"line-height:1.5;\"> select * from product order by desc limit 0, 1</span><br />
<span style=\"line-height:1.5;\"> 将商品按降序排列，取出一行</span><br />
<span style=\"line-height:1.5;\"> select字段依赖于from?????&nbsp;</span><br />
<span style=\"line-height:1.5;\"> 这是由于要查找的字段是从from中的表中读取(表中必须包含这些字段)</span><br />
<span style=\"line-height:1.5;\"> 完整的select查询语句结构：</span><br />
<span style=\"line-height:1.5;\"> select * from product [where ...] order by &nbsp;protype_id, price desc &nbsp;[having ...] &nbsp;limit 2,2</span><br />' WHERE `id` = 17 [ RunTime:0.0157s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000137s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007485s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007557s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000481s ]

[ 2016-06-05T20:17:31+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000590s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000753s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000818s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 18  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006993s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007067s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000442s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000524s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000996s ]
INFO: [ app_end ] --END-- [ RunTime:0.001102s ]

[ 2016-06-05T20:17:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/18
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000796s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001231s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001347s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='MySQL数据表的字段类型',`content`='创建一张数据表的数据类型：<br />
整数类型：<br />
形式：类型名【(M)】【unsigned】【zerofill】<br />
tinyint:(1) 占用1个字节(8位2进制) &nbsp;&nbsp;<br />
smallint:(2) &nbsp;占用2个字节(16位2进制) &nbsp; &nbsp;<br />
mediumint:(3) &nbsp;占用3个字节(24位2进制) &nbsp;<br />
int(4) &nbsp; 占用4个字节(32位2进制)<br />
bigint:(8) &nbsp;占用8个字节(64位2进制)<br />
unsigned &nbsp; 用于设定该整数为“无符号数”，其实就是没有负数。<br />
int(8)对于整数类型 括号里面的值不影响类型实际可以存储的范围，只是代表显示宽度，当实际内容不到这个宽度的时候在前面用0填充<span>（只有在创建表的时候使用了ZEROFILL才有这个效果）</span>，也就是说 &nbsp;int(4) &nbsp;int(6) &nbsp;int(8) 不会影响它的可存储范围，它还是-2147483648-2147483647，它还是占用4个字节，只是如果在创建表的时候指定这一列用ZEROFILL修饰了，那么取回值得时候如果不够这里指定的位数，会在前面填0<br />
小数类型：<br />
float：单精度浮点型<br />
double：双精度浮点型<br />
decimal(10,3)：定点数，总位数为10，小数位数为3；<br />
字符类型：<br />
varchar() &nbsp;可变长度字符串，最大长度\'65535\'，字符编码不同，存储长度也不同<br />
gbk编码：65535/2 个 &nbsp; &nbsp; &nbsp; utf8编码：65535/3 个<br />
char() &nbsp; 定长字符串，手机号，邮政编码....<br />
如果小于设定长度，不够的会自动补满<br />
enum类型：单选项字符串数据类型，用于存储表单中的‘单选项值’<br />
形式：enum(\"选项1\",\"选项2\",\"选项3\");<br />
共65535个选项,对应数字(1,2,3,4,5,.....)<br />
set类型：多选项字符串数据类型，用于存储表单中的‘多选项值’<br />
形式：set(\"选项1\",\"选项2\",\"选项3\");&nbsp;<br />
最多64个选项，对应的数字(1,2,4,8,16,.....)<br />
text类型：长文本字符类型，可存65535个字符;<br />
其它了解：<br />
binary类型： 定长二进制字符串类型，存储二进制值<br />
varbinary类型：变长二进制字符串类型，存储二进制值<br />
blob类型：二进制字符串类型，存储二进制值，但其用来存储图片，\"其它文件\"。<br />
日期类型：<br />
datetime类型：时间日期类型 &nbsp;\'2015-7-8 10:12:23\' 或now()<br />
date类型：日期类型 \'2015-7-8\'或now()<br />
time类型：时间类型 \'13:45:50\'或now()<br />
year类型：年份类型 \'2015\'<br />
timestamp：时间戳类型：就是指一个时间的“数据值”--本质其实一个数字，类是js中的GetTime()，或php中的Time()，它们都得到一个“整数数字”，这个字段通常不用插入数据；<br />
它的一个重要作用：会自动获得时间戳的数据值---相当于“now()”<br />
时间日期类型通常使用‘单引号’引起来，跟字符串一样！<br />
<br />
字段属性可以有多个：主要如下几个：<br />
auto_increment &nbsp;只用于整数类型，让该字段的值自动增长<br />
primary key &nbsp;用于设定该字段为主键，此时该字段的值就可以‘唯一确定’一行数据<br />
not null &nbsp;用于设定字段是否为空，默认为空<br />
default &nbsp;默认值 &nbsp;用于设定该字段的默认值，如果没有设定是可为空的<br />
comment &nbsp;注释，\'字段说明文字\'<br />
unique key &nbsp;设定该字段是唯一的，也就是不重复的。' WHERE `id` = 18 [ RunTime:0.0025s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000147s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006714s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006785s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000424s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000480s ]

[ 2016-06-05T20:17:44+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/16
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000631s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000722s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000820s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 16  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000156s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007516s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007613s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000419s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000484s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000695s ]
INFO: [ app_end ] --END-- [ RunTime:0.000757s ]

[ 2016-06-05T20:18:02+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/16
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000542s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000679s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000769s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0041s ]
SQL: UPDATE `sc_message` SET `title`='SQL语句中的where 1=1详解',`content`='where 1=1; 这个条件始终为True，在不定数量查询条件情况下，1=1可以很方便的规范语句。<br />
如果用户在多条件查询页面中，不选择任何字段、不输入任何关键词，那么，必将返回表中所有数据；<br />
如果用户在页面中，选择了部分字段并且输入了部分查询关键词，那么，就按用户设置的条件进行查询。<br />
其实，where 1=1的应用，不是什么高级的应用，也不是所谓的智能化的构造，<br />
仅仅只是为了满足多条件查询页面中不确定的各种因素而采用的一种构造一条正确能运行的动态SQL语句的一种方法。<br />
where 1=0; 这个条件始终为false，结果不会返回任何数据，只有表结构，可用于快速建表<br />' WHERE `id` = 16 [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000125s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007065s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007141s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000565s ]

[ 2016-06-05T20:18:17+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000642s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000739s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000850s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 12  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000077s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000195s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007074s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007156s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000428s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000493s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001050s ]
INFO: [ app_end ] --END-- [ RunTime:0.001128s ]

[ 2016-06-05T20:18:23+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/12
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000636s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000784s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000855s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='Javascript中的 void 运算符',`content`='Javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br />
void 操作符用法格式如下：<br />
1. javascript:void (expression)<br />
2. javascript:void expression<br />
expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是可选的，但是写上去是一个好习惯。<br />
你可以使用 void 操作符指定超级链接。表达式会被计算但是不会在当前文档处装入任何内容。<br />
下面的代码创建了一个超级链接，当用户以后不会发生任何事。<br />
当用户链接时，void(0) 计算为0，但 Javascript 上没有任何效果。<br />
<span></span><a href=\"javascript:void(0)\"></a><a href=\"javascript:void(0)\">单此处什么也不会发生</a><!-- a--><br />
<span style=\"color:#E53333;\"><strong>a href= # 与 a href=javascript:void(0) 的区别：</strong></span><br />
<span style=\"color:#E53333;\">#</span>包含了一个位置信息<br />
默认的锚是#top 也就是网页的上端<br />
而javascript:void(0) &nbsp;仅仅表示一个死链接<br />
这就是为什么有的时候页面很长，浏览链接明明是#，但还是跳到了页首<br />
而javascript:void(0) 则不是如此，所以调用脚本的时候最好用void(0)<br />
<br />' WHERE `id` = 12 [ RunTime:0.0035s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007693s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007765s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000430s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000487s ]

[ 2016-06-05T20:20:56+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000048s ]
INFO: [ app_init ] --END-- [ RunTime:0.000684s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000899s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000970s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('MYSQL数据库中唯一索引和主键索引的区别？MYSQL数据库中连接查询的方式有哪几种？写出这几种连接查询方式取数据的结果，并写出完整的连接查询的SQL语句？','<span style=\"line-height:1.5;\">唯一索引和主键索引的区别：唯一索引（UNIQUE）可以保证数据记录的唯一性，我们可以为一张数据表的不同字段设置唯一索引，并且它的值是唯一的，其值可以为空；而主键索引，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字PRIMARY KEY来创建，值不能为空。</span><br />
<span style=\"line-height:1.5;\">MYSQL数据库中连接查询的方式：</span><br />
<span style=\"line-height:1.5;\">内连接：就是将两个表中符合所设定的条件的那些数据取出来的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;【inner】 &nbsp;join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">左（外）连接：就是将两个表的内连接的结果，再加上左边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">Select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;left &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">右（外）连接：就是将两个表的内连接的结果，再加上右边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;right &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">交叉连接：就是将所有数据行都连接起来的结果</span><br />
<span style=\"line-height:1.5;\">Select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;cross &nbsp;join &nbsp;表2</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0035s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000140s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007510s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007595s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000607s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000665s ]

[ 2016-06-05T20:20:58+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000650s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000798s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000862s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000186s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007493s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007571s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000574s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000659s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000809s ]
INFO: [ app_end ] --END-- [ RunTime:0.000871s ]

[ 2016-06-05T20:25:30+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000077s ]
INFO: [ app_init ] --END-- [ RunTime:0.000942s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001052s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001216s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('创建一张商品分类表，并写一个函数实现分类原理？','<span style=\"line-height:1.5;\">create table category (</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">`cat_id` smallint unsigned not null auto_increment comment \'类别Id\',</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">`cat_name` varchar(30) not null comment \'分类名称\',</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">`parent_id` mediumint(8) unsigned not null default \'0\' comment \'上级分类的Id\'</span><br />
<span style=\"line-height:1.5;\">);</span><br />
<span style=\"line-height:1.5;\">这里写一个函数，实现无限分类：</span><br />
<span style=\"line-height:1.5;\">function tree($arr,$pid=0,$level=0){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">static $list = array();</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">foreach($arr as $v){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">if($v[‘parent_id’] == $pid){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">$v[‘level’] = $level;</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">$list[] = $v;</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">tree($arr,$v[‘cat_id’],$level+1);</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">return $list;</span><br />
<span style=\"line-height:1.5;\">}</span><br />') [ RunTime:0.0041s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008804s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008883s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000642s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000701s ]

[ 2016-06-05T20:25:31+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000654s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001054s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001167s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000071s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000173s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009096s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000636s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000705s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000922s ]
INFO: [ app_end ] --END-- [ RunTime:0.001054s ]

[ 2016-06-05T20:27:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/28
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.001429s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000927s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000996s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 28  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007501s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007577s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000664s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000725s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000811s ]
INFO: [ app_end ] --END-- [ RunTime:0.000873s ]

[ 2016-06-05T20:27:32+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000627s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000877s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000948s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0045s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('MYSQL数据库中连接查询的方式有哪几种？写出这几种连接查询方式取数据的结果，并写出完整的连接查询的SQL语句？','<span style=\"line-height:1.5;\">MYSQL数据库中连接查询的方式：</span><br />
<span style=\"line-height:1.5;\">内连接：就是将两个表中符合所设定的条件的那些数据取出来的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;【inner】 &nbsp;join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">左（外）连接：就是将两个表的内连接的结果，再加上左边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">Select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;left &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">右（外）连接：就是将两个表的内连接的结果，再加上右边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;right &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">交叉连接：就是将所有数据行都连接起来的结果</span><br />
<span style=\"line-height:1.5;\">Select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;cross &nbsp;join &nbsp;表2</span>') [ RunTime:0.0958s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000094s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000230s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013544s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013678s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000888s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000997s ]

[ 2016-06-05T20:27:34+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000697s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000848s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000914s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000194s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007223s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007304s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000720s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000780s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000950s ]
INFO: [ app_end ] --END-- [ RunTime:0.001013s ]

[ 2016-06-05T20:27:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/28
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000633s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000855s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000924s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='MYSQL数据库中唯一索引和主键索引的区别？',`content`='<span style=\"line-height:1.5;\">唯一索引和主键索引的区别：唯一索引（UNIQUE）可以保证数据记录的唯一性，我们可以为一张数据表的不同字段设置唯一索引，并且它的值是唯一的，其值可以为空；而主键索引，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字PRIMARY KEY来创建，值不能为空。</span><br />
<br />
<span style=\"line-height:1.5;\"></span>' WHERE `id` = 28 [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000122s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007534s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007610s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000571s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000657s ]

[ 2016-06-05T20:28:25+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/30
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000612s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000797s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000864s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 30  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007366s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007443s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000554s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000615s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000810s ]
INFO: [ app_end ] --END-- [ RunTime:0.000871s ]

[ 2016-06-05T20:28:33+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/30
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000496s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000613s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000692s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='MYSQL数据库中连接查询的方式有哪几种？写出这几种连接查询方式取数据的结果，并写出完整的连接查询的SQL语句？',`content`='<span style=\"line-height:1.5;\">MYSQL数据库中连接查询的方式：</span><br />
<span style=\"line-height:1.5;\">内连接：就是将两个表中符合所设定的条件的那些数据取出来的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;【inner】 &nbsp;join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">左（外）连接：就是将两个表的内连接的结果，再加上左边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;left &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">右（外）连接：就是将两个表的内连接的结果，再加上右边表的不符合内连接所设定的条件的那些数据的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;right &nbsp;【outer】 join &nbsp;表2 &nbsp;on &nbsp;连接条件</span><br />
<span style=\"line-height:1.5;\">交叉连接：就是将所有数据行都连接起来的结果</span><br />
<span style=\"line-height:1.5;\">select &nbsp;* &nbsp;from &nbsp;表1 &nbsp;cross &nbsp;join &nbsp;表2</span>' WHERE `id` = 30 [ RunTime:0.0492s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000095s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000232s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015075s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015281s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000696s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000806s ]

[ 2016-06-05T20:29:50+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000706s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001332s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001508s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 19  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000163s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007747s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007826s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000584s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000644s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000767s ]
INFO: [ app_end ] --END-- [ RunTime:0.000844s ]

[ 2016-06-05T20:29:59+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/19
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000529s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000724s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000803s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0038s ]
SQL: UPDATE `sc_message` SET `title`='session和cookie会话技术总结',`content`='<span style=\"color:#E53333;\">什么是会话控制？</span><br />
出现原因:http是无状态协议的,每次都是不同的服务器请求,无法维护两个请求事务之间的关系.<br />
会话控制:能够在网站中跟踪一个变量,通过对变量的跟踪,就可以使多个请求事物之间建立联系,根据授权和用户身份显示不同的内容,不同页面<br />
COOKIE:是服务器设置在客户端的文本文件,保存客户端的个人信息.<br />
<span style=\"color:#E53333;\">什么是COOKIE？</span><br />
1.cookie是在http协议下,服务器或脚本在客户端保存维护信息的一种方式<br />
2.cookie是web服务器保存在客户端的一个很小的文本文件,保存客户端的信息,提高网页的处理效率,降低服务器负担<br />
3.cookie保存在客户端,通常在浏览器的cookie临时文件夹中,可以手动的删除.如果cookie太多超过系统的允许范围,系统将自动删除<br />
<span style=\"color:#E53333;\">cookie的工作原理：</span><br />
1.当用户访问基于php技术的网站时,在php中可以使用setcookie()函数生成一个cookie,系统经过处理,将cookie发送到客户端并保存在C:\\Documents and Setting\\用户名\\Cookies目录下<br />
2.cookie是http标头的一部分,在它之前不能有任何输出，空格和换行都不可以<br />
3.当客户端再次访问网站时,浏览器会自动把cookie目录下与该站点对应的cookie信息发送到服务器,服务器将自动把客户端传来的cookie转化成php的变量,.php5中存放在$_COOKIE全局数据中<br />
4.接受和处理cookie.使用$_COOKIE获取<br />
<span style=\"color:#E53333;\">COOKIE的参数设定：</span><br />
Setcookie(键，值，有效期=0，有效路径=‘’，有效域名=‘’，是否仅安全连接传输=false，是否HTTPonly=false)<br />
1、 键：设置cookie的名字，数据是在响应阶段被传输到浏览器端的<br />
2、 值：设置cookie的值<br />
Tip：增加，修改，删除，都使用该函数setcookie()完成！<br />
3、 有效期：默认浏览器关闭（会话周期结束）时，COOKIE失效。也成之为：会话COOKIE（临时COOKIE）<br />
允许设置COOKIE的有效期，语法上，使用setcookie的第三个参数进行设置，通过unix时间戳<br />
（从1970年到现在的秒数，PHP函数time()来获取当前时间戳。）来设置COOKIE的有效期。<br />
当用户下次访问您的站点的时候，浏览器会先检查您站点的所有cookie,如果某个cookie已经过期，浏览器不会把这个cookie随页面请求一起发送给服务器，而是删除这个已经过期的cookie。时间点是从cookie被创建时候当前时间开始计算。<br />
谁来判断该COOKIE是否过期？(是否在有效期内)<br />
浏览器 &nbsp;OR &nbsp;服务器？<br />
是浏览器判断该COOKIE是否过期的。<br />
在设置COOKIE时，同时将COOKIE的有效期，告知（传输）到浏览器端。<br />
<span style=\"color:#E53333;\">如何删除COOKIE：</span><br />
Time()-1:	删除COOKIE通用做法，强制设为过期。<br />
注意: 当cookie被删除时,它的值在当前页面仍然有效.如果要把cookie设置成在浏览器关闭后就失效.那么可以把expiretime的值设为0,或者不设此值<br />
4、 path有效路径（使用较少）：默认仅在当前目录及其后代目录有效。使用空字符串表示<br />
默认值！通常如果需要设置，就是将COOKIE设置为 / 根目录下有效，表示整站有效。<br />
5、 有效域（使用频率较高）：某个域名下设置的COOKIE，仅仅可以在当前域名下所使用<br />
COOKIE，支持在一级域名内（所有的二级域名之间）进行COOKIE数据共享。<br />
6、 secure是否仅安全连接（https）传输：<br />
告知浏览器，我们所设置的cookie，是否仅仅在https这个协议下，才会被发送到浏览器端！ 用 参数 第六个完成设置：默认值false，表示都可以（http和https）。<br />
7、 HTTPONLY：<br />
所设置好的COOKIE，是否仅仅在http请求时所使用。<br />
COOKIE还可以通过浏览器端的脚本（javascript）获取到。<br />
function getCookie(){<br />
&nbsp; &nbsp; &nbsp;alert(document.cookie);<br />
}<br />
如果需要禁止浏览器端其他脚本使用该cookie，则使用第七个参数即可，默认false，设置为true表示除了http请求，其它地方（javascript）不可以用<br />
<span style=\"color:#E53333;\">COOKIE的有效期：</span><br />
设置方法如下：<br />
setcookie(\"cookie_name\", \"abcd\", time()+3600);<br />
解释：这个cookie有3600秒的有效期；<br />
cookie有效期在退出作用域那一刻开始生效；<br />
重新访问又有3600秒，设置cookie时，不会考虑之前的是否设置cookie和cookie是否有效，可以认为是强制设置。<br />
如果关闭浏览器重新打开又重新算（当然这个要在浏览器端设置了关闭浏览器立即失效的开关）。cookie其实就是从打开页面产生cookie开始算起，如果你打开页面产生cookie的时间有1800秒了，假如设置的3600秒失效，再次刷新页面（不重新设置cookie的情况下）就剩1800秒了。<br />
PHP手册上关于setcookie函数的expire参数有这样一个解释：<br />
If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).&nbsp;<br />
如果设为0 或者忽略该参数, cookie将在session结束时(或关闭浏览器时)过期<br />
<span style=\"color:#E53333;\">COOKIE的注意事项：</span><br />
1.setcookie()之前不能有任何的输出,空白和空格也不行(Setcookie()为头信息设置)<br />
2.setcookie()之后在当前页面echo时不会输出,必须刷新或到下一个页面才会输出<br />
3.不同浏览对cookie的处理不同,客户端可以禁用cookie,而且对浏览器的数量有限制.一个浏览器可以最多创建300个cookie,每个不能超过4kb,每个站点最多设置20个<br />
4.避免过度依赖cookie,因为客户端会禁止掉cookie<br />
<span style=\"color:#E53333;\">什么是SESSION？</span><br />
1.session从用户访问页面开始,到断开与网站的连接为止,形成一个会话的生命周期.在会话期间,分配客户唯一的一个sessionID,用来标识当前用户,与其他用户进行区分<br />
2.session会话时,session会分别保存在客户端和服务器端的两个文件,对于客户端:使用临时的cookie保存(cookie的名称为PHPSESSID)或者通过url字符串的形式传递.服务器端也以文本的形式保存在指定的session目录中<br />
3.session通过id接受每一次访问的请求,从而识别当前用户,跟踪和保持用户的具体资料,以及session变量,可在session中存储数字或文字资料.比如session_name.这些信息都保存在服务器端<br />
4.sessionID可以作为会话信息保存到数据库中,进行session持久化.这样可以跟踪用户的登陆次数,在线与否,在线时间<br />
<span style=\"color:#E53333;\">如何销毁SESSION?</span><br />
1、unset($_SESSION[\'XXX\']):用于删除单个session变量<br />
注意:不要使用unset($_SESSION),此函数不可用,会删除全局的$_SESSION销毁<br />
2、$_SESSION=array():删除多个session变量<br />
3、销毁session_destroy():结束当前的会话,并清空会话中的所有资源.该函数不会unset(释放)和当前session相关的全局变量,也不会删除客户端的session对应的cookie<br />
4、清空session值<br />
session_start();<br />
$_SESSION=array();<br />
<span style=\"color:#E53333;\">SESSION的过期时间：</span><br />
session的过期时间由两方面决定的：<br />
1.存储在客户端的$_COOKIE[\'PHPSESSID\']的过期时间（默认cookie名称为PHPSESSID,可通过php.ini中的session.name修改。）<br />
2.存储在服务器端的相对应的session文件（session文件名和上述cookie的值一一对应），默认为1440秒，即24分钟&nbsp;<br />
两者的关系： 当执行session_start()的时候，其实是做了两件事：<br />
一、检查客户端发送过来的的所有cookie（当然也包括$_COOKIE[\'PHPSESSID\'], 如果有的话），根据$_COOKIE[\'PHPSESSID\']的值（这是由apache产生的随机字符串，如0lkbd2se458r600m2m7o1r4ic5）来访问 相对应的 session文件，这两者是一 一对应的关系。当然文件里面的值是经过序列化的。<br />
二、如果客户端没有传来$_COOKIE[\'PHPSESSID\']，就会有服务端产生一个随机的$_COOKIE[\'PHPSESSID\']并存储在客户端。<br />
对session_start()的理解：<br />
1、在session_start()开启之后，当session数据对应的PHPSESSIONID的cookie已经超时，无法传回到服务器端，此时由于session开启，系统会自动再重新分配一个SESSIONID标识，SESSIONID默认是存储于浏览器端。<br />
2、同时在session_start开启之后，如果之前有存储过session，并且没有过期，则会获取到已经存好的session，如果没有存储过session，则session机制默认也会自动分配一个SESSIONID给浏览器，同时在服务器端生成对应的文件，此时的session是一个过期的会话<br />
<span style=\"color:#E53333;\">如何设置 session数据的属性？</span><br />
设置COOKIE中session-ID这个COOKIE变量属性即可！<br />
方案一，配置 php.ini<br />
方案二，在脚本中，开启session之前使用函数进行配置<br />
ini_set(\'session.cookie_lifetime\',\'3600\');<br />
ini_set(\'sesssion.cookie_domain\',\' .baidu.com\');<br />
@session_start();<br />
采用下面的函数进行设置：<br />
Session_set_cookie_params(有效期，有效路径，有效域，是否仅安全连接传输，是否HTTPONLY)<br />
实际环境中，很少改session的有效期。经常改有效域名。<br />
session_set_cookie_params(0,\'/\', \'.baidu.com\');<br />
<span style=\"color:#E53333;\">Session数据区操作：</span><br />
重写session的存储机制：<br />
Session数据区默认以 文件的形式存储与服务器操作系统临时目录中！<br />
当 session数据区过多时，文件形式的存储，操作速度变慢，磁盘的读写开销很大<br />
重写session入数据库：<br />
共6个函数<br />
Session_set_save_handler(开始函数，结束函数，读函数，写函数，删除函数，GC函数);<br />
告知session机制，在需要读写时，使用用户自定义的读写函数完成！<br />
这个函数仅仅是设置告知，不是调用，以上6个函数，在session机制运行到某个时间点时，<br />
才会被调用！<br />
垃圾回收操作： sessGC()<br />
垃圾：服务器上过时的session数据区。<br />
<span style=\"color:#E53333;\">垃圾如何判定？</span><br />
如果一个session数据区已经超过多久没有使用（最后一次写操作）了，就是被视为垃圾数据。<br />
该时间临界点：默认1440s。可以被配置：session.gc_maxlifetime = 1440<br />
判断过期条件：Last_write &lt; 当前时间-1440&nbsp;<br />
<span style=\"color:#E53333;\">垃圾如何删除？</span><br />
在 session_start()过程中，开启session机制过程中：有几率地执行 垃圾回收操作。<br />
一旦执行，就会删除所有的过期的垃圾数据区。<br />
默认的概率为1/1000。<br />
可以设置该几率：<br />
可能性：Session.gc_probability<br />
基数（除数）：Session.gc_divisor<br />
建议在脚本周期调整，使用函数ini_set(),在开启session机制前完成<br />
实现 sessGC()：PHP的session机制将 最大有效期作为参数，传递过来！<br />
语法细节：<br />
要注意先设置再开启session机制<br />
PHP配置项：session.save_handler改为 user： 表示用户自定义！<br />
<span style=\"color:#E53333;\">会话技术总结：</span><br />
Session.save_handler	存储处理器： files|user<br />
Session.save_path	存储地址。<br />
Session.cookie_XXX	（lifetime，path，domain，secure，httponly）存储session-ID这个COOKIE变量的属性<br />
Session.gc_maxlifetime<br />
Session.gc_probability<br />
Session.gc_divisor<br />
<span style=\"color:#E53333;\">Session，COOKIE联系和区别？</span><br />
联系：都是会话技术。<br />
Session基于COOKIE，session-ID存储于COOKIE中！<br />
区别：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cookie &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session<br />
存储位置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器端	 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 服务器端<br />
安全性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;低 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高<br />
大小限制&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;有 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没有<br />
数据类型&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除资源外的其它全部<br />
有效期使用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;长时间存 &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;几乎不做持久化<br />
<span style=\"color:#E53333;\">Session如何持久化？[理论]</span><br />
1、Session-ID要持久化：<br />
2、session_set_cookie_params(3600);<br />
服务器session数据区有效期修改：ini_set(‘session.gc_maxlifetime’, 3600);<br />
浏览器禁用COOKIE，session是否可用？[理论]<br />
COOKIE被禁用，session-Id不能存储和传输。因此不可用！<br />
理论上的解决方案：<br />
通过 URL， 或者 POST数据数据向服务器端，每次传输session-ID！<br />
例如下面的配置：php.ini<br />
Session是否仅仅是用COOKIE完成传输session-ID：<br />
session.use_only_cookie = 1 &nbsp;开启（在session_start之前）<br />
是否通过其他方式自动传输session-ID：<br />
session.use_trans_sid = 0 &nbsp;开启<br />
然后通过表单的隐藏域向服务器端，每次传输session-ID！即可<br />
<span style=\"color:#E53333;\">session和cookie的额外的一些理解：</span><br />
1. 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。<br />
2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。<br />
3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。<br />
所以，总结一下：<br />
Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；<br />
Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br />' WHERE `id` = 19 [ RunTime:0.0028s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007325s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007434s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000583s ]

[ 2016-06-05T20:42:03+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000696s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000813s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000895s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000136s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006708s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006781s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000523s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000580s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000718s ]
INFO: [ app_end ] --END-- [ RunTime:0.000780s ]

[ 2016-06-05T20:51:49+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000522s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000746s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000813s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000128s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006842s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006924s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000466s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000524s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000730s ]
INFO: [ app_end ] --END-- [ RunTime:0.000791s ]

[ 2016-06-05T20:52:13+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000016s ]
INFO: [ app_init ] --END-- [ RunTime:0.000530s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001083s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001202s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('说出下面这些这些协议的全称和中文解释','<p style=\"font-family:Simsun;font-size:medium;\">
	SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	POP3 (Post Office Protocol 3) 邮局协议第3 版
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	HTTP (Hypertext Transfer Protocol) 超文本传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	FTP (File Transfer Protocol）文件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	DNS (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议
</p>') [ RunTime:0.0023s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000140s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007124s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007217s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000563s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000621s ]

[ 2016-06-05T20:52:15+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000488s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000756s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000823s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000149s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006676s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006761s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000415s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000474s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000788s ]
INFO: [ app_end ] --END-- [ RunTime:0.000849s ]

[ 2016-06-05T20:52:22+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000731s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000812s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000879s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000128s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006210s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006278s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000505s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000562s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000734s ]
INFO: [ app_end ] --END-- [ RunTime:0.000797s ]

[ 2016-06-05T20:52:39+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000658s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000746s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000826s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0031s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 31  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000096s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000189s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008064s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008143s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000614s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000673s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000839s ]
INFO: [ app_end ] --END-- [ RunTime:0.000900s ]

[ 2016-06-05T20:52:57+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000711s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000839s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000945s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='说出下面这些协议的全称和中文解释',`content`='<p style=\"font-family:Simsun;font-size:medium;\">
	SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	POP3 (Post Office Protocol 3) 邮局协议第3 版
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	HTTP (Hypertext Transfer Protocol) 超文本传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	FTP (File Transfer Protocol）文件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	DNS (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议
</p>' WHERE `id` = 31 [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000138s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006769s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006846s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000478s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000535s ]

[ 2016-06-05T20:53:16+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000620s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001623s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001723s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0032s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 31  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000082s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000189s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007409s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007490s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000547s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000608s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000710s ]
INFO: [ app_end ] --END-- [ RunTime:0.000771s ]

[ 2016-06-05T20:53:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/31
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000747s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000903s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001025s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: UPDATE `sc_message` SET `title`='说说下面这些协议的全称和中文解释',`content`='<p style=\"font-family:Simsun;font-size:medium;\">
	SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	POP3 (Post Office Protocol 3) 邮局协议第3 版
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	HTTP (Hypertext Transfer Protocol) 超文本传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	FTP (File Transfer Protocol）文件传输协议
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	DNS (Domain Name System and Domain Name Service protocol) 域名系统（服务）协议
</p>' WHERE `id` = 31 [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006936s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007016s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000481s ]

[ 2016-06-05T20:56:27+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000617s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000780s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000868s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('写一个函数，尽可能高效的从一个标准url 里取出文件的扩展名','<p style=\"font-family:Simsun;font-size:medium;\">
	答案1:
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr = parse_url($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$file = basename($arr[\'path\']);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ext = explode(“.”,$file);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $ext[1];
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	}
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	<br />
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	答案2:
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url) {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url = basename($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$pos1 = strpos($url,”.”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$pos2 = strpos($url,”?”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(strstr($url,”?”)){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return substr($url,$pos1 + 1,$pos2 – $pos1– 1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return substr($url,$pos1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	}
</p>
<div>
	<br />
</div>') [ RunTime:0.0029s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000133s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007179s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007327s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000508s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000565s ]

[ 2016-06-05T20:56:28+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000090s ]
INFO: [ app_init ] --END-- [ RunTime:0.001030s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001048s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001144s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000086s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000222s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007949s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008071s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000565s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000643s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000824s ]
INFO: [ app_end ] --END-- [ RunTime:0.000887s ]

[ 2016-06-05T20:56:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/32
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000878s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001099s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001177s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0031s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 32  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000067s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000201s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007679s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007767s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000606s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000665s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000761s ]
INFO: [ app_end ] --END-- [ RunTime:0.000827s ]

[ 2016-06-05T20:56:52+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/32
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000578s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000784s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000856s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='写一个函数，尽可能高效的从一个标准url 里取出文件的扩展名',`content`='<p style=\"font-family:Simsun;font-size:medium;\">
	答案1:
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr = parse_url($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$file = basename($arr[\'path\']);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ext = explode(“.”,$file);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $ext[1];
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	}
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	<span style=\"line-height:1.5;\">答案2:</span>
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url) {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url = basename($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$pos1 = strpos($url,”.”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$pos2 = strpos($url,”?”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(strstr($url,”?”)){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return substr($url,$pos1 + 1,$pos2 – $pos1– 1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return substr($url,$pos1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	}
</p>
<div>
	<br />
</div>' WHERE `id` = 32 [ RunTime:0.0571s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000167s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000335s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016931s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017132s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001103s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001235s ]

[ 2016-06-05T20:57:09+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/32
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000749s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000920s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000986s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 32  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000151s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008131s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008267s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000771s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000843s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000845s ]
INFO: [ app_end ] --END-- [ RunTime:0.000926s ]

[ 2016-06-05T20:58:45+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/32
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000748s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000937s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001028s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: UPDATE `sc_message` SET `title`='写一个函数，尽可能高效的从一个标准url 里取出文件的扩展名',`content`='<p style=\"font-family:Simsun;font-size:medium;\">
	答案1:
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$arr = parse_url($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$file = basename($arr[\'path\']);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$ext = explode(“.”,$file);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;return $ext[1];
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	}
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	<span style=\"line-height:1.5;\">答案2:</span> 
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	function getExt($url) {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$url = basename($url);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$pos1 = strpos($url,”.”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;$pos2 = strpos($url,”?”);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;if(strstr($url,”?”)){
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return substr($url,$pos1 + 1,$pos2 – $pos1– 1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;} else {
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return substr($url,$pos1);
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span>
</p>
<p style=\"font-family:Simsun;font-size:medium;\">
	<span></span><span style=\"line-height:1.5;\">}</span>
</p>
<div>
	<br />
</div>' WHERE `id` = 32 [ RunTime:0.2804s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000100s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000249s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016070s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016209s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001004s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001122s ]

[ 2016-06-05T21:04:44+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000711s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000977s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001047s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('$_SERVER全局变量中各下标代表的含义','<span style=\"line-height:1.5;\">\'SERVER_ADDR\' 	当前运行脚本所在的服务器的 IP 地址</span><br />
<span style=\"line-height:1.5;\">\'SERVER_NAME\' 	当前运行脚本所在的服务器的主机名</span><br />
<span style=\"line-height:1.5;\">\'QUERY_STRING\' 	query string（查询字符串）</span><br />
<span style=\"line-height:1.5;\">\'DOCUMENT_ROOT\'	当前运行脚本所在的文档根目录</span><br />
<span style=\"line-height:1.5;\">\'HTTP_HOST\'	当前请求头中 Host: 项的内容</span><br />
<span style=\"line-height:1.5;\">\'HTTP_REFERER\'	引导用户代理到当前页的前一页的地址（如果存在）</span><br />
<span style=\"line-height:1.5;\">\'REMOTE_ADDR\'	浏览当前页面的用户的 IP 地址</span><br />
<span style=\"line-height:1.5;\">\'REMOTE_HOST\'	浏览当前页面的用户的主机名</span><br />
<span style=\"line-height:1.5;\">\'PHP_SELF\'	当前执行脚本的文件名</span><br />
<span style=\"line-height:1.5;\">\'REQUEST_URI\'	URI 用来指定要访问的页面</span><br />') [ RunTime:0.0952s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000101s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000252s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017700s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017857s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001153s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001275s ]

[ 2016-06-05T21:04:45+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000841s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001092s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001184s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000081s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000200s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.009798s ]
INFO: [ view_parse ] --END-- [ RunTime:0.009898s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000819s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000902s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001140s ]
INFO: [ app_end ] --END-- [ RunTime:0.001227s ]

[ 2016-06-05T21:05:06+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/33
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000588s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000781s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000847s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 33  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000157s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008008s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008084s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000624s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000684s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000845s ]
INFO: [ app_end ] --END-- [ RunTime:0.000906s ]

[ 2016-06-05T21:05:13+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/33
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000027s ]
INFO: [ app_init ] --END-- [ RunTime:0.000662s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000841s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000915s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='$_SERVER超全局变量中各下标代表的含义',`content`='<span style=\"line-height:1.5;\">\'SERVER_ADDR\' 	当前运行脚本所在的服务器的 IP 地址</span><br />
<span style=\"line-height:1.5;\">\'SERVER_NAME\' 	当前运行脚本所在的服务器的主机名</span><br />
<span style=\"line-height:1.5;\">\'QUERY_STRING\' 	query string（查询字符串）</span><br />
<span style=\"line-height:1.5;\">\'DOCUMENT_ROOT\'	当前运行脚本所在的文档根目录</span><br />
<span style=\"line-height:1.5;\">\'HTTP_HOST\'	当前请求头中 Host: 项的内容</span><br />
<span style=\"line-height:1.5;\">\'HTTP_REFERER\'	引导用户代理到当前页的前一页的地址（如果存在）</span><br />
<span style=\"line-height:1.5;\">\'REMOTE_ADDR\'	浏览当前页面的用户的 IP 地址</span><br />
<span style=\"line-height:1.5;\">\'REMOTE_HOST\'	浏览当前页面的用户的主机名</span><br />
<span style=\"line-height:1.5;\">\'PHP_SELF\'	当前执行脚本的文件名</span><br />
<span style=\"line-height:1.5;\">\'REQUEST_URI\'	URI 用来指定要访问的页面</span><br />' WHERE `id` = 33 [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000145s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007991s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008087s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000592s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000660s ]

[ 2016-06-05T21:07:00+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000704s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000969s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001039s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('写5个函数来获取一个全路径的文件的扩展名','<span style=\"line-height:1.5;\">$path = str_replace(\'//\',\'/\',__FILE__);</span><br />
<span style=\"line-height:1.5;\">function ext_name1($path){</span><br />
<span style=\"line-height:1.5;\"> return strrchr($path,\'.\');</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name2($path){</span><br />
<span style=\"line-height:1.5;\"> return substr($path,strrpos($path,\'.\'));</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name3($path){</span><br />
<span style=\"line-height:1.5;\"> $path_parts = pathinfo($path);</span><br />
<span style=\"line-height:1.5;\"> return $path_parts[\'extension\'];</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name4($path){</span><br />
<span style=\"line-height:1.5;\"> $arr = explode(\'.\',$path);</span><br />
<span style=\"line-height:1.5;\"> return $arr[count($arr) - 1];</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name5($path){</span><br />
<span style=\"line-height:1.5;\"> return strrev(substr(strrev($file_name), 0, strpos(strrev($file_name), \'.\')));</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<div>
	<br />
</div>') [ RunTime:0.0022s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000146s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007883s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007957s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000596s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000655s ]

[ 2016-06-05T21:07:01+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000890s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000813s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000879s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000146s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007861s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007934s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000619s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000677s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000850s ]
INFO: [ app_end ] --END-- [ RunTime:0.000911s ]

[ 2016-06-05T21:07:45+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/34
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000646s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000794s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000862s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 34  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008823s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008898s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000679s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000738s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000872s ]
INFO: [ app_end ] --END-- [ RunTime:0.000932s ]

[ 2016-06-05T21:08:03+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/34
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000526s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000933s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001034s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='写5个函数来获取一个全路径的文件的扩展名',`content`='<span style=\"line-height:1.5;\">$path = str_replace(\'//\',\'/\',__FILE__);</span><br />
<span style=\"line-height:1.5;\">function ext_name1($path){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;return strrchr($path,\'.\');</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name2($path){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;return substr($path,strrpos($path,\'.\'));</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name3($path){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;$path_parts = pathinfo($path);</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;return $path_parts[\'extension\'];</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name4($path){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;$arr = explode(\'.\',$path);</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;return $arr[count($arr) - 1];</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">function ext_name5($path){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;return strrev(substr(strrev($file_name), 0, strpos(strrev($file_name), \'.\')));</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<div>
	<br />
</div>' WHERE `id` = 34 [ RunTime:0.0495s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000083s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000213s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013204s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013337s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000842s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000938s ]

[ 2016-06-05T21:11:12+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000614s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001150s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001301s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('如何使用smarty在静态页面中输出if判断','smarty模版if判断实例:<br />
{if $code == 1}<br />
&lt;tr&gt;<br />
&nbsp; &nbsp; &nbsp;&lt;td&gt;条件成立&lt;/td&gt;<br />
&lt;/tr&gt;<br />
{else}<br />
&lt;tr&gt;<br />
&nbsp; &nbsp; &nbsp;&lt;td&gt;条件不成立&lt;/td&gt;<br />
&lt;/tr&gt;<br />
{/if}<br />
&lt;?php<br />
require \'libs/Smarty.class.php\';<br />
$smarty = new Smarty;<br />
$code = 1;<br />
$smarty-&gt;assign(\"code\",$code);<br />
$smarty-&gt;display(\'test.html\');<br />
<div>
	<br />
</div>') [ RunTime:0.2448s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000308s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017105s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017247s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001159s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001367s ]

[ 2016-06-05T21:11:13+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000913s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001057s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001147s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000057s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000134s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007257s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007357s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000658s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000716s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000901s ]
INFO: [ app_end ] --END-- [ RunTime:0.000963s ]

[ 2016-06-05T21:11:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000528s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000911s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000985s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 35  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000138s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006988s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007080s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000581s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000644s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000954s ]
INFO: [ app_end ] --END-- [ RunTime:0.001021s ]

[ 2016-06-05T21:12:20+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000663s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000804s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000870s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='如何使用smarty在静态页面中输出if判断',`content`='<span style=\"line-height:1.5;\">smarty模版if判断实例:</span><br />
<span style=\"line-height:1.5;\"> {if $code == 1}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件成立</span><br />
<span style=\"line-height:1.5;\"> {else}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件不成立</span><br />
<span style=\"line-height:1.5;\"> {/if}</span><br />
<!--?php<br /--><span style=\"line-height:1.5;\"> require \'libs/Smarty.class.php\';</span><br />
<span style=\"line-height:1.5;\"> $smarty = new Smarty;</span><br />
<span style=\"line-height:1.5;\"> $code = 1;</span><br />
<span style=\"line-height:1.5;\"> $smarty-&gt;assign(\"code\",$code);</span><br />
<span style=\"line-height:1.5;\"> $smarty-&gt;display(\'test.html\');</span><br />
<div>
	<br />
</div>' WHERE `id` = 35 [ RunTime:0.0133s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007732s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007843s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000603s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000660s ]

[ 2016-06-05T21:12:46+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000025s ]
INFO: [ app_init ] --END-- [ RunTime:0.000717s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000818s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000909s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 35  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007720s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007848s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000722s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000794s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000846s ]
INFO: [ app_end ] --END-- [ RunTime:0.000907s ]

[ 2016-06-05T21:13:35+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000714s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000840s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000908s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='如何使用smarty在静态页面中输出if判断',`content`='<span style=\"line-height:1.5;\">smarty模版if判断实例:</span><br />
<span style=\"line-height:1.5;\"> {if $code == 1}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件成立</span><br />
<span style=\"line-height:1.5;\"> {else}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件不成立</span><br />
<p>
	<span style=\"line-height:1.5;\">{/if}</span>
</p>
<p>
	<span style=\"line-height:1.5;\">&lt;?php</span>
</p>
<!--?php<br /--><span style=\"line-height:1.5;\"> require \'libs/Smarty.class.php\';</span><br />
<span style=\"line-height:1.5;\"> $smarty = new Smarty;</span><br />
<span style=\"line-height:1.5;\"> $code = 1;</span><br />
<span style=\"line-height:1.5;\"> $smarty-&gt;assign(\"code\",$code);</span><br />
<span style=\"line-height:1.5;\"> $smarty-&gt;display(\'test.html\');</span><br />
<div>
	<br />
</div>' WHERE `id` = 35 [ RunTime:0.0498s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000107s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000267s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.012361s ]
INFO: [ view_parse ] --END-- [ RunTime:0.012485s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001221s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001354s ]

[ 2016-06-05T21:14:01+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000593s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000822s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000889s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 35  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000152s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008517s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008606s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000688s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000748s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000948s ]
INFO: [ app_end ] --END-- [ RunTime:0.001009s ]

[ 2016-06-05T21:14:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/35
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000553s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000878s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000952s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='如何使用smarty在静态页面中输出if判断',`content`='<span style=\"line-height:1.5;\">smarty模版if判断实例:</span><br />
<span style=\"line-height:1.5;\"> {if $code == 1}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件成立</span><br />
<span style=\"line-height:1.5;\"> {else}</span><br />
<span style=\"line-height:1.5;\"> &nbsp; &nbsp; &nbsp;条件不成立</span><br />
<p>
	<span style=\"line-height:1.5;\">{/if}</span>
</p>
<p>
	<span style=\"line-height:1.5;\"><br />
&lt;?php<br />
require \'libs/Smarty.class.php\';<br />
$smarty = new Smarty;<br />
$code = 1;<br />
$smarty-&gt;assign(\"code\",$code);<br />
$smarty-&gt;display(\'test.html\');<br />
<br />
</span>
</p>' WHERE `id` = 35 [ RunTime:0.0534s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000112s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000329s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017744s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017893s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001229s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001397s ]

[ 2016-06-05T21:15:45+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000687s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001154s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001231s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('PHP程序如何调试错误？','<span style=\"line-height:1.5;\">1.开发环境：需要打开报错，在php.ini中配置display_error=On</span><br />
<span style=\"line-height:1.5;\">2.生产环境：不能直接将错误输出，而是记录日志，在php.ini中配置</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;display_error = Off</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;log_error = On</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;error_log = /path/to/php_error.log</span><br />
<span style=\"line-height:1.5;\">3.少用错误控制运算符@</span><br />
<span style=\"line-height:1.5;\">4.在框架中：$this-&gt;error($model-&gt;getErroe());获取错误信息</span><br />
<span style=\"line-height:1.5;\">5.打开firebug查看错误请求</span><br />
<span style=\"line-height:1.5;\">6.业务逻辑错误：</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;阅读代码片段找错，检查业务逻辑排错</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;复杂的业务逻辑要通过记录运行日志来找错</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp;dump();die;通过打印一些变量信息来检查变量的值是否正确来找错</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0035s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007593s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007671s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000722s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000804s ]

[ 2016-06-05T21:15:46+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000751s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000856s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000923s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000135s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007010s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007093s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000630s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000689s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000849s ]
INFO: [ app_end ] --END-- [ RunTime:0.000945s ]

[ 2016-06-05T21:18:20+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000583s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000876s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000955s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('ajax如何进行跨域请求','<span style=\"line-height:1.5;\">ajax只能取当前域名的数据，不能到其它域名下的数据</span><br />
<span style=\"line-height:1.5;\">ajax跨域请求的两种解决方案：</span><br />
<span style=\"line-height:1.5;\">1、使用PHP请求代理</span><br />
<span style=\"line-height:1.5;\">服务器访问客户端，客户端返回js代码，js需要ajax请求另一个网站，那么就让ajax先请求自己的服务器 a.php ,通过php请求第三方的网站，使用 file_get_contents获取到请求的数据然后返回给js</span><br />
<span style=\"line-height:1.5;\">2、jsonp格式：</span><br />
<span style=\"line-height:1.5;\">jsonp限制：只能发GET请求</span><br />
<span style=\"line-height:1.5;\">A. 接口服务器端 必须要把要返回的数据放到一个函数中【函数名先约定好】</span><br />
<span style=\"line-height:1.5;\">$str = json_encode($arr);</span><br />
<span style=\"line-height:1.5;\">echo \"abc($str)\";</span><br />
<span style=\"line-height:1.5;\">B. 客户端 JS在请求时这样写：</span><br />
<span style=\"line-height:1.5;\">&nbsp;&lt;script&gt;</span><br />
<span style=\"line-height:1.5;\">function abc(data){</span><br />
<span style=\"line-height:1.5;\"> &nbsp;&nbsp;&nbsp;&nbsp;alert(data.name + data.age);</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">&lt;/script&gt;</span><br />
<span style=\"line-height:1.5;\">&lt;script src=\"http://www.jxshop.com/bcd.php\"&gt;&lt;/script&gt;</span><br />
<div>
	<br />
</div>') [ RunTime:0.0026s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000155s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007918s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007994s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000521s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000579s ]

[ 2016-06-05T21:18:21+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000747s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000904s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000973s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000145s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007675s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007746s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000680s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000736s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000862s ]
INFO: [ app_end ] --END-- [ RunTime:0.000925s ]

[ 2016-06-05T21:18:46+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/37
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000702s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000943s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001123s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 37  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000134s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007231s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007306s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000637s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000807s ]
INFO: [ app_end ] --END-- [ RunTime:0.000870s ]

[ 2016-06-05T21:19:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/37
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000528s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000745s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000822s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='ajax如何进行跨域请求',`content`='<span style=\"line-height:1.5;\">ajax只能取当前域名的数据，不能到其它域名下的数据</span><br />
<span style=\"line-height:1.5;\">ajax跨域请求的两种解决方案：</span><br />
<span style=\"line-height:1.5;\">1、使用PHP请求代理</span><br />
<span style=\"line-height:1.5;\">服务器访问客户端，客户端返回js代码，js需要ajax请求另一个网站，那么就让ajax先请求自己的服务器 a.php ,通过php请求第三方的网站，使用 file_get_contents获取到请求的数据然后返回给js</span><br />
<span style=\"line-height:1.5;\">2、jsonp格式：</span><br />
<span style=\"line-height:1.5;\">jsonp限制：只能发GET请求</span><br />
<span style=\"line-height:1.5;\">A. 接口服务器端 必须要把要返回的数据放到一个函数中【函数名先约定好】</span><br />
<span style=\"line-height:1.5;\">$str = json_encode($arr);</span><br />
<span style=\"line-height:1.5;\">echo \"abc($str)\";</span><br />
<span style=\"line-height:1.5;\">B. 客户端 JS在请求时这样写：</span><br />
&lt;script&gt;<br />
function abc(data){<br />
&nbsp;&nbsp;&nbsp;&nbsp;alert(data.name + data.age);<br />
}<br />
&lt;/script&gt;<br />
&lt;script src=\"http://www.jxshop.com/bcd.php\"&gt;&lt;/script&gt;<br />
<br />' WHERE `id` = 37 [ RunTime:0.0534s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000123s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000288s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016557s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016714s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001042s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001173s ]

[ 2016-06-05T21:20:30+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000603s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001091s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001221s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('PHP的垃圾回收机制是怎样的？','<span style=\"line-height:1.5;\">PHP可以自动进行内存管理，清除不再需要的对象。PHP使用了引用计数(referencecounting)</span><br />
<span style=\"line-height:1.5;\">这种单纯的垃圾回收(garbagecollection)机制。每个对象都内含一个引用计数器，每reference连接到对象，计数器加1。当reference离开生存空间或被设为NULL，计数器减1。当某个对象的引用计数器为零时，PHP知道你将不再需要使用这个对象，释放其所占的内存空间</span><br />') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000121s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007285s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007360s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000544s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000611s ]

[ 2016-06-05T21:20:31+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000584s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000771s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000836s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000143s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007070s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007196s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000802s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000923s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001089s ]
INFO: [ app_end ] --END-- [ RunTime:0.001173s ]

[ 2016-06-05T21:22:23+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000027s ]
INFO: [ app_init ] --END-- [ RunTime:0.000585s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000883s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000993s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('JS如何实现鼠标放上某行高亮显示','<span style=\"line-height:1.5;\">&lt;script&gt;</span><br />
<span style=\"line-height:1.5;\">$(document).ready(function(){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; $(\"#orderlist &nbsp;li\").hover(function(){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).addClass(\'blue\');</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; } , function(){</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).removeClass(\'blue\');</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &nbsp; });</span><br />
<span style=\"line-height:1.5;\">});</span><br />
<span style=\"line-height:1.5;\">&lt;/script&gt;</span><br />
<span style=\"line-height:1.5;\">&lt;div&gt;</span><br />
<span style=\"line-height:1.5;\">&nbsp; &nbsp; &lt;ul id=\"orderlist\"&gt;&lt;li&gt;aaaaaa&lt;/li&gt;&lt;/ul&gt;</span><br />
<span style=\"line-height:1.5;\">&lt;/div&gt;</span><br />
<span style=\"line-height:1.5;\"></span>') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000128s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007277s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007349s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000574s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000632s ]

[ 2016-06-05T21:22:24+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000682s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000846s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000913s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000133s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007157s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007235s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000570s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000628s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000826s ]
INFO: [ app_end ] --END-- [ RunTime:0.000888s ]

[ 2016-06-05T21:24:23+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000517s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000759s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000838s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('什么是抽象类和接口？抽象类和接口有什么不同和相似的地方？','<p>
	<span style=\"line-height:1.5;\">抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。</span>
</p>
<p>
	<span style=\"line-height:1.5;\">抽象类是通过关键字&nbsp;</span><span style=\"line-height:1.5;\">abstract&nbsp;</span><span style=\"line-height:1.5;\">来声明的。</span>
</p>
<p>
	<span style=\"line-height:1.5;\">接口类是通过</span><span style=\"line-height:1.5;\">interface</span><span style=\"line-height:1.5;\">关键字来声明的，接口类中的成员常量和方法都是</span><span style=\"line-height:1.5;\">public</span><span style=\"line-height:1.5;\">的</span>
</p>
<p>
	<span style=\"line-height:1.5;\">，方法可以不写关键字</span><span style=\"line-height:1.5;\">public</span><span style=\"line-height:1.5;\">，</span>
</p>
<p>
	<span style=\"line-height:1.5;\">接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</span>
</p>
<p>
	<span style=\"line-height:1.5;\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选</span>
</p>
<p>
	<span style=\"line-height:1.5;\">择抽象类还是接口要看具体实现。</span>
</p>
<p>
	<span style=\"line-height:1.5;\">子类继承抽象类使用</span><span style=\"line-height:1.5;\">extends</span><span style=\"line-height:1.5;\">，子类实现接口使用</span><span style=\"line-height:1.5;\">implements</span><span style=\"line-height:1.5;\">。</span>
</p>') [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007967s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008041s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000578s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000664s ]

[ 2016-06-05T21:24:25+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000744s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000868s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000936s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000145s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007049s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007123s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000575s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000633s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000810s ]
INFO: [ app_end ] --END-- [ RunTime:0.000872s ]

[ 2016-06-05T21:24:56+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/40
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000541s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000920s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000990s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 40  [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000151s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008095s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008175s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000637s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000695s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000888s ]
INFO: [ app_end ] --END-- [ RunTime:0.000949s ]

[ 2016-06-05T21:25:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/40
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000510s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000974s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001073s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: UPDATE `sc_message` SET `title`='什么是抽象类和接口？抽象类和接口有什么不同和相似的地方？',`content`='<p>
	<span style=\"line-height:1.5;\">抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">抽象类是通过关键字&nbsp;</span><span style=\"line-height:1.5;\">abstract&nbsp;</span><span style=\"line-height:1.5;\">来声明的。</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">接口类是通过</span><span style=\"line-height:1.5;\">interface</span><span style=\"line-height:1.5;\">关键字来声明的，接口类中的成员常量和方法都是</span><span style=\"line-height:1.5;\">public</span><span style=\"line-height:1.5;\">的</span><span style=\"line-height:1.5;\">，方法可以不写关键字</span><span style=\"line-height:1.5;\">public</span><span style=\"line-height:1.5;\">，</span>
</p>
<p>
	<span style=\"line-height:1.5;\">接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选</span><span style=\"line-height:1.5;\">择抽象类还是接口要看具体实现。</span>
</p>
<p>
	<span style=\"line-height:1.5;\">子类继承抽象类使用</span><span style=\"line-height:1.5;\">extends</span><span style=\"line-height:1.5;\">，子类实现接口使用</span><span style=\"line-height:1.5;\">implements</span><span style=\"line-height:1.5;\">。</span> 
</p>' WHERE `id` = 40 [ RunTime:0.0489s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000110s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000275s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016382s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016551s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001097s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001228s ]

[ 2016-06-05T21:26:49+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000494s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000871s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000971s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('InnoDB和Myisam两种存储引擎的区别？','<p>
	<span style=\"line-height:1.5;\">MyIsam</span><span style=\"line-height:1.5;\">特点：</span>
</p>
<p>
	<span style=\"line-height:1.5;\">并发性低，支持全文索引，读和写的速度快，锁表操作</span>
</p>
<p>
	<span style=\"line-height:1.5;\">数据，索引，表结构是分别进行存储</span>
</p>
<p>
	<span style=\"line-height:1.5;\">常用于论坛网站等对数据库经常读写的地方</span>
</p>
<p>
	<span style=\"line-height:1.5;\">InnoDB</span><span style=\"line-height:1.5;\">特点：</span>
</p>
<p>
	<span style=\"line-height:1.5;\">并发性比较高，支持事务和外键，锁行操作</span>
</p>
<p>
	<span style=\"line-height:1.5;\">经常用于商城、办公系统等需要业务逻辑的地方</span>
</p>
<p>
	<span style=\"line-height:1.5;\">数据和索引是共用同一个文件</span>
</p>
<p>
	<span style=\"line-height:1.5;\">Mysql5.6</span><span style=\"line-height:1.5;\">支持全文索引</span>
</p>') [ RunTime:0.0458s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000139s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007912s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007987s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000583s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000641s ]

[ 2016-06-05T21:26:50+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000023s ]
INFO: [ app_init ] --END-- [ RunTime:0.000604s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001219s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001365s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000099s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000190s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007044s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007133s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000595s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000654s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000810s ]
INFO: [ app_end ] --END-- [ RunTime:0.000910s ]

[ 2016-06-05T21:27:19+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000815s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000977s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001046s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 41  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000148s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008056s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008145s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000626s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000686s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000802s ]
INFO: [ app_end ] --END-- [ RunTime:0.000864s ]

[ 2016-06-05T21:27:27+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000522s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001120s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001267s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0040s ]
SQL: UPDATE `sc_message` SET `title`='InnoDB和MyIsam两种存储引擎的区别？',`content`='<p>
	<span style=\"line-height:1.5;\">MyIsam</span><span style=\"line-height:1.5;\">特点：</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">并发性低，支持全文索引，读和写的速度快，锁表操作</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">数据，索引，表结构是分别进行存储</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">常用于论坛网站等对数据库经常读写的地方</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">InnoDB</span><span style=\"line-height:1.5;\">特点：</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">并发性比较高，支持事务和外键，锁行操作</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">经常用于商城、办公系统等需要业务逻辑的地方</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">数据和索引是共用同一个文件</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">Mysql5.6</span><span style=\"line-height:1.5;\">支持全文索引</span> 
</p>' WHERE `id` = 41 [ RunTime:0.0024s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000122s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007443s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007522s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000618s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000676s ]

[ 2016-06-05T21:30:20+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000027s ]
INFO: [ app_init ] --END-- [ RunTime:0.000617s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000901s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001005s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('什么是Ajax？ Ajax的核心技术是什么，Ajax如何使用？','<p>
	<span style=\"line-height:1.5;\">Ajax</span><span style=\"line-height:1.5;\">是</span><span style=\"line-height:1.5;\">JS&nbsp;&nbsp;xml&nbsp;&nbsp;css&nbsp;&nbsp;&nbsp;dom&nbsp;</span><span style=\"line-height:1.5;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1.5;\">(</span><span style=\"line-height:1.5;\">同步、异步</span><span style=\"line-height:1.5;\">)</span><span style=\"line-height:1.5;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span>
</p>
<p>
	<span style=\"line-height:1.5;\">Ajax</span><span style=\"line-height:1.5;\">的核心技术是</span><span style=\"line-height:1.5;\">XMLHttpRequest</span><span style=\"line-height:1.5;\">，它是</span><span style=\"line-height:1.5;\">js</span><span style=\"line-height:1.5;\">中的一个对象</span>
</p>
<p>
	<span style=\"line-height:1.5;\">Ajax</span><span style=\"line-height:1.5;\">使用：</span><span style=\"line-height:1.5;\">1</span><span style=\"line-height:1.5;\">、创建一个</span><span style=\"line-height:1.5;\">ajax</span><span style=\"line-height:1.5;\">对象</span><span style=\"line-height:1.5;\"> 2</span><span style=\"line-height:1.5;\">、创建一个</span><span style=\"line-height:1.5;\">HTTP</span><span style=\"line-height:1.5;\">协议</span>
</p>
<p>
	<span style=\"line-height:1.5;\">&nbsp;&nbsp;3</span><span><span style=\"line-height:1.5;\">、向服务器发出请</span><span style=\"line-height:1.5;\">求</span></span><span style=\"line-height:1.5;\"> 4</span><span style=\"line-height:1.5;\">、</span><span style=\"line-height:1.5;\">ajax</span><span style=\"line-height:1.5;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1.5;\">使用场合：无刷新分页&nbsp;&nbsp;&nbsp;用户名校验&nbsp;&nbsp;&nbsp;&nbsp;百度搜索引擎</span>
</p>
<p>
	<span style=\"line-height:1.5;\">$.ajax({</span>
</p>
<p>
	<span style=\"line-height:1.5;\">url:</span><span style=\"line-height:1.5;\">请求地址</span>
</p>
<p>
	<span style=\"line-height:1.5;\">type:get/post</span><span style=\"line-height:1.5;\">请求方式</span>
</p>
<p>
	<span style=\"line-height:1.5;\">data:</span><span style=\"line-height:1.5;\">给服务器传递数据</span>
</p>
<p>
	<span style=\"line-height:1.5;\">dataType:	html/text/xml/json</span><span style=\"line-height:1.5;\">服务器返回的数据类型</span>
</p>
<p>
	<span style=\"line-height:1.5;\">success:	成功请求后的回调函数</span>
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1.5;\">async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1.5;\">同步、异步请求</span>
</p>
<p>
	<span style=\"line-height:1.5;\">cache:true/false	是否进行缓存</span>
</p>
<p>
	<span style=\"line-height:1.5;\">})</span>
</p>
<p>
	<span style=\"line-height:1.5;\">Ajax</span><span style=\"line-height:1.5;\">的</span><span style=\"line-height:1.5;\">Json</span><span style=\"line-height:1.5;\">数据如何解析：通过</span><span style=\"line-height:1.5;\">eval()</span><span style=\"line-height:1.5;\">函数，将返回的</span><span style=\"line-height:1.5;\">json</span><span style=\"line-height:1.5;\">数据转变实体对象</span>
</p>
<p>
	<span style=\"line-height:1.5;\">Var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1.5;\">为</span><span style=\"line-height:1.5;\">ajax</span><span style=\"line-height:1.5;\">请求成功后返回的</span><span style=\"line-height:1.5;\">json</span><span style=\"line-height:1.5;\">数据</span>
</p>') [ RunTime:0.0029s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000053s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007478s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007612s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000591s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000659s ]

[ 2016-06-05T21:30:21+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000662s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000771s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000868s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000090s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000235s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008353s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008575s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001217s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001419s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000858s ]
INFO: [ app_end ] --END-- [ RunTime:0.000934s ]

[ 2016-06-05T21:30:46+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000603s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001038s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001197s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 42  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000175s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007707s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007797s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000526s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000591s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000810s ]
INFO: [ app_end ] --END-- [ RunTime:0.000879s ]

[ 2016-06-05T21:32:07+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000607s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000779s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000845s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: UPDATE `sc_message` SET `title`='什么是Ajax？Ajax的核心技术是什么？Ajax如何使用？Ajax如何解析json数据？',`content`='<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">是</span><span style=\"line-height:1;\">JS&nbsp;&nbsp;xml&nbsp;&nbsp;css&nbsp;&nbsp;&nbsp;dom&nbsp;</span><span style=\"line-height:1;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">同步、异步</span><span style=\"line-height:1;\">)</span><span style=\"line-height:1;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span> 
</p>
<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">的核心技术是</span><span style=\"line-height:1;\">XMLHttpRequest</span><span style=\"line-height:1;\">，它是</span><span style=\"line-height:1;\">js</span><span style=\"line-height:1;\">中的一个对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">使用：</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">对象</span><span style=\"line-height:1;\"> 2</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">HTTP</span><span style=\"line-height:1;\">协议</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;3</span><span><span style=\"line-height:1;\">、向服务器发出请</span><span style=\"line-height:1;\">求</span></span><span style=\"line-height:1;\"> 4</span><span style=\"line-height:1;\">、</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1;\">使用场合：无刷新分页&nbsp;&nbsp;&nbsp;用户名校验&nbsp;&nbsp;&nbsp;&nbsp;百度搜索引擎</span> 
</p>
<p>
	<span style=\"line-height:1;\">$.ajax({</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;url:</span><span style=\"line-height:1;\">请求地址</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;type:get/post</span><span style=\"line-height:1;\">请求方式</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;data:</span><span style=\"line-height:1;\">给服务器传递数据</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;dataType:	html/text/xml/json</span><span style=\"line-height:1;\">服务器返回的数据类型</span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span></span><span style=\"line-height:1;\">success:	成功请求后的回调函数</span></span> 
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1;\">async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1;\">同步、异步请求</span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1;\">cache:true/false	是否进行缓存</span></span> 
</p>
<p>
	<span style=\"line-height:1;\">})</span> 
</p>
<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">的</span><span style=\"line-height:1;\">Json</span><span style=\"line-height:1;\">数据如何解析：通过</span><span style=\"line-height:1;\">eval()</span><span style=\"line-height:1;\">函数，将返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据转变实体对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">Var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1;\">为</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">请求成功后返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据</span> 
</p>' WHERE `id` = 42 [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000052s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000126s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007669s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007758s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000619s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000675s ]

[ 2016-06-05T21:32:36+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000595s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001145s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001239s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0031s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 42  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000066s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008002s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008090s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000685s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000749s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000815s ]
INFO: [ app_end ] --END-- [ RunTime:0.000876s ]

[ 2016-06-05T21:34:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000549s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000927s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001003s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0032s ]
SQL: UPDATE `sc_message` SET `title`='什么是Ajax？Ajax的核心技术是什么？Ajax如何使用？Ajax如何解析json数据？',`content`='<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">是</span><span style=\"line-height:1;\">JS、xml、css、dom&nbsp;</span><span style=\"line-height:1;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">同步、异步</span><span style=\"line-height:1;\">)</span><span style=\"line-height:1;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span>
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">的核心技术</span>是</span><span style=\"line-height:1;\">XMLHttpRequest</span><span style=\"line-height:1;\">，它是</span><span style=\"line-height:1;\">js</span><span style=\"line-height:1;\">中的一个对象</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">使用：</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">对象</span><span style=\"line-height:1;\"> 2</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">HTTP</span><span style=\"line-height:1;\">协议</span> 
</p>
<p>
	<span style=\"line-height:1;\">3</span><span><span style=\"line-height:1;\">、向服务器发出请</span><span style=\"line-height:1;\">求</span></span><span style=\"line-height:1;\"> 4</span><span style=\"line-height:1;\">、</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1;\">使用场合：无刷新分页、用户名校验、百度搜索引擎</span> 
</p>
<p>
	<span style=\"line-height:1;\">$.ajax({</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;url:</span><span style=\"line-height:1;\">请求地址</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;type:get/post</span><span style=\"line-height:1;\">请求方式</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;data:</span><span style=\"line-height:1;\">给服务器传递数据</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;dataType:	html/text/xml/json</span><span style=\"line-height:1;\">服务器返回的数据类型</span>
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">
	<p>
		&nbsp;&nbsp;&nbsp;&nbsp;success:	成功请求后的回调函数
	</p>
	<p>
		<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1;\">同步、异步请求</span>
	</p>
</span></span>
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1;\"></span><span style=\"line-height:1;\"></span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1;\">cache:true/false	是否进行缓存</span></span> 
</p>
<p>
	<span style=\"line-height:1;\">})</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">的</span><span style=\"line-height:1;color:#E53333;\">Json</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">数据如何解析：</span>通过</span><span style=\"line-height:1;\">eval()</span><span style=\"line-height:1;\">函数，将返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据转变实体对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">Var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1;\">为</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">请求成功后返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据</span> 
</p>' WHERE `id` = 42 [ RunTime:0.0504s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000106s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000263s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015743s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015893s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001142s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001275s ]

[ 2016-06-05T21:35:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000745s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000830s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000909s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 42  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000138s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007361s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007515s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000775s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000855s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000891s ]
INFO: [ app_end ] --END-- [ RunTime:0.000954s ]

[ 2016-06-05T21:35:26+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000778s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000710s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000792s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0036s ]
SQL: UPDATE `sc_message` SET `title`='什么是Ajax？Ajax的核心技术是什么？Ajax如何使用？Ajax如何解析json数据？',`content`='<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">是</span><span style=\"line-height:1;\">JS、xml、css、dom&nbsp;</span><span style=\"line-height:1;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">同步、异步</span><span style=\"line-height:1;\">)</span><span style=\"line-height:1;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">的核心技术</span>是</span><span style=\"line-height:1;\">XMLHttpRequest</span><span style=\"line-height:1;\">，它是</span><span style=\"line-height:1;\">js</span><span style=\"line-height:1;\">中的一个对象</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">使用：</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">对象</span><span style=\"line-height:1;\"> 2</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">HTTP</span><span style=\"line-height:1;\">协议</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;3</span><span><span style=\"line-height:1;\">、向服务器发出请</span><span style=\"line-height:1;\">求</span></span><span style=\"line-height:1;\"> 4</span><span style=\"line-height:1;\">、</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1;\">使用场合：无刷新分页、用户名校验、百度搜索引擎</span> 
</p>
<p>
	<span style=\"line-height:1;\">$.ajax({</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;url:</span><span style=\"line-height:1;\">请求地址</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;type:get/post</span><span style=\"line-height:1;\">请求方式</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;data:</span><span style=\"line-height:1;\">给服务器传递数据</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;dataType:	html/text/xml/json</span><span style=\"line-height:1;\">服务器返回的数据类型</span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\"> </span></span>
</p>
<p>
	&nbsp;&nbsp;&nbsp;&nbsp;success:	成功请求后的回调函数
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1;\">同步、异步请求</span> 
</p>
<p>
	<br />
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1;\"></span><span style=\"line-height:1;\"></span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1;\">cache:true/false	是否进行缓存</span></span> 
</p>
<p>
	<span style=\"line-height:1;\">})</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">的</span><span style=\"line-height:1;color:#E53333;\">Json</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">数据如何解析：</span>通过</span><span style=\"line-height:1;\">eval()</span><span style=\"line-height:1;\">函数，将返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据转变实体对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1;\">为</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">请求成功后返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据</span> 
</p>' WHERE `id` = 42 [ RunTime:0.0568s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000110s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000278s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016332s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016526s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001281s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001424s ]

[ 2016-06-05T21:35:43+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000065s ]
INFO: [ app_init ] --END-- [ RunTime:0.000779s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001041s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001130s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0033s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 42  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000155s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007715s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007790s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000581s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000641s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000801s ]
INFO: [ app_end ] --END-- [ RunTime:0.000864s ]

[ 2016-06-05T21:36:10+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000635s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000971s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001084s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0035s ]
SQL: UPDATE `sc_message` SET `title`='什么是Ajax？Ajax的核心技术是什么？Ajax如何使用？Ajax如何解析json数据？',`content`='<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">是</span><span style=\"line-height:1;\">JS、xml、css、dom&nbsp;</span><span style=\"line-height:1;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">同步、异步</span><span style=\"line-height:1;\">)</span><span style=\"line-height:1;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">的核心技术</span>是</span><span style=\"line-height:1;\">XMLHttpRequest</span><span style=\"line-height:1;\">，它是</span><span style=\"line-height:1;\">js</span><span style=\"line-height:1;\">中的一个对象</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">使用：</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">对象</span><span style=\"line-height:1;\"> 2</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">HTTP</span><span style=\"line-height:1;\">协议</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3</span><span><span style=\"line-height:1;\">、向服务器发出请</span><span style=\"line-height:1;\">求</span></span><span style=\"line-height:1;\"> 4</span><span style=\"line-height:1;\">、</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1;\">使用场合：无刷新分页、用户名校验、百度搜索引擎</span> 
</p>
<p>
	<span style=\"line-height:1;\">$.ajax({</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;url:</span><span style=\"line-height:1;\">请求地址</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;type:get/post</span><span style=\"line-height:1;\">请求方式</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;data:</span><span style=\"line-height:1;\">给服务器传递数据</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;dataType:	html/text/xml/json</span><span style=\"line-height:1;\">服务器返回的数据类型</span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\"> </span></span> 
</p>
<p>
	&nbsp;&nbsp;&nbsp;&nbsp;success:	成功请求后的回调函数
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1;\">同步、异步请求</span>
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1;\"></span><span style=\"line-height:1;\"></span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1;\">cache:true/false	是否进行缓存</span></span> 
</p>
<p>
	<span style=\"line-height:1;\">})</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">的</span><span style=\"line-height:1;color:#E53333;\">Json</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">数据如何解析：</span>通过</span><span style=\"line-height:1;\">eval()</span><span style=\"line-height:1;\">函数，将返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据转变实体对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1;\">为</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">请求成功后返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据</span> 
</p>' WHERE `id` = 42 [ RunTime:0.0562s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000111s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000274s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016461s ]
INFO: [ view_parse ] --END-- [ RunTime:0.016603s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001064s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001185s ]

[ 2016-06-05T21:36:19+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000024s ]
INFO: [ app_init ] --END-- [ RunTime:0.000619s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000850s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000921s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 42  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000149s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007733s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007807s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000632s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000694s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000699s ]
INFO: [ app_end ] --END-- [ RunTime:0.000762s ]

[ 2016-06-05T21:36:29+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000030s ]
INFO: [ app_init ] --END-- [ RunTime:0.000794s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001336s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001450s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0031s ]
SQL: UPDATE `sc_message` SET `title`='什么是Ajax？Ajax的核心技术是什么？Ajax如何使用？Ajax如何解析json数据？',`content`='<p>
	<span style=\"line-height:1;\">Ajax</span><span style=\"line-height:1;\">是</span><span style=\"line-height:1;\">JS、xml、css、dom&nbsp;</span><span style=\"line-height:1;\">多种技术的结合，它是一种可以与服务器进行</span><span style=\"line-height:1;\">(</span><span style=\"line-height:1;\">同步、异步</span><span style=\"line-height:1;\">)</span><span style=\"line-height:1;\">交互的技术，特点：页面不刷新，减少用户等待时间，用户体验好</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">的核心技术</span>是</span><span style=\"line-height:1;\">XMLHttpRequest</span><span style=\"line-height:1;\">，它是</span><span style=\"line-height:1;\">js</span><span style=\"line-height:1;\">中的一个对象</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">使用：</span><span style=\"line-height:1;\">1</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">对象</span><span style=\"line-height:1;\"> 2</span><span style=\"line-height:1;\">、创建一个</span><span style=\"line-height:1;\">HTTP</span><span style=\"line-height:1;\">协议</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;3</span><span><span style=\"line-height:1;\">、向服务器发出请</span><span style=\"line-height:1;\">求</span></span><span style=\"line-height:1;\"> 4</span><span style=\"line-height:1;\">、</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">接收服务器返回的信息</span> 
</p>
<p>
	<span style=\"line-height:1;\">使用场合：无刷新分页、用户名校验、百度搜索引擎</span> 
</p>
<p>
	<span style=\"line-height:1;\">$.ajax({</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;url:</span><span style=\"line-height:1;\">请求地址</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;type:get/post</span><span style=\"line-height:1;\">请求方式</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;data:</span><span style=\"line-height:1;\">给服务器传递数据</span> 
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;dataType:	html/text/xml/json</span><span style=\"line-height:1;\">服务器返回的数据类型</span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\"> </span></span> 
</p>
<p>
	&nbsp;&nbsp;&nbsp;&nbsp;success:	成功请求后的回调函数
</p>
<p>
	<span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;async:true/false&nbsp;&nbsp;</span><span style=\"line-height:1;\">同步、异步请求</span> 
</p>
<p style=\"text-indent:21.0000pt;\">
	<span style=\"line-height:1;\"></span><span style=\"line-height:1;\"></span> 
</p>
<p>
	<span style=\"line-height:1.5;\"><span style=\"line-height:1;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"line-height:1;\">cache:true/false	是否进行缓存</span></span> 
</p>
<p>
	<span style=\"line-height:1;\">})</span> 
</p>
<p>
	<span style=\"line-height:1;color:#E53333;\">Ajax</span><span style=\"line-height:1;color:#E53333;\">的</span><span style=\"line-height:1;color:#E53333;\">Json</span><span style=\"line-height:1;\"><span style=\"color:#E53333;\">数据如何解析：</span>通过</span><span style=\"line-height:1;\">eval()</span><span style=\"line-height:1;\">函数，将返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据转变实体对象</span> 
</p>
<p>
	<span style=\"line-height:1;\">var&nbsp;obj&nbsp;=&nbsp;eval(data);&nbsp;&nbsp;&nbsp;//data</span><span style=\"line-height:1;\">为</span><span style=\"line-height:1;\">ajax</span><span style=\"line-height:1;\">请求成功后返回的</span><span style=\"line-height:1;\">json</span><span style=\"line-height:1;\">数据</span> 
</p>' WHERE `id` = 42 [ RunTime:0.0528s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000100s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000244s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.016900s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017065s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001030s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001154s ]

[ 2016-06-05T21:39:36+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000022s ]
INFO: [ app_init ] --END-- [ RunTime:0.000624s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000837s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000905s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: INSERT INTO `sc_message` (`title`,`content`) VALUES ('写出一个能创建多级目录的PHP函数？','<p>
	<span style=\"line-height:1.5;\">&nbsp;function&nbsp;createdir($path,$mode){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_dir($path)){&nbsp;&nbsp;//</span><span style=\"line-height:1.5;\">判断目录存在否，存在不创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录</span><span style=\"line-height:1.5;\">\'\"&nbsp;.&nbsp;$path&nbsp;.&nbsp;\"\'</span><span style=\"line-height:1.5;\">已经存在</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;//</span><span style=\"line-height:1.5;\">不存在创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$re=mkdir($path,$mode,true);&nbsp;//</span><span style=\"line-height:1.5;\">第三个参数为</span><span style=\"line-height:1.5;\">true</span><span style=\"line-height:1.5;\">即可以创建多</span><span style=\"line-height:1.5;\">级目录</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($re){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建成功</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建失败</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$path=\"/aa/bb/cc/cd\";&nbsp;//</span><span style=\"line-height:1.5;\">要创建的目录</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$mode=0755;&nbsp;//</span><span style=\"line-height:1.5;\">创建目录的模式</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createdir($path,$mode);//</span><span style=\"line-height:1.5;\">测试</span>
</p>') [ RunTime:0.0538s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000100s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000256s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.015773s ]
INFO: [ view_parse ] --END-- [ RunTime:0.015998s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001254s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001422s ]

[ 2016-06-05T21:39:37+08:00 ] 127.0.0.1 /index.php/Admin/Index/index.html
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000606s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000786s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000856s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000057s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000130s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006741s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006822s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000567s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000626s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000803s ]
INFO: [ app_end ] --END-- [ RunTime:0.000863s ]

[ 2016-06-05T21:39:54+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/43
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000026s ]
INFO: [ app_init ] --END-- [ RunTime:0.000796s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000972s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001062s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0034s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 43  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000178s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008146s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008218s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000599s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000658s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000802s ]
INFO: [ app_end ] --END-- [ RunTime:0.000897s ]

[ 2016-06-05T21:41:48+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/43
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000489s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000811s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000900s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0042s ]
SQL: UPDATE `sc_message` SET `title`='写出一个能创建多级目录的PHP函数？',`content`='<p>
	<span style=\"line-height:1.5;\">&nbsp;function&nbsp;createdir($path,$mode){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_dir($path)){&nbsp;&nbsp;//</span><span style=\"line-height:1.5;\">判断目录存在否，存在不创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录</span><span style=\"line-height:1.5;\">\'\"&nbsp;.&nbsp;$path&nbsp;.&nbsp;\"\'</span><span style=\"line-height:1.5;\">已经存在</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;//</span><span style=\"line-height:1.5;\">不存在创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$re=mkdir($path,$mode,true);&nbsp;//</span><span style=\"line-height:1.5;\">第三个参数为</span><span style=\"line-height:1.5;\">true</span><span style=\"line-height:1.5;\">即可以创建多</span><span style=\"line-height:1.5;\">级目录</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($re){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建成功</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建失败</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">$path=\"/aa/bb/cc/cd\";&nbsp;//</span><span style=\"line-height:1.5;\">要创建的目录</span><br />
<span style=\"line-height:1.5;\">$mode=0755;&nbsp;//</span><span style=\"line-height:1.5;\">创建目录的模式</span><br />
<span style=\"line-height:1.5;\">createdir($path,$mode);//</span><span style=\"line-height:1.5;\">测试</span> 
</p>' WHERE `id` = 43 [ RunTime:0.0482s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000113s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000281s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.017214s ]
INFO: [ view_parse ] --END-- [ RunTime:0.017363s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001167s ]
INFO: [ view_filter ] --END-- [ RunTime:0.001302s ]

[ 2016-06-05T21:42:44+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/43
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000612s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000901s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000967s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0037s ]
SQL: SELECT * FROM `sc_message` WHERE `id` = 43  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000154s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007852s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007932s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000630s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000689s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000962s ]
INFO: [ app_end ] --END-- [ RunTime:0.001024s ]

[ 2016-06-05T21:43:00+08:00 ] 127.0.0.1 /index.php/admin/index/edit/id/43
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000019s ]
INFO: [ app_init ] --END-- [ RunTime:0.000594s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000776s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000843s ]
SQL: SHOW COLUMNS FROM `sc_message` [ RunTime:0.0039s ]
SQL: UPDATE `sc_message` SET `title`='写出一个能创建多级目录的PHP函数？',`content`='<p>
	<span style=\"line-height:1.5;\">function&nbsp;createdir($path,$mode){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;if(is_dir($path)){&nbsp;&nbsp;//</span><span style=\"line-height:1.5;\">判断目录存在否，存在不创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录</span><span style=\"line-height:1.5;\">\'\"&nbsp;.&nbsp;$path&nbsp;.&nbsp;\"\'</span><span style=\"line-height:1.5;\">已经存在</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;//</span><span style=\"line-height:1.5;\">不存在创建</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$re=mkdir($path,$mode,true);&nbsp;//</span><span style=\"line-height:1.5;\">第三个参数为</span><span style=\"line-height:1.5;\">true</span><span style=\"line-height:1.5;\">即可以创建多</span><span style=\"line-height:1.5;\">级目录</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($re){</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建成功</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"</span><span style=\"line-height:1.5;\">目录创建失败</span><span style=\"line-height:1.5;\">\";</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">&nbsp;&nbsp;&nbsp;&nbsp;}</span><br />
<span style=\"line-height:1.5;\">}</span><br />
<span style=\"line-height:1.5;\">$path=\"/aa/bb/cc/cd\";&nbsp;//</span><span style=\"line-height:1.5;\">要创建的目录</span><br />
<span style=\"line-height:1.5;\">$mode=0755;&nbsp;//</span><span style=\"line-height:1.5;\">创建目录的模式</span><br />
<span style=\"line-height:1.5;\">createdir($path,$mode);//</span><span style=\"line-height:1.5;\">测试</span> 
</p>' WHERE `id` = 43 [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007461s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007548s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000619s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000681s ]

[ 2016-06-05T22:17:24+08:00 ] 127.0.0.1 /index.php/admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000508s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000665s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000732s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000148s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006314s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006392s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000414s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000484s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000639s ]
INFO: [ app_end ] --END-- [ RunTime:0.000699s ]

